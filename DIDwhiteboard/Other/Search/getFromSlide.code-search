# Query: getFromSlide
# Flags: RegExp
# Including: ./DIDwhiteboard
# ContextLines: 1

907 results - 431 files

DIDwhiteboard • Answer Key not working.json:
  3799    ],
  3800:   "code": "const { ggb1, table1, text1, ggb2, button1 } = components;\n\nbutton1.updateData({ disabled: true });\nbutton1.updateData({ align: 'right' });\n\nggb1.instance.setErrorDialogsActive(false);\nggb2.instance.setErrorDialogsActive(false);\n\nlet data = getFromSlide(`slide-ed3177f3fd8a`, 'ggb1');\nlet data2 = getFromSlide(`slide-ed3177f3fd8a`, 'ggb2');\n00;\nif (data.innerData) {\n  ggb1.instance.setValue('showColor01', data.innerData['showColor01']);\n  if (ggb1.instance.getValue('showColor01') == 1) {\n    ggb1.instance.setColor('rhombus1', 0, 127, 175);\n  } else {\n    ggb1.instance.setColor('rhombus1', 218, 41, 28);\n  }\n  ggb1.instance.setValue('showColor02', data.innerData['showColor02']);\n  if (ggb1.instance.getValue('showColor02') == 1) {\n    ggb1.instance.setColor('rhombus2', 0, 127, 175);\n  } else {\n    ggb1.instance.setColor('rhombus2', 218, 41, 28);\n  }\n  ggb1.instance.setValue('showColor03', data.innerData['showColor03']);\n  if (ggb1.instance.getValue('showColor03') == 1) {\n    ggb1.instance.setColor('rhombus3', 0, 127, 175);\n  } else {\n    ggb1.instance.setColor('rhombus3', 218, 41, 28);\n  }\n  ggb1.instance.setValue('showColor04', data.innerData['showColor04']);\n  if (ggb1.instance.getValue('showColor04') == 1) {\n    ggb1.instance.setColor('rhombus4', 0, 127, 1
  3801    "autogeneratedCode": []

DIDwhiteboard • pass2Chunks.js:
  28  
  29: let prevInput1 = getFromSlide(id1, "input1", defPrevInput1) || defPrevInput1;
  30  

  36  let prevSelect1 =
  37:   getFromSlide(id1, "select1", defPrevSelect1) || defPrevSelect1;
  38  

  57  
  58: let prevTable1 = getFromSlide(id1, "table1", defPrevTable1) || defPrevTable1;
  59  

  64  
  65: let prevGGB1 = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  66  

DIDwhiteboard • 7A/M1/TC L16 - More Scientific Notation/slide7.js:
  111    // get previous data
  112:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  113    // check previous data

DIDwhiteboard • 7A/M1/TC L16 - More Scientific Notation/slide8.js:
  64    // get previous data
  65:   let prevFib = getFromSlide(slideID, compName, defFib) || defFib;
  66    // fill in other useful data

DIDwhiteboard • 7A/M1/TC L16 - More Scientific Notation/slide14.js:
  24  
  25: let breaths = getFromSlide(ID1, 'input1.data.text', false) || false;
  26  

  34  
  35: const prevGGB = getFromSlide(ID1, 'ggb1', false) || false;
  36  if (prevGGB.innerData && prevGGB.innerData['balloonInput']) {

DIDwhiteboard • 7A/M1/TD L21 - Approximate Values of Roots/OLDslide3.js:
  48    // get previous data
  49:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  50    // check previous data

DIDwhiteboard • A1/Florida.js:
   9  
  10: let choiceData = getFromSlide(`slide-c5c9a9ea9bab`, "select1");
  11  let choiceNum = choiceData.data.selected;

DIDwhiteboard • A1/M1/TA L05 - Multiplying Polynomial Expressions/slide3.js:
  17  
  18: let data = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  19  

  31  
  32: // let data = getFromSlide(`slide-9860ce21608f`, "ggb1");
  33  ggb1.instance.evalCommand(`number1=(${data.innerData["number1"]})`);

DIDwhiteboard • A1/M1/TA L05 - Multiplying Polynomial Expressions/slide4.js:
  24  
  25: let data = getFromSlide(id0, "ggb1", false) || false; // don't forget to change slide id
  26  

  38  
  39: let data1 = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  40  

  52  
  53: // let data = getFromSlide(`slide-9860ce21608f`, "ggb1");
  54  ggb1.instance.evalCommand(`number1=(${data.innerData["number1"]})`);

  58  
  59: // let data1 = getFromSlide(`slide-f470b88af1ec`, "ggb1");
  60  ggb1.instance.evalCommand(`number5=(${data1.innerData["number5"]})`);

DIDwhiteboard • A1/M1/TA L05 - Multiplying Polynomial Expressions/slide9.js:
  26  
  27: let data = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  28  

  40  
  41: // let data = getFromSlide(`slide-9d7b5a11c8e1`, "ggb1");
  42  ggb1.instance.setTextValue("textinput1", data.innerData["textinput1"]);

DIDwhiteboard • A1/M1/TA L05 - Multiplying Polynomial Expressions/slide16.js:
  34  
  35: let sel1 = getFromSlide(id1, "select1.data.selected", []) || [];
  36: let sel2 = getFromSlide(id1, "select2.data.selected", []) || [];
  37: let sel3 = getFromSlide(id1, "select3.data.selected", []) || [];
  38: let sel4 = getFromSlide(id1, "select4.data.selected", []) || [];
  39: let sel5 = getFromSlide(id1, "select5.data.selected", []) || [];
  40: let sel6 = getFromSlide(id1, "select6.data.selected", []) || [];
  41: let sel7 = getFromSlide(id1, "select7.data.selected", []) || [];
  42: let sel8 = getFromSlide(id1, "select8.data.selected", []) || [];
  43  // console.log(sel1[0]);

DIDwhiteboard • A1/M1/TB L11 - Writing and Solving Equations in One Variable/slide7.js:
  28  let top =
  29:   getFromSlide(
  30      "slide-5523a522ba51",

  47  let right =
  48:   getFromSlide(
  49      "slide-5523a522ba51",

DIDwhiteboard • A1/M1/TC L15 - Solving and Graphing Compound Inequalities/slide 5.js:
  38    let prevEnds =
  39:     getFromSlide("slide-f20099ccaff8", "ggb1.data.endsRecord", []) || [];
  40    /* [{

DIDwhiteboard • A1/M1/TC L15 - Solving and Graphing Compound Inequalities/slide 6.js:
  55    let prevEnds =
  56:     getFromSlide("slide-aa4bbc984e49", "ggb1.data.endsRecord", []) || [];
  57    /* [{

DIDwhiteboard • A1/M1/TC L15 - Solving and Graphing Compound Inequalities/slide 8.js:
  50    let clue1 =
  51:     getFromSlide("slide-4086cacd56f8", "ggb1.data.shadings", {}) || {};
  52    if (!Object.keys(clue1).length) {

DIDwhiteboard • A1/M1/TC L15 - Solving and Graphing Compound Inequalities/slide 9.js:
   50    let clue1 =
   51:     getFromSlide("slide-4086cacd56f8", "ggb1.data.shadings", {}) || {};
   52    if (!Object.keys(clue1).length) {

  106    let clue2 =
  107:     getFromSlide("slide-b9857447c139", "ggb1.data.shadings", {}) || {};
  108    if (!Object.keys(clue2).length) {

DIDwhiteboard • A1/M1/TC L15 - Solving and Graphing Compound Inequalities/slide 10.js:
   50    let clue1 =
   51:     getFromSlide("slide-4086cacd56f8", "ggb1.data.shadings", {}) || {};
   52    if (!Object.keys(clue1).length) {

  106    let clue2 =
  107:     getFromSlide("slide-b9857447c139", "ggb1.data.shadings", {}) || {};
  108    if (!Object.keys(clue2).length) {

  162    let clue3 =
  163:     getFromSlide("slide-ba407376a432", "ggb1.data.shadings", {}) || {};
  164    if (!Object.keys(clue3).length) {

DIDwhiteboard • A1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/Slide 2.js:
  40  const id = "slide-1a0fd993032e";
  41: let content = getFromSlide(id, "table1", defTable) || defTable;
  42  

  53  
  54: let content2 = getFromSlide(id, "table2", defTable) || defTable;
  55  

DIDwhiteboard • A1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/Slide 4.js:
  56  const id1 = "slide-1a0fd993032e";
  57: let content = getFromSlide(id1, "table1", defTable) || defTable;
  58  let num = content.data.rows[0][0].value;

  60  
  61: let content2 = getFromSlide(id1, "table2", defTable) || defTable;
  62  let num3 = content2.data.rows[0][0].value;

  67  const id2 = "slide-8e74cc3defa1";
  68: let content3 = getFromSlide(id2, "table1", defTable) || defTable;
  69  let num7 = content3.data.rows[0][0].value;

DIDwhiteboard • A1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/Slide 5.js:
   54  
   55: let data = getFromSlide("slide-591b98c4c31d", "ggb1", defGGB) || defGGB;
   56  let slide4x1;

  103  let content =
  104:   getFromSlide("slide-1a0fd993032e", "table1", defTable) || defTable;
  105  let num = content.data.rows[0][0].value;

  108  let content2 =
  109:   getFromSlide("slide-1a0fd993032e", "table2", defTable) || defTable;
  110  let num3 = content2.data.rows[0][0].value;

  115  let content3 =
  116:   getFromSlide("slide-8e74cc3defa1", "table1", defTable) || defTable;
  117  let num7 = content3.data.rows[0][0].value;

DIDwhiteboard • A1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/Slide 13.js:
  29  
  30: let data = getFromSlide("slide-102b2e9edb49", "ggb1", defGGB) || defGGB;
  31  let num;

DIDwhiteboard • A1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/Slide 14.js:
  16  
  17: let data = getFromSlide("slide-102b2e9edb49", "ggb1", defGGB) || defGGB;
  18  let num;

DIDwhiteboard • A1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/Slide 15.js:
  4  
  5: const prev64 = getFromSlide("slide-15596c4169b5", "ggb2.data.save64", "") || "";
  6  

DIDwhiteboard • A1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/Slide 19.js:
  4  
  5: const prev64 = getFromSlide("slide-1cba24759350", "ggb2.data.save64", "") || "";
  6  

DIDwhiteboard • A1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/Slide 20.js:
  13  
  14: const prev64 = getFromSlide("slide-15596c4169b5", "ggb2.data.save64", "") || "";
  15  

  35  const prev642 =
  36:   getFromSlide("slide-1cba24759350", "ggb2.data.save64", "") || "";
  37  

DIDwhiteboard • A1/M2/TA L04 - Solutions Sets of Linear Inequalites in Two Variables/slide4.js:
  47  const id1 = "slide-1a0fd993032e";
  48: let content = getFromSlide(id1, "table1", defTable) || defTable;
  49  let num = content.data.rows[0][3].value;

  55  
  56: let content2 = getFromSlide(id1, "table2", defTable) || defTable;
  57  let num2 = content2.data.rows[0][3].value;

DIDwhiteboard • A1/M2/TA L04 - Solutions Sets of Linear Inequalites in Two Variables/slide5.js:
  17  let prevText =
  18:   getFromSlide(id, "cc_submit_c997e1f0e31b_input1.data.text", "") || "";
  19  

DIDwhiteboard • A1/M2/TA L04 - Solutions Sets of Linear Inequalites in Two Variables/slide6.js:
  56  const id1 = "slide-1a0fd993032e";
  57: let content = getFromSlide(id1, "table1", defTable) || defTable;
  58  let num = utils.math.evaluateLatex(content.data.rows[0][0].value).value;

  60  
  61: let content2 = getFromSlide(id1, "table2", defTable) || defTable;
  62  let num3 = content2.data.rows[0][0].value;

  67  const id2 = "slide-8e74cc3defa1";
  68: let content3 = getFromSlide(id2, "table1", defTable) || defTable;
  69  let num7 = content3.data.rows[0][0].value;

DIDwhiteboard • A1/M2/TA L04 - Solutions Sets of Linear Inequalites in Two Variables/slide7.js:
   54  
   55: let data = getFromSlide("slide-591b98c4c31d", "ggb1", defGGB) || defGGB;
   56  let slide4x1;

  103  let content =
  104:   getFromSlide("slide-1a0fd993032e", "table1", defTable) || defTable;
  105  let num = content.data.rows[0][0].value;

  108  let content2 =
  109:   getFromSlide("slide-1a0fd993032e", "table2", defTable) || defTable;
  110  let num3 = content2.data.rows[0][0].value;

  115  let content3 =
  116:   getFromSlide("slide-8e74cc3defa1", "table1", defTable) || defTable;
  117  let num7 = content3.data.rows[0][0].value;

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 3.js:
  13  
  14: // let choiceData = getFromSlide(`slide-74ce23520a2c`, "select1");
  15  // let choiceNum = choiceData.data.selected;

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 10.js:
  15  
  16: let equa = getFromSlide(`slide-6c39a93a5e84`, `input1.data.text`, '') || '';
  17  

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 11.js:
  15  
  16: let equa = getFromSlide(`slide-6c39a93a5e84`, `input1.data.text`, '') || '';
  17  

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 12.js:
  15  
  16: let equa = getFromSlide(`slide-6c39a93a5e84`, `input1.data.text`, '') || '';
  17  

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 14.js:
  13  let equa =
  14:   getFromSlide(
  15      `slide-97ff43948160`,

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 15.js:
  17  
  18: let equa = getFromSlide(`slide-6c39a93a5e84`, `input1.data.text`, '') || '';
  19  

  26  let equa2 =
  27:   getFromSlide(
  28      `slide-97ff43948160`,

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 16.js:
  24  
  25: // let choiceData = getFromSlide(`slide-0637f0fae6a5`, "select1");
  26  // let choiceNum = choiceData.data.selected;

DIDwhiteboard • A1/M2/TC L20 - Interpreting Correlation/slide12.js:
  31  let studentInput =
  32:   getFromSlide(id1, "cc_sharewithclass_4f50d6f4b87e_input1.data.text", "") ||
  33    "";

DIDwhiteboard • A1/M2/TC L21 - Analyzing Bivariate Data/Slide 2.js:
  34  const id = `slide-a833275c68b2`;
  35: let choiceData = getFromSlide(id, "select1", false) || false;
  36  let choiceNum = choiceData.data?.selected;

DIDwhiteboard • A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/Slide 7.js:
   4  
   5: let ans6Points = getFromSlide("slide-cf9b01832f76", "radio2.data.ans2", 0) || 0;
   6: let ans7Points = getFromSlide("slide-cf9b01832f76", "radio3.data.ans3", 0) || 0;
   7: let ans8Points = getFromSlide("slide-cf9b01832f76", "radio4.data.ans4", 0) || 0;
   8: let ans9Points = getFromSlide("slide-813f1d1e3537", "radio1.data.ans1", 0) || 0;
   9  let ans10Points =
  10:   getFromSlide("slide-813f1d1e3537", "radio2.data.ans2", 0) || 0;
  11  let ans11Points =
  12:   getFromSlide("slide-813f1d1e3537", "radio3.data.ans3", 0) || 0;
  13  let ans12Points =
  14:   getFromSlide("slide-813f1d1e3537", "radio4.data.ans4", 0) || 0;
  15  let ans13Points =
  16:   getFromSlide("slide-7b259e6cd80c", "radio1.data.ans1", 0) || 0;
  17  let ans14Points =
  18:   getFromSlide("slide-7b259e6cd80c", "radio2.data.ans2", 0) || 0;
  19  let ans15Points =
  20:   getFromSlide("slide-7b259e6cd80c", "radio3.data.ans3", 0) || 0;
  21  let ans16Points =
  22:   getFromSlide("slide-7b259e6cd80c", "radio4.data.ans4", 0) || 0;
  23  let ans17Points =
  24:   getFromSlide("slide-228ea8e8d770", "radio1.data.ans1", 0) || 0;
  25  let ans18Points =
  26:   getFromSlide("slide-228ea8e8d770", "radio2.data.ans2", 0) || 0;
  27  let ans19Points =
  28:   getFromSlide("slide-228ea8e8d770", "radio3.data.ans3", 0) || 0;
  29  let ans20Points =
  30:   getFromSlide("slide-228ea8e8d770", "radio4.data.ans4", 0) || 0;
  31  let tot2 = ans6Points + ans7Points + ans8Points + ans9Points + ans10Points;

DIDwhiteboard • A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/Slide 12.js:
  54  const rowsContent =
  55:   getFromSlide("slide-dcc43ecceb2e", "table1.data.rows", defRows) || defRows;
  56  

DIDwhiteboard • A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/Slide 13.js:
  32  const rowsContent =
  33:   getFromSlide("slide-dcc43ecceb2e", "table1.data.rows", defRows) || defRows;
  34  const rowsContent2 =
  35:   getFromSlide("slide-b266a791cd1c", "table1.data.rows", defRows) || defRows;
  36  

DIDwhiteboard • A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/Slide 14.js:
  37  const rowsContent =
  38:   getFromSlide('slide-dcc43ecceb2e', 'table1.data.rows', defRows) || defRows;
  39  const rowsContent2 =
  40:   getFromSlide('slide-b266a791cd1c', 'table1.data.rows', defRows) || defRows;
  41  

DIDwhiteboard • A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/Slide 15.js:
  33  const rowsContent =
  34:   getFromSlide("slide-dcc43ecceb2e", "table1.data.rows", defRows) || defRows;
  35  const rowsContent2 =
  36:   getFromSlide("slide-b266a791cd1c", "table1.data.rows", defRows) || defRows;
  37  

DIDwhiteboard • A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/Slide 16.js:
   9  
  10: let data = getFromSlide("slide-e8d3cd8b2be0", "ggb1", defGGB) || defGGB;
  11  

  50  const rowsContent =
  51:   getFromSlide("slide-dcc43ecceb2e", "table1.data.rows", defRows) || defRows;
  52  const rowsContent2 =
  53:   getFromSlide("slide-b266a791cd1c", "table1.data.rows", defRows) || defRows;
  54  

DIDwhiteboard • A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/Slide 17.js:
  45  const rowsContent =
  46:   getFromSlide("slide-dcc43ecceb2e", "table1.data.rows", defRows) || defRows;
  47  const rowsContent2 =
  48:   getFromSlide("slide-b266a791cd1c", "table1.data.rows", defRows) || defRows;
  49  

DIDwhiteboard • A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/Slide 18.js:
  51  const rowsContent =
  52:   getFromSlide("slide-dcc43ecceb2e", "table1.data.rows", defRows) || defRows;
  53  const rowsContent2 =
  54:   getFromSlide("slide-b266a791cd1c", "table1.data.rows", defRows) || defRows;
  55  

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide4.js:
  26  const id1 = "slide-d21824258239";
  27: const oldTable = getFromSlide(id1, "table1", defTable) || defTable;
  28  table1.updateCell(1, 0, { className: "text-info" });

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide5.js:
  28  const id1 = "slide-b654ebd543e9";
  29: const oldTable = getFromSlide(id1, "table1", defTable) || defTable;
  30  table1.updateCell(3, 0, { className: "text-info" });

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide6.js:
  32  const id1 = "slide-1764c21ee85e";
  33: const oldTable = getFromSlide(id1, "table1", defTable) || defTable;
  34  

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide8.js:
  5  
  6: /*const oldTable = getFromSlide('slide-68c507b4ca99', 'table1');
  7  const oldCell00 = oldTable.data.rows[0][0].value;

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide11.js:
  11  const sketches =
  12:   getFromSlide('slide-a086712cf51e', 'ggb1.innerData.doodles', []) || [];
  13  

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide12.js:
  11  const sketches2 =
  12:   getFromSlide(`slide-633c077360b9`, `ggb1.innerData.doodles2`, []) || [];
  13  for (let i = 0; i < sketches2.length; i++) {

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide13.js:
  37  const sketches3 =
  38:   getFromSlide(`slide-a7b672b5dd25`, `ggb1.innerData.doodles2`, []) || [];
  39  for (let i = 0; i < sketches3.length; i++) {

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide14.js:
  19  const sketches2 =
  20:   getFromSlide(`slide-a7b672b5dd25`, `ggb1.innerData.doodles2`, []) || [];
  21  // console.log(sketches2);

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide15.js:
  42  const sketches2 =
  43:   getFromSlide(`slide-3b6db967be76`, `ggb1.innerData.doodles2`, []) || [];
  44  // console.log(sketches2);

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide20.js:
  17  
  18: let data = getFromSlide(`slide-bfc4a7709efe`, 'ggb1', defGGB) || defGGB;
  19  

DIDwhiteboard • A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide3.js:
  13  let prevStrokes =
  14:   getFromSlide("slide-01a39149e9bb", "ggb2.data.cmdStrings", []) || [];
  15  for (let i = 0, L = prevStrokes.length; i < L; i++) {

DIDwhiteboard • A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide8.js:
  36  const incData =
  37:   getFromSlide("slide-6eb90322dfa7", "ggb1.innerData", false) || false;
  38  if (incData) {

  62  const decData =
  63:   getFromSlide("slide-6eb90322dfa7", "ggb2.innerData", false) || false;
  64  if (decData) {

DIDwhiteboard • A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide11.js:
  36  const incData =
  37:   getFromSlide("slide-e932b98e88b1", "ggb1.innerData", false) || false;
  38  if (incData) {

  59  const decData =
  60:   getFromSlide("slide-e932b98e88b1", "ggb2.innerData", false) || false;
  61  if (decData) {

DIDwhiteboard • A1/M3/TC L13 - Modeling Elevation as a Function of Time/slide10.js:
  41  const prevSketches =
  42:   getFromSlide("slide-8646fd8a4630", "ggb1.data.strokeStrings") || [];
  43  const currentSketches = ggb1.instance.getAllObjectNames("penstroke");

DIDwhiteboard • A1/M3/TC L13 - Modeling Elevation as a Function of Time/slide12.js:
  41  const prevSketches =
  42:   getFromSlide("slide-fea879b785b9", "ggb1.data.strokeStrings") || [];
  43  const currentSketches = ggb1.instance.getAllObjectNames("penstroke");

DIDwhiteboard • A1/M3/TC L13 - Modeling Elevation as a Function of Time/slide14.js:
  50  const prevSketches =
  51:   getFromSlide("slide-c79aa62c31a4", "ggb1.data.strokeStrings") || [];
  52  const currentSketches = ggb1.instance.getAllObjectNames("penstroke");

DIDwhiteboard • A1/M3/TC L13 - Modeling Elevation as a Function of Time/slide17.js:
  24  
  25: const prevText = getFromSlide(id1, "text1", defPrevText1) || defPrevText1;
  26  

  69  
  70: // probably do a getFromSlide to grab the previous function and its domain
  71  

DIDwhiteboard • A1/M3/TC L13 - Modeling Elevation as a Function of Time/slide18.js:
  34  
  35: const prevText2 = getFromSlide(id2, "text1", defPrevText1) || defPrevText1;
  36: const prevText3 = getFromSlide(id3, "text1", defPrevText1) || defPrevText1;
  37  

  60    const numRows =
  61:     getFromSlide(id1, "cc_sharewithclass_8864c54161f8_input1.data.text", "") ||
  62      "";

  71    }
  72:   //const prevEq1 = getFromSlide()
  73    const prevSegs = [

DIDwhiteboard • A1/M3/TD L18 - Exploring Transformations of the Graphs of Functions/slide15.js:
  12  function inherit1() {
  13:   const data1 = getFromSlide('slide-8aa464ffd805', 'ggb1.innerData');
  14    // make sure stuff is defined

DIDwhiteboard • A1/M3/TD L18 - Exploring Transformations of the Graphs of Functions/slide16.js:
  12    const data1 =
  13:     getFromSlide('slide-8aa464ffd805', 'ggb1.innerData', false) || false;
  14    // make sure stuff is defined

  30    const data2 =
  31:     getFromSlide('slide-16829f834d88', 'ggb1.innerData', false) || false;
  32    // make sure stuff is defined

DIDwhiteboard • A1/M4/TB L11 - Graphing Quadratic Functions from Factored Form/slide7.js:
  22  const id = "slide-8ec8f8b16818";
  23: let data = getFromSlide(id, "ggb1", defGGB) || defGGB;
  24  let num;

DIDwhiteboard • A1/M4/TB L11 - Graphing Quadratic Functions from Factored Form/slide8.js:
  22  let num1 =
  23:   getFromSlide(id1, "cc_sharewithclass_1d21611696e7_input1.data.text", "") ||
  24    "";

  27  let num2 =
  28:   getFromSlide(id2, "cc_sharewithclass_ec89b8d691e9_input1.data.text", "") ||
  29    "";

DIDwhiteboard • A1/M4/TB L11 - Graphing Quadratic Functions from Factored Form/slide9.js:
  30  let equa =
  31:   getFromSlide(id, `cc_sharewithclass_ec89b8d691e9_input1.data.text`, "") || "";
  32  

DIDwhiteboard • A1/M4/TB L11 - Graphing Quadratic Functions from Factored Form/slide10.js:
  30  let equa =
  31:   getFromSlide(id, `cc_sharewithclass_ec89b8d691e9_input1.data.text`, "") || "";
  32  

DIDwhiteboard • A1/M4/TB L11 - Graphing Quadratic Functions from Factored Form/slide11.js:
  30  let equa =
  31:   getFromSlide(id, `cc_sharewithclass_ec89b8d691e9_input1.data.text`, "") || "";
  32  

DIDwhiteboard • A1/M4/TB L11 - Graphing Quadratic Functions from Factored Form/slide12.js:
  19  let equa =
  20:   getFromSlide(id, `cc_sharewithclass_ec89b8d691e9_input1.data.text`, "") || "";
  21  

DIDwhiteboard • A1/M4/TC L20 - Art with Transformations (Optional)/slide4.js:
   46  
   47: let data = getFromSlide("slide-4e0ee4b64cf5", "ggb1", false) || false; // don't forget to change slide id
   48  

   60  
   61: // let data = getFromSlide("slide-4e0ee4b64cf5", "ggb1");
   62  let selectedArray =
   63:   getFromSlide("slide-4e0ee4b64cf5", "select1.data.selected", []) || [];
   64  // console.log(data);

  204    ggb1.instance.reset();
  205:   // let data = getFromSlide("slide-4e0ee4b64cf5", "ggb1");
  206:   // let selectedArray = getFromSlide(
  207    //   "slide-4e0ee4b64cf5",

DIDwhiteboard • A1/M4/TC L20 - Art with Transformations (Optional)/slide5.js:
  10    const prev64 =
  11:     getFromSlide('slide-a82c4d5898ab', 'ggb1.data.next64', '') || '';
  12    rowNumber = 1;

DIDwhiteboard • A1/M4/TD L23 - Creating Equations of Quadratic Functions to Model Contexts/slide3.js:
  25  const id = "slide-cbc7ba2ab067";
  26: let data1 = getFromSlide(id, "ggb1", defGGB) || defGGB;
  27  

DIDwhiteboard • A1/M4/TD L23 - Creating Equations of Quadratic Functions to Model Contexts/slide4.js:
  10  let equa =
  11:   getFromSlide(
  12      `slide-4a2e9356d6a0`,

DIDwhiteboard • A1/M4/TD L23 - Creating Equations of Quadratic Functions to Model Contexts/slide5.js:
  10  let equa =
  11:   getFromSlide(
  12      `slide-4a2e9356d6a0`,

DIDwhiteboard • A1/M4/TD L23 - Creating Equations of Quadratic Functions to Model Contexts/slide8.js:
  27  let equa =
  28:   getFromSlide(id, `cc_sharewithclass_895a8bb3acfc_input1.data.text`, "") || "";
  29  

DIDwhiteboard • A1/M4/TD L23 - Creating Equations of Quadratic Functions to Model Contexts/slide9.js:
  15  let equa =
  16:   getFromSlide(id1, `cc_sharewithclass_895a8bb3acfc_input1.data.text`, "") ||
  17    "";

  20  let estimate =
  21:   getFromSlide(id2, `cc_sharewithclass_895a8bb3acfc_input1.data.text`, "") ||
  22    "";

DIDwhiteboard • A1/M4/TD L23 - Creating Equations of Quadratic Functions to Model Contexts/slide10.js:
  29  let equa =
  30:   getFromSlide(id, `cc_sharewithclass_895a8bb3acfc_input1.data.text`, "") || "";
  31  

DIDwhiteboard • A1/M4/TD L23 - Creating Equations of Quadratic Functions to Model Contexts/slide11.js:
  29  let equa =
  30:   getFromSlide(id, `cc_sharewithclass_895a8bb3acfc_input1.data.text`, "") || "";
  31  

DIDwhiteboard • A1/M5/TA L01 - Exploring Patterns/Slide 3.js:
  24  let expression =
  25:   getFromSlide(id, `cc_sharewithclass_4cabc3386c1d_input1.data.text`, "") || "";
  26  if (!expression) {

DIDwhiteboard • A1/M5/TA L01 - Exploring Patterns/Slide 8.js:
  25  
  26: let num = getFromSlide("slide-769747e1f500", "table1", defTable) || defTable;
  27  let inp1 = num.data.rows[0][1].value;

DIDwhiteboard • A1/M5/TA L01 - Exploring Patterns/Slide 11.js:
  25  
  26: let num = getFromSlide("slide-4b5052d79a45", "table1", defTable) || defTable;
  27  let inp1 = num.data.rows[0][1].value;

DIDwhiteboard • A1/M5/TB L08 - Exponential Functions/slide4.js:
  5  let prevInput =
  6:   getFromSlide(
  7      "slide-2c776e051648",

DIDwhiteboard • A1/M5/TB L08 - Exponential Functions/slide5.js:
  22  let prevInput =
  23:   getFromSlide(id1, "cc_submit_e6a119967b77_input1.data.text", "") || "";
  24  let pop;

  53  let prevGuess =
  54:   getFromSlide(id1, "cc_sharewithclass_3c3c64371bb3_input1.data.text", "") ||
  55    "";

DIDwhiteboard • A1/M5/TB L08 - Exponential Functions/slide8.js:
  12  // let pop =
  13: //   getFromSlide(
  14  //     "slide-4202051357f1",

  36  let prevInput =
  37:   getFromSlide(id1, "cc_submit_b51173edde46_input1.data.text", "") || "";
  38  let pop;

  59  let roundsGuessed =
  60:   getFromSlide(id1, "cc_submit_e23eafe346b2_input1.data.text", "") ||
  61    `\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(id1)}\]}`;

  64  let equationInput =
  65:   getFromSlide(id2, "cc_sharewithclass_58546e8dab0e_input1.data", "") || "";
  66  let equation = `\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(

DIDwhiteboard • A1/M5/TB L08 - Exponential Functions/slide13.js:
  17  const id = "slide-d021f4b47c14";
  18: let prevSelArray = getFromSlide(id, "select1.data.selected", []) || [];
  19  let chosenPeople;

DIDwhiteboard • A1/M5/TB L08 - Exponential Functions/slide17.js:
  27  let prevEq =
  28:   getFromSlide(id, "cc_submit_92d827505d19_input1.data.text", "") || "";
  29  if (!prevEq || prevEq == "f(x) = ") {

  36  
  37: let prevTable = getFromSlide(id, "table1.data", []) || [];
  38  

DIDwhiteboard • A1/M5/TC L16 - Exponential Growth/slide2.js:
  23  let num =
  24:   getFromSlide(id1, 'cc_sharewithclass_9ffdfff3446d_input1.data.text', '') ||
  25    '';

  47  
  48: let prevGGB1 = getFromSlide('slide-755a4b257adf', 'ggb1', false) || false; // don't forget to change slide id
  49  

  61  
  62: // let graph1 = getFromSlide("slide-755a4b257adf", "ggb1");
  63  

DIDwhiteboard • A1/M5/TC L16 - Exponential Growth/slide3.js:
  28  
  29: let prevGGB1 = getFromSlide('slide-dfe7eaa5d603', 'ggb1', false) || false; // don't forget to change slide id
  30  

  42  
  43: // let data = getFromSlide("slide-dfe7eaa5d603", "ggb1");
  44  

DIDwhiteboard • A1/M5/TC L16 - Exponential Growth/slide9.js:
  48  let num =
  49:   getFromSlide(id1, 'cc_submit_061e63dcb5e9_input1.data.text', '') || '';
  50  

DIDwhiteboard • A1/M6/TA L01 - Analyzing Paint Splatters/slide6.js:
  64  
  65: let prevTable1 = getFromSlide(id1, 'table1', defPrevTable1) || defPrevTable1;
  66  

DIDwhiteboard • A1/M6/TA L01 - Analyzing Paint Splatters/slide11.js:
  50  
  51: let data = getFromSlide(`slide-3c4f252a12e8`, 'ggb1', defGGB) || defGGB;
  52  

DIDwhiteboard • G4/G4 M5 TC L11 - Rube Goldberg Machine - Slide 6.js:
   51   *
   52:  * * use getPrevGGB instead of getFromSlide
   53   *

  669  	// get previous data
  670: 	let prevGGB = getFromSlide(slideID, compName, false) || false;
  671  	// check previous data

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-311327f1e81f.js:
  20  
  21: const rowsContent = getFromSlide(id1, 'table1.data.rows', false) || false;
  22  

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-bf2eba252a4f.js:
  13  
  14: let data = getFromSlide(id1, 'ggb1', false) || false;
  15  

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-dbbabd10eca9.js:
  25  
  26: let data = getFromSlide(id1, 'ggb1', false) || false;
  27  

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-e60060433bcd.js:
  11  
  12: let data1 = getFromSlide(id1, 'ggb1', false) || false;
  13: let data2 = getFromSlide(id1, 'ggb2', false) || false;
  14  

DIDwhiteboard • G6/M1/TB L07 - Graphs of Ratio Relationships/slide-8b37c628f714.js:
  27  
  28: let data = getFromSlide(id1, 'ggb1', false) || false;
  29  

DIDwhiteboard • G6/M1/TB L07 - Graphs of Ratio Relationships/slide-24d09fdab15c.js:
  13  
  14: let data = getFromSlide(id1, 'ggb1', false) || false;
  15  

DIDwhiteboard • G6/M1/TB L07 - Graphs of Ratio Relationships/slide-31b2d67da206.js:
  35  
  36: let animal = getFromSlide(id1, 'select1.data.selected', false) || false;
  37  

  59  let num =
  60:   getFromSlide(id1, 'cc_submit_6bc092fd2459_input1.data.text', false) || false;
  61  

DIDwhiteboard • G6/M1/TB L07 - Graphs of Ratio Relationships/slide-ab57d6dc616a.js:
  23  
  24: let animal = getFromSlide(id1, 'select1.data.selected', false) || false;
  25  

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide-2b80c170d9da.js:
  18  
  19: const rowsContent = getFromSlide(id1, 'table1.data.rows', false) || false;
  20  

  44  }
  45: let data = getFromSlide(id1, `ggb1`, false) || false;
  46  

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide-53add29a6595.js:
  29  
  30: let blueNum = getFromSlide(id1, `input1.data.text`, false) || false;
  31  

  44  
  45: let redNum = getFromSlide(id1, `input2.data.text`, false) || false;
  46  if (!redNum) {

  58  
  59: let blueNum2 = getFromSlide(id1, `input3.data.text`, false) || false;
  60  if (!blueNum2) {

  72  
  73: let redNum2 = getFromSlide(id1, `input4.data.text`, false) || false;
  74  if (!redNum2) {

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide4.js:
  23  
  24: let blueNum = getFromSlide(id1, `input1.data.text`, false) || false;
  25  

  38  
  39: let redNum = getFromSlide(id1, `input2.data.text`, false) || false;
  40  if (!redNum) {

  52  
  53: let blueNum2 = getFromSlide(id1, `input3.data.text`, false) || false;
  54  if (!blueNum2) {

  66  
  67: let redNum2 = getFromSlide(id1, `input4.data.text`, false) || false;
  68  if (!redNum2) {

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide6.js:
  12  
  13: const rowsContent = getFromSlide(id1, 'table1.data.rows', false) || false;
  14  

  38  }
  39: let data = getFromSlide(id1, `ggb1`, false) || false;
  40  

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide8.js:
   37  
   38: const rowsContent = getFromSlide(id2, "table1.data.rows", false) || false;
   39  

   69  
   70: let data = getFromSlide(id1, `ggb1`, false) || false;
   71  

  107  
  108: /*let blueNum = getFromSlide(`slide-042033649309`, `input1.data.text`);
  109  if(!blueNum){

  117  
  118: let redNum = getFromSlide(`slide-042033649309`, `input2.data.text`);
  119  if(!redNum){

  128  
  129: let blueNum2 = getFromSlide(`slide-042033649309`, `input3.data.text`);
  130  if(!blueNum2){

  139  
  140: let redNum2 = getFromSlide(`slide-042033649309`, `input4.data.text`);
  141  if(!redNum2){

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide9.js:
  38  
  39: const rowsContent = getFromSlide(id1, "table1.data.rows", false) || false;
  40  

  55  
  56: let data = getFromSlide(id1, `ggb1`, false) || false;
  57  

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide10.js:
  18  
  19: const rowsContent1 = getFromSlide(id1, 'table1.data.rows', false) || false;
  20  

  35  
  36: const rowsContent2 = getFromSlide(id2, 'table1.data.rows', false) || false;
  37  

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide13.js:
  18  
  19: const rowsContent1 = getFromSlide(id1, 'table1.data.rows', false) || false;
  20  

  35  
  36: const rowsContent2 = getFromSlide(id2, 'table1.data.rows', false) || false;
  37  

  52  
  53: let data1 = getFromSlide(id1, `ggb1`, false) || false;
  54  

  66  
  67: let data2 = getFromSlide(id2, `ggb1`, false) || false;
  68  

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide14.js:
   6  
   7: let blueNum1 = getFromSlide(id1, `input1.data.text`, false) || false;
   8: let redNum1 = getFromSlide(id1, `input2.data.text`, false) || false;
   9: let blueNum2 = getFromSlide(id1, `input3.data.text`, false) || false;
  10: let redNum2 = getFromSlide(id1, `input4.data.text`, false) || false;
  11  

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide15.js:
   6  
   7: let data = getFromSlide(id1, `ggb1`, false) || false;
   8  

  15  
  16: /*let blueNum = getFromSlide(`slide-327a92d99a54`, `input1.data.text`);
  17: let redNum = getFromSlide(`slide-327a92d99a54`, `input2.data.text`);
  18: let blueNum2 = getFromSlide(`slide-327a92d99a54`, `input3.data.text`);
  19: let redNum2 = getFromSlide(`slide-327a92d99a54`, `input4.data.text`);
  20  

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide18.js:
  15  
  16: let represent = getFromSlide(id1, 'radio1.data.selected', false) || false;
  17  

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide9.js:
  16  
  17: let data1 = getFromSlide(id1, 'ggb1', false) || false;
  18: let data2 = getFromSlide(id2, 'ggb1', false) || false;
  19  

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide10.js:
  48  
  49: let oldTable1 = getFromSlide(id1, 'table1', false) || false;
  50: let oldTable2 = getFromSlide(id1, 'table2', false) || false;
  51  

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide11.js:
  24  
  25: let oldTable1 = getFromSlide(id1, 'table1', false) || false;
  26: let oldTable2 = getFromSlide(id1, 'table2', false) || false;
  27  

  57  
  58: let choiceData = getFromSlide(id2, 'select1', false) || false;
  59  

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide12.js:
  32  let oldTable1 =
  33:   getFromSlide(id1, `cc_sharewithclass_e2f97ee48127_input1.data.text`, false) ||
  34    false;
  35  
  36: let oldTable2 = getFromSlide(id2, "table1", false) || false;
  37  

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide13.js:
  30  let num2 =
  31:   getFromSlide(id1, `cc_sharewithclass_e2f97ee48127_input1.data.text`, false) ||
  32    false;
  33  
  34: let old2Table = getFromSlide(id2, 'table2', false) || false;
  35  

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide14.js:
   8  
   9: let oldTable = getFromSlide(id1, "table1", false) || false;
  10  

  17  let estimation =
  18:   getFromSlide(id2, `cc_sharewithclass_e2f97ee48127_input1.data.text`, false) ||
  19    false;

  23  let estimation2 =
  24:   getFromSlide(id3, `cc_sharewithclass_e2f97ee48127_input1.data.text`, false) ||
  25    false;

  28  
  29: let oldTable2 = getFromSlide(id1, "table2", false) || false;
  30  

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide18.js:
  21  
  22: let numPrev = getFromSlide(id1, `input1.data.text`, false) || false;
  23  

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide19.js:
  22  
  23: let oldTable = getFromSlide(id1, 'table1', false) || false;
  24  

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide21.js:
  15  
  16: let data1 = getFromSlide(id1, 'ggb1', false) || false;
  17  

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/slide3.js:
  128    // get previous data
  129:   let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  130    // fill in other useful data

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/slide4.js:
   90    // get previous data
   91:   let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
   92    // fill in other useful data

  129    // get previous data
  130:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  131    // fill in other useful data

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/slide5.js:
  168    // get previous data
  169:   let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  170    // fill in other useful data

  207    // get previous data
  208:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  209    // fill in other useful data

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/slide6.js:
  148    // get previous data
  149:   let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  150    // fill in other useful data

  187    // get previous data
  188:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  189    // fill in other useful data

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/slide7.js:
  222    // get previous data
  223:   let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  224    // fill in other useful data

  261    // get previous data
  262:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  263    // fill in other useful data

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/slide8.js:
  181    // get previous data
  182:   let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  183    // fill in other useful data

  220    // get previous data
  221:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  222    // fill in other useful data

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/slide9.js:
  245    // get previous data
  246:   let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  247    // fill in other useful data

  284    // get previous data
  285:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  286    // fill in other useful data

  322    // get previous data
  323:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  324    // check previous data

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/slide10.js:
  265    // get previous data
  266:   let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  267    // fill in other useful data

  304    // get previous data
  305:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  306    // fill in other useful data

  342    // get previous data
  343:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  344    // check previous data

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/slide11.js:
  169    // get previous data
  170:   let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  171    // fill in other useful data

  208    // get previous data
  209:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  210    // fill in other useful data

  246    // get previous data
  247:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  248    // check previous data

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/slide12.js:
  305    // get previous data
  306:   let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  307    // fill in other useful data

  344    // get previous data
  345:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  346    // fill in other useful data

  382    // get previous data
  383:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  384    // check previous data

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/origFilesToDeleteWhenReady/slide3Orig.js:
  30  text3.updateData({ align: 'right' });
  31: const chosenCars = getFromSlide('slide-6bea0dbb5d23', 'select1.data.selected');
  32  

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/origFilesToDeleteWhenReady/slide4Orig.js:
   6  
   7: let num = getFromSlide(`slide-1d1f0ce2d833`, `input1.data.text`);
   8  if (!num) {

  16  
  17: const chosenCars = getFromSlide('slide-6bea0dbb5d23', 'select1.data.selected');
  18  

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/origFilesToDeleteWhenReady/slide5Orig.js:
  30  });
  31: let num = getFromSlide(`slide-1d1f0ce2d833`, `input1.data.text`);
  32  if (!num) {

  38  
  39: const chosenWheels = getFromSlide(
  40    'slide-937af2ed8277',

  83  
  84: const chosenCars = getFromSlide('slide-6bea0dbb5d23', 'select1.data.selected');
  85  if (chosenCars.includes('0')) {

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/origFilesToDeleteWhenReady/slide6Orig.js:
  10  
  11: let num = getFromSlide(`slide-6a5068b93e2c`, `input2.data.text`);
  12  if (!num) {

  18  
  19: const chosenWheels = getFromSlide(
  20    'slide-937af2ed8277',

  63  
  64: const chosenCars = getFromSlide('slide-6bea0dbb5d23', 'select1.data.selected');
  65  if (chosenCars.includes('0')) {

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/origFilesToDeleteWhenReady/slide7Orig.js:
   30  });
   31: let num = getFromSlide(`slide-6a5068b93e2c`, `input2.data.text`);
   32  if (!num) {

   38  
   39: const chosenPaint = getFromSlide('slide-c4837b1407e0', 'select1.data.selected');
   40  if (chosenPaint.includes('0')) {

  102  
  103: const chosenWheels = getFromSlide(
  104    'slide-937af2ed8277',

  147  
  148: const chosenCars = getFromSlide('slide-6bea0dbb5d23', 'select1.data.selected');
  149  if (chosenCars.includes('0')) {

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/origFilesToDeleteWhenReady/slide8Orig.js:
   10  
   11: let num = getFromSlide(`slide-18c4e65bae89`, `input2.data.text`);
   12  if (!num) {

   18  
   19: const chosenPaint = getFromSlide('slide-c4837b1407e0', 'select1.data.selected');
   20  if (chosenPaint.includes('0')) {

   55  
   56: const chosenWheels = getFromSlide(
   57    'slide-937af2ed8277',

  100  
  101: const chosenCars = getFromSlide('slide-6bea0dbb5d23', 'select1.data.selected');
  102  if (chosenCars.includes('0')) {

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/origFilesToDeleteWhenReady/slide9Orig.js:
   30  
   31: let grab = getFromSlide('slide-19f9221f8ad6', 'ggb1.data.image');
   32  image1.updateData({ src: `data:image/png;base64,${grab}` });

   40  
   41: let num = getFromSlide(`slide-18c4e65bae89`, `input2.data.text`);
   42  if (!num) {

   44  }
   45: const chosenCars = getFromSlide('slide-6bea0dbb5d23', 'select1.data.selected');
   46  // let decals = input1.data.text;

  115  
  116: const chosenPaint = getFromSlide('slide-c4837b1407e0', 'select1.data.selected');
  117  if (chosenPaint.includes('0')) {

  152  
  153: const chosenWheels = getFromSlide(
  154    'slide-937af2ed8277',

  952  }
  953: const chosenDecals = getFromSlide(
  954    'slide-19f9221f8ad6',

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/origFilesToDeleteWhenReady/slide10Orig.js:
   30  });
   31: let grab = getFromSlide('slide-19f9221f8ad6', 'ggb1.data.image');
   32  image1.updateData({ src: `data:image/png;base64,${grab}` });

   40  
   41: let num = getFromSlide(`slide-991744aa5025`, `input2.data.text`);
   42  if (!num) {

   51  }
   52: const chosenCars = getFromSlide('slide-6bea0dbb5d23', 'select1.data.selected');
   53  // let weights = input1.data.text;

   72    // let mustang = result.value + (weights * 1) / 2;
   73:   let decals = getFromSlide('slide-991744aa5025', 'input1.data.text');
   74    let audi = 173 / 50 + (decals * 1) / 25 + (weights * 1) / 2;

  139  
  140: const chosenPaint = getFromSlide('slide-c4837b1407e0', 'select1.data.selected');
  141  if (chosenPaint.includes('0')) {

  176  
  177: const chosenWheels = getFromSlide(
  178    'slide-937af2ed8277',

  976  }
  977: const chosenweights = getFromSlide(
  978    'slide-19f9221f8ad6',

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/origFilesToDeleteWhenReady/slide11Orig.js:
   30  });
   31: let grab = getFromSlide('slide-19f9221f8ad6', 'ggb1.data.image');
   32  image1.updateData({ src: `data:image/png;base64,${grab}` });

   40  
   41: let num = getFromSlide(`slide-991744aa5025`, `input2.data.text`);
   42  if (!num) {

   51  }
   52: const chosenCars = getFromSlide('slide-6bea0dbb5d23', 'select1.data.selected');
   53  // let weights = input1.data.text;

   72    // let mustang = result.value + (weights * 1) / 2;
   73:   let decals = getFromSlide('slide-991744aa5025', 'input1.data.text');
   74    let audi = 173 / 50 + (decals * 1) / 25 + (weights * 1) / 2;

  139  
  140: const chosenPaint = getFromSlide('slide-c4837b1407e0', 'select1.data.selected');
  141  if (chosenPaint.includes('0')) {

  176  
  177: const chosenWheels = getFromSlide(
  178    'slide-937af2ed8277',

  976  }
  977: const chosenweights = getFromSlide(
  978    'slide-19f9221f8ad6',

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/origFilesToDeleteWhenReady/slide12Orig.js:
   13  });
   14: let data = getFromSlide(`slide-134950e4f72a`, 'ggb1');
   15  

   48  
   49: let num = getFromSlide(`slide-5398724b0f0c`, `input2.data.text`);
   50  if (!num) {

   63  
   64: const chosenCars = getFromSlide('slide-6bea0dbb5d23', 'select1.data.selected');
   65  
   66: const chosenPaint = getFromSlide('slide-c4837b1407e0', 'select1.data.selected');
   67  

  103  
  104: const chosenWheels = getFromSlide(
  105    'slide-937af2ed8277',

  942  }
  943: const chosenweights = getFromSlide(
  944    'slide-19f9221f8ad6',

DIDwhiteboard • G6/M2/TE L17 -Parital Quotients/slide3.js:
  12  
  13: let grab = getFromSlide(id1, 'ggb1.data.image', false) || false;
  14  

DIDwhiteboard • G6/M2/TF L24 - Living on Mars/slide12.js:
  60  
  61: let num2 = getFromSlide(id1, 'input1.data.text', false) || false;
  62: let num3 = getFromSlide(id2, 'input1.data.text', false) || false;
  63  

DIDwhiteboard • G6/M3/TA L02 - Integers/slide4.js:
  17  
  18: const table1Data = getFromSlide(id1, 'table1', false) || false;
  19  

  34  
  35: const table2Data = getFromSlide(id2, 'table1', false) || false;
  36  

  51  
  52: const table3Data = getFromSlide(id3, 'table1', false) || false;
  53  

DIDwhiteboard • G6/M3/TC L12 - Reflections in the Coordinate Plane/slide2.js:
  6  
  7: const prev64 = getFromSlide(id1, 'ggb1.data.save64', false) || false;
  8  

DIDwhiteboard • G6/M4/TA L03 - Exploring Exponents/slide12.js:
  11  /*check1.updateData({
  12:   checked: getFromSlide(`slide-a0fa91df758d`, 'check1.data.checked'),
  13  });

  15  check2.updateData({
  16:   checked: getFromSlide(`slide-a0fa91df758d`, 'check2.data.checked'),
  17  });*/

DIDwhiteboard • G6/M4/TB L11 - Modeling Real-World Situations with Expressions/slide2.js:
  21  
  22: let prevGGB1 = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  23  

DIDwhiteboard • G6/M4/TB L11 - Modeling Real-World Situations with Expressions/slide3.js:
  34  
  35: let prevTable1 = getFromSlide(id1, 'table1', defPrevTable1) || defPrevTable1; // don't forget to change slide id
  36  

DIDwhiteboard • G6/M4/TB L11 - Modeling Real-World Situations with Expressions/slide10.js:
  47  
  48: let prevGGB1 = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  49  

  94  
  95: let prevTable1 = getFromSlide(id1, 'table1', defPrevTable1) || defPrevTable1; // don't forget to change slide id
  96  

DIDwhiteboard • G6/M4/TB L11 - Modeling Real-World Situations with Expressions/slide11.js:
  39  
  40: let prevTable1 = getFromSlide(id1, 'table1', defPrevTable1) || defPrevTable1; // don't forget to change slide id
  41  

DIDwhiteboard • G6/M4/TC L15 - Combining Like Terms  by using the Distributive Property/Slide 4.js:
   37  
   38: let prevGGB1 = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
   39  

   56  let prevInput1 =
   57:   getFromSlide(id1, id1SubmitInput, defPrevInput1) || defPrevInput1; // don't forget to change slide id
   58  

   70  
   71: let prevGGB2 = getFromSlide(id2, 'ggb1', false) || false; // don't forget to change slide id
   72  

   89  let prevInput2 =
   90:   getFromSlide(id2, id2SubmitInput, defPrevInput2) || defPrevInput2; // don't forget to change slide id
   91  

  103  
  104: let prevGGB3 = getFromSlide(id3, 'ggb1', false) || false; // don't forget to change slide id
  105  

  122  let prevInput3 =
  123:   getFromSlide(id3, id3SubmitInput, defPrevInput3) || defPrevInput3; // don't forget to change slide id
  124  

  148  // let num1 =
  149: //   getFromSlide(id1, 'cc_submit_bf72d60eac79_input1.data.text', false) || false;
  150  
  151  // let num2 =
  152: //   getFromSlide(id2, 'cc_submit_dbf462f0e6ea_input1.data.text', false) || false;
  153  

  158  // let num3 =
  159: //   getFromSlide(id3, 'cc_submit_73130a34d027_input1', defPrevInput1) ||
  160  //   defPrevInput1;

DIDwhiteboard • G6/M4/TC L15 - Combining Like Terms  by using the Distributive Property/Slide 6.js:
  45  
  46: let prevGGB1 = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  47  

  64  let prevInput1A =
  65:   getFromSlide(id1, id1SubmitInputA, defPrevInput1A) || defPrevInput1A; // don't forget to change slide id
  66  

  79  let prevInput1B =
  80:   getFromSlide(id1, id1SubmitInputB, defPrevInput1B) || defPrevInput1B; // don't forget to change slide id
  81  

DIDwhiteboard • G6/M4/TE L23 - Graphs of Ratio Relationships/slide5.js:
  32  const rowsContent =
  33:   getFromSlide(`slide-3928e267547b`, `table1.data.rows`, []) || [];
  34  

DIDwhiteboard • G6/M4/TE L23 - Graphs of Ratio Relationships/slide9.js:
  21  let num =
  22:   getFromSlide(id1, `cc_sharewithclass_d18937bea98a_input1.data.text`, "") ||
  23    "";

DIDwhiteboard • G6/M5/TC L09 - Properties of Solids/slide4.js:
  32  const id1 = 'slide-7db41f926d55';
  33: const oldTable = getFromSlide(id1, 'table1', defTable) || defTable;
  34  

DIDwhiteboard • G6/M5/TC L09 - Properties of Solids/slide5.js:
  36  const id1 = 'slide-7db41f926d55';
  37: const oldTable = getFromSlide(id1, 'table1', defTable) || defTable;
  38  

  71  const id2 = 'slide-fa6c74df7802';
  72: const oldTable2 = getFromSlide(id2, 'table1', defTable) || defTable;
  73  

DIDwhiteboard • G6/M5/TD L15 - Exploring Volume with Fractional Cubes/slide2.js:
  15  
  16: let data = getFromSlide(`slide-9fd03c3de428`, "ggb1", defGGB) || defGGB;
  17  

DIDwhiteboard • G6/M6/TA L04 - Creating a Histogram/Slide 4.js:
  17  let num1 =
  18:   getFromSlide(id1, `cc_submit_592a91ad09f0_input1.data.text`, "") || "";
  19  

DIDwhiteboard • G6/M6/TA L04 - Creating a Histogram/Slide 5.js:
  18  const rowsContent =
  19:   getFromSlide(`slide-1ecb8757d9c0`, "table2.data.rows", []) || [];
  20  

  24  let num1 =
  25:   getFromSlide(id1, `cc_submit_592a91ad09f0_input1.data.text`, "") || "";
  26  

  50  let num =
  51:   getFromSlide(
  52      `slide-8807883ea646`,

DIDwhiteboard • G6/M6/TC L15 - More Practice with Box Plots/Slide 13.js:
   9  let slide1Points =
  10:   getFromSlide("slide-35f9b23d1a09", "feedback1.data.tot", 0) || 0;
  11  let slide2Points =
  12:   getFromSlide("slide-c662bc4df24b", "feedback1.data.tot", 0) || 0;
  13  let slide3Points =
  14:   getFromSlide("slide-12cb27d98c36", "feedback1.data.tot", 0) || 0;
  15  let slide4Points =
  16:   getFromSlide("slide-843f74ed559e", "feedback1.data.tot", 0) || 0;
  17  let slide5Points =
  18:   getFromSlide("slide-c2d635e7285f", "feedback1.data.tot", 0) || 0;
  19  let slide6Points =
  20:   getFromSlide("slide-e500abd6c76f", "feedback1.data.tot", 0) || 0;
  21  let slide7Points =
  22:   getFromSlide("slide-1cb4e7a9697a", "feedback1.data.tot", 0) || 0;
  23  let slide8Points =
  24:   getFromSlide("slide-5dd8b9793ef0", "feedback1.data.tot", 0) || 0;
  25  let slide9Points =
  26:   getFromSlide("slide-e08c0cae6b87", "feedback1.data.tot", 0) || 0;
  27  let slide10Points =
  28:   getFromSlide("slide-8e4556404c46", "feedback1.data.tot", 0) || 0;
  29  let slide11Points =
  30:   getFromSlide("slide-9eb3acc74f53", "feedback1.data.tot", 0) || 0;
  31  let slide12Points =
  32:   getFromSlide("slide-bb739a0cde9d", "feedback1.data.tot", 0) || 0;
  33  let slideTotal =

DIDwhiteboard • G6/M6/TC L15 - More Practice with Box Plots/Slide 15.js:
  34  const id1 = "slide-d6ed20e78222";
  35: let num = getFromSlide(id1, "table1", defTable) || defTable;
  36  let val1 = num.data.rows[0][1].value;

DIDwhiteboard • G6/M6/TC L15 - More Practice with Box Plots/Slide 16.js:
  11  let totalPoints =
  12:   getFromSlide("slide-2f5efef9be15", "feedback1.data.tot", 0) || 0;
  13  

DIDwhiteboard • G7/M1/TA L01 - An Experiment with Ratios and Rates/slide5.js:
  35  
  36: let data = getFromSlide(ID1, "ggb1", false) || false;
  37  

DIDwhiteboard • G7/M1/TA L01 - An Experiment with Ratios and Rates/slide7.js:
  36  
  37: let data = getFromSlide(ID2, "ggb1", false) || false;
  38  

  44  let coinsPredicted =
  45:   getFromSlide(ID1, "cc_submit_34dbca62b9da_input1.data.text", false) || false;
  46  if (!coinsPredicted) {

DIDwhiteboard • G7/M1/TB L09 - Comparing Proportional Relationships/slide4.js:
  24  let studentInput =
  25:   getFromSlide(id1, 'cc_sharewithclass_a7c9bd6842f5_input1.data.text', '') ||
  26    '';

DIDwhiteboard • G7/M1/TB L09 - Comparing Proportional Relationships/slide11.js:
  24  let studentInput =
  25:   getFromSlide(id1, 'cc_sharewithclass_d992a12b1798_input1.data.text', '') ||
  26    '';

DIDwhiteboard • G7/M1/TB L09 - Comparing Proportional Relationships/slide24.js:
  20  let num1 = utils.math.evaluateLatex(
  21:   getFromSlide(id1, `cc_submit_7a8157be9a31_input1.data.text`, "").replace(
  22      "\\%",

DIDwhiteboard • G7/M1/TC L15 - Scale Drawings/slide6.js:
  45  
  46: let cell00 = getFromSlide(id1, "table1.data.cell00", "") || "";
  47: let cell01 = getFromSlide(id1, "table1.data.cell01", "") || "";
  48: let cell10 = getFromSlide(id1, "table1.data.cell10", "") || "";
  49: let cell11 = getFromSlide(id1, "table1.data.cell11", "") || "";
  50: let cell20 = getFromSlide(id1, "table1.data.cell20", "") || "";
  51: let cell21 = getFromSlide(id1, "table1.data.cell21", "") || "";
  52  

DIDwhiteboard • G7/M1/TC L15 - Scale Drawings/slide11.js:
  47  
  48: let cell00 = getFromSlide(id1, "table1.data.cell00", "") || "";
  49: let cell01 = getFromSlide(id1, "table1.data.cell01", "") || "";
  50: let cell10 = getFromSlide(id1, "table1.data.cell10", "") || "";
  51: let cell11 = getFromSlide(id1, "table1.data.cell11", "") || "";
  52: let cell20 = getFromSlide(id1, "table1.data.cell20", "") || "";
  53: let cell21 = getFromSlide(id1, "table1.data.cell21", "") || "";
  54  
  55: // let cell00 = getFromSlide("slide-c0de9a71c8d8", "table1.data.cell00");
  56: // let cell01 = getFromSlide("slide-c0de9a71c8d8", "table1.data.cell01");
  57: // let cell10 = getFromSlide("slide-c0de9a71c8d8", "table1.data.cell10");
  58: // let cell11 = getFromSlide("slide-c0de9a71c8d8", "table1.data.cell11");
  59: // let cell20 = getFromSlide("slide-c0de9a71c8d8", "table1.data.cell20");
  60: // let cell21 = getFromSlide("slide-c0de9a71c8d8", "table1.data.cell21");
  61  

DIDwhiteboard • G7/M2/TA L02 - Adding Integers/slide2.js:
  31  
  32: let previous = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  33  

  45  
  46: // let previous = getFromSlide("slide-1bbbce9dd14d", "ggb1");
  47  /*ggb1.instance.setValue('addend1', previous.innerData['addend1']);

DIDwhiteboard • G7/M2/TA L02 - Adding Integers/slide3.js:
  31  
  32: let previous = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  33  

  45  
  46: // let previous = getFromSlide("slide-bcd29a068199", "ggb1");
  47  /*ggb1.instance.setValue("addend1", previous.innerData["addend1"]);

DIDwhiteboard • G7/M2/TA L02 - Adding Integers/slide4.js:
  31  
  32: let previous = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  33  

  45  
  46: // let previous = getFromSlide("slide-684a38e253ee", "ggb1");
  47  /*ggb1.instance.setValue("addend1", previous.innerData["addend1"]);

DIDwhiteboard • G7/M2/TA L02 - Adding Integers/slide5.js:
  20  
  21: let previous1 = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  22  

  34  
  35: let previous2 = getFromSlide(id2, "ggb1", false) || false; // don't forget to change slide id
  36  

  48  
  49: let previous3 = getFromSlide(id3, "ggb1", false) || false; // don't forget to change slide id
  50  

  62  
  63: // let previous1 = getFromSlide("slide-bcd29a068199", "ggb1");
  64  ggb1.instance.setValue("g1Addend", previous1.innerData["addend1"]);
  65  ggb1.instance.setValue("g1Sum", previous1.innerData["addendSum"]);
  66: // let previous2 = getFromSlide("slide-684a38e253ee", "ggb1");
  67  ggb1.instance.setValue("g2Addend", previous2.innerData["addend1"]);
  68  ggb1.instance.setValue("g2Sum", previous2.innerData["addendSum"]);
  69: // let previous3 = getFromSlide("slide-a790d5267a64", "ggb1");
  70  ggb1.instance.setValue("g3Addend", previous3.innerData["addend1"]);

DIDwhiteboard • G7/M2/TA L02 - Adding Integers/slide9.js:
  20  
  21: let previous0 = getFromSlide(id0, "ggb1", false) || false; // don't forget to change slide id
  22  

  34  
  35: let previous1 = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  36  

  48  
  49: let previous2 = getFromSlide(id2, "ggb1", false) || false; // don't forget to change slide id
  50  

  62  
  63: let previous3 = getFromSlide(id3, "ggb1", false) || false; // don't forget to change slide id
  64  

  76  
  77: // let previous0 = getFromSlide("slide-1bbbce9dd14d", "ggb1");
  78  ggb1.instance.setValue("g0Addend", previous0.innerData["addend1"]);
  79  ggb1.instance.setValue("g0Sum", previous0.innerData["addendSum"]);
  80: // let previous1 = getFromSlide("slide-bcd29a068199", "ggb1");
  81  ggb1.instance.setValue("g1Addend", previous1.innerData["addend1"]);
  82  ggb1.instance.setValue("g1Sum", previous1.innerData["addendSum"]);
  83: // let previous2 = getFromSlide("slide-684a38e253ee", "ggb1");
  84  ggb1.instance.setValue("g2Addend", previous2.innerData["addend1"]);
  85  ggb1.instance.setValue("g2Sum", previous2.innerData["addendSum"]);
  86: // let previous3 = getFromSlide("slide-a790d5267a64", "ggb1");
  87  ggb1.instance.setValue("g3Addend", previous3.innerData["addend1"]);

DIDwhiteboard • G7/M2/TA L02 - Adding Integers/slide10.js:
  20  
  21: let previous0 = getFromSlide(id0, "ggb1", false) || false; // don't forget to change slide id
  22  

  34  
  35: let previous1 = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  36  

  48  
  49: let previous2 = getFromSlide(id2, "ggb1", false) || false; // don't forget to change slide id
  50  

  62  
  63: let previous3 = getFromSlide(id3, "ggb1", false) || false; // don't forget to change slide id
  64  

  76  
  77: // let previous0 = getFromSlide("slide-1bbbce9dd14d", "ggb1");
  78  ggb1.instance.setValue("g0Addend", previous0.innerData["addend1"]);
  79  ggb1.instance.setValue("g0Sum", previous0.innerData["addendSum"]);
  80: // let previous1 = getFromSlide("slide-bcd29a068199", "ggb1");
  81  ggb1.instance.setValue("g1Addend", previous1.innerData["addend1"]);
  82  ggb1.instance.setValue("g1Sum", previous1.innerData["addendSum"]);
  83: // let previous2 = getFromSlide("slide-684a38e253ee", "ggb1");
  84  ggb1.instance.setValue("g2Addend", previous2.innerData["addend1"]);
  85  ggb1.instance.setValue("g2Sum", previous2.innerData["addendSum"]);
  86: // let previous3 = getFromSlide("slide-a790d5267a64", "ggb1");
  87  ggb1.instance.setValue("g3Addend", previous3.innerData["addend1"]);

DIDwhiteboard • G7/M2/TA L02 - Adding Integers/slide15.js:
  20  
  21: let previous0 = getFromSlide(id0, "ggb1", false) || false; // don't forget to change slide id
  22  

  34  
  35: let previous1 = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  36  

  48  
  49: let previous2 = getFromSlide(id2, "ggb1", false) || false; // don't forget to change slide id
  50  

  62  
  63: let previous3 = getFromSlide(id3, "ggb1", false) || false; // don't forget to change slide id
  64  

  76  
  77: // let previous0 = getFromSlide("slide-2fd9ca3788bc", "ggb1");
  78  ggb1.instance.setValue("g0Addend", previous0.innerData["addend1"]);
  79  ggb1.instance.setValue("g0Sum", previous0.innerData["addendSum"]);
  80: // let previous1 = getFromSlide("slide-ea8318913a1d", "ggb1");
  81  ggb1.instance.setValue("g1Addend", previous1.innerData["addend1"]);
  82  ggb1.instance.setValue("g1Sum", previous1.innerData["addendSum"]);
  83: // let previous2 = getFromSlide("slide-9d6e370291a2", "ggb1");
  84  ggb1.instance.setValue("g2Addend", previous2.innerData["addend1"]);
  85  ggb1.instance.setValue("g2Sum", previous2.innerData["addendSum"]);
  86: // let previous3 = getFromSlide("slide-927aa9aa0e8a", "ggb1");
  87  ggb1.instance.setValue("g3Addend", previous3.innerData["addend1"]);

DIDwhiteboard • G7/M2/TA L02 - Adding Integers/slide16.js:
  20  
  21: let previous0 = getFromSlide(id0, "ggb1", false) || false; // don't forget to change slide id
  22  

  34  
  35: let previous1 = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  36  

  48  
  49: let previous2 = getFromSlide(id2, "ggb1", false) || false; // don't forget to change slide id
  50  

  62  
  63: let previous3 = getFromSlide(id3, "ggb1", false) || false; // don't forget to change slide id
  64  

  76  
  77: // let previous0 = getFromSlide("slide-2fd9ca3788bc", "ggb1");
  78  ggb1.instance.setValue("g0Addend", previous0.innerData["addend1"]);
  79  ggb1.instance.setValue("g0Sum", previous0.innerData["addendSum"]);
  80: // let previous1 = getFromSlide("slide-ea8318913a1d", "ggb1");
  81  ggb1.instance.setValue("g1Addend", previous1.innerData["addend1"]);
  82  ggb1.instance.setValue("g1Sum", previous1.innerData["addendSum"]);
  83: // let previous2 = getFromSlide("slide-9d6e370291a2", "ggb1");
  84  ggb1.instance.setValue("g2Addend", previous2.innerData["addend1"]);
  85  ggb1.instance.setValue("g2Sum", previous2.innerData["addendSum"]);
  86: // let previous3 = getFromSlide("slide-927aa9aa0e8a", "ggb1");
  87  ggb1.instance.setValue("g3Addend", previous3.innerData["addend1"]);

DIDwhiteboard • G7/M2/TA L02 - Adding Integers/slide22.js:
  19  
  20: let previous2 = getFromSlide(id2, "ggb1", false) || false; // don't forget to change slide id
  21  

  33  
  34: let previous3 = getFromSlide(id3, "ggb1", false) || false; // don't forget to change slide id
  35  

  47  
  48: // let previous2 = getFromSlide("slide-4ac183d82668", "ggb1");
  49  ggb1.instance.setValue("g2Addend", previous2.innerData["addend1"]);
  50  ggb1.instance.setValue("g2Sum", previous2.innerData["addendSum"]);
  51: // let previous3 = getFromSlide("slide-59c6c2158d6f", "ggb1");
  52  ggb1.instance.setValue("g3Addend", previous3.innerData["addend1"]);

DIDwhiteboard • G7/M2/TC L13 - Understanding Multiples of Negative Numbers/slide7.js:
   4  
   5: //const string64 = getFromSlide('slide-6bd82125410e','ggb1.innerData.applet');
   6  //ggb1.instance.setBase64(string64);

  20  const sketches =
  21:   getFromSlide("slide-6bd82125410e", "ggb1.innerData.doodles", []) || [];
  22  

DIDwhiteboard • G7/M2/TC L13 - Understanding Multiples of Negative Numbers/slide8.js:
  22  let studentInput =
  23:   getFromSlide(id1, "cc_submit_153010d8cb1a_input1.data.text", "") || "";
  24  

  50  const sketches =
  51:   getFromSlide("slide-6bd82125410e", "ggb1.innerData.doodles", []) || [];
  52  

DIDwhiteboard • G7/M2/TC L13 - Understanding Multiples of Negative Numbers/slide15.js:
   4  
   5: //const string64 = getFromSlide('slide-6bd82125410e','ggb1.innerData.applet');
   6  //ggb1.instance.setBase64(string64);

  20  const sketches =
  21:   getFromSlide("slide-10476c759aed", "ggb1.innerData.doodles", []) || [];
  22  // console.log(sketches);

DIDwhiteboard • G7/M2/TC L13 - Understanding Multiples of Negative Numbers/slide16.js:
  22  let studentInput =
  23:   getFromSlide(id1, "cc_submit_90db8dd1d5ec_input1.data.text", "") || "";
  24  

  50  const sketches =
  51:   getFromSlide("slide-10476c759aed", "ggb1.data.doodles", []) || [];
  52  

DIDwhiteboard • G7/M2/TD L17 - Understanding Negative Dividends/slide13.js:
  36    // get previous data
  37:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  38    // fill in other useful data

DIDwhiteboard • G7/M3/TA L02 - The Distributive Property and the Tabular Model/slide3.js:
  27  let num1 =
  28:   getFromSlide(id1, "cc_sharewithclass_f763ad53b1a8_input1.data.text", "") ||
  29    "";

DIDwhiteboard • G7/M3/TA L02 - The Distributive Property and the Tabular Model/slide9.js:
  34  
  35: let data2 = getFromSlide(id2, "ggb1", false) || false; // don't forget to change slide id
  36  

  48  
  49: // let data2 = getFromSlide(`slide-e294b19da756`, "ggb1");
  50  

DIDwhiteboard • G7/M3/TA L02 - The Distributive Property and the Tabular Model/slide12.js:
  45  
  46: let data = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  47  

  59  
  60: // let data = getFromSlide(`slide-4f8940ede44c`, "ggb1");
  61  

DIDwhiteboard • G7/M3/TA L02 - The Distributive Property and the Tabular Model/slide14.js:
  45  
  46: let data = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  47  

  59  
  60: // let data = getFromSlide(`slide-4a82a8a90ddd`, "ggb1");
  61  if (data.innerData) {

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide4.js:
  30  
  31: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  32  

  44  
  45: // let data = getFromSlide(`slide-1feda3178d3b`, "ggb1");
  46  ggb1.instance.evalCommand(`D=(${data.innerData['D']})`);

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide5.js:
  49  
  50: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  51  

  63  
  64: let data2 = getFromSlide(id1, 'ggb2', false) || false; // don't forget to change slide id
  65  

  77  
  78: // let data = getFromSlide(`slide-b9588ab4a28f`, "ggb1");
  79: // let data2 = getFromSlide(`slide-b9588ab4a28f`, "ggb2");
  80: let num = getFromSlide(`slide-b9588ab4a28f`, `input2.data.text`, '') || '';
  81  

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide6.js:
  37  
  38: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  39  

  51  
  52: let data2 = getFromSlide(id1, 'ggb2', false) || false; // don't forget to change slide id
  53  

  65  
  66: // let data = getFromSlide(`slide-b9588ab4a28f`, "ggb1");
  67: // let data2 = getFromSlide(`slide-b9588ab4a28f`, "ggb2");
  68: let num = getFromSlide(`slide-b9588ab4a28f`, `input2.data.text`, '') || '';
  69  

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide7.js:
   64  
   65: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
   66  

   78  
   79: let data2 = getFromSlide(id1, 'ggb2', false) || false; // don't forget to change slide id
   80  

   92  
   93: // let data = getFromSlide(`slide-b9588ab4a28f`, "ggb1");
   94: // let data2 = getFromSlide(`slide-b9588ab4a28f`, "ggb2");
   95: let num = getFromSlide(`slide-b9588ab4a28f`, `input2.data.text`, '') || '';
   96  

  101  let num3 =
  102:   getFromSlide(id3, `cc_submit_0272cc25d721_input1.data.text`, '') || '';
  103  

  105  let num2 =
  106:   getFromSlide(id2, `cc_sharewithclass_9715150952c6_input1.data.text`, '') ||
  107    '';

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide8.js:
  52  
  53: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  54  

  66  
  67: let data2 = getFromSlide(id1, 'ggb2', false) || false; // don't forget to change slide id
  68  

  80  
  81: // let data = getFromSlide(`slide-b9588ab4a28f`, "ggb1");
  82: // let data2 = getFromSlide(`slide-b9588ab4a28f`, "ggb2");
  83: let num = getFromSlide(`slide-b9588ab4a28f`, `input2.data.text`, '') || '';
  84  

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide9.js:
  57  
  58: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  59  

  71  
  72: let data2 = getFromSlide(id2, 'ggb2', false) || false; // don't forget to change slide id
  73  

  85  
  86: // let data = getFromSlide(`slide-1feda3178d3b`, "ggb1");
  87: // let data2 = getFromSlide(`slide-b9588ab4a28f`, "ggb2");
  88: let num = getFromSlide(`slide-b9588ab4a28f`, `input2.data.text`, '') || '';
  89  

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide11.js:
  47  
  48: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  49  

  61  
  62: // let data = getFromSlide(`slide-680c745181bc`, "ggb1");
  63  ggb1.instance.evalCommand(`D=(${data.innerData['D']})`);

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide12.js:
  49  
  50: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  51  

  63  
  64: let data2 = getFromSlide(id1, 'ggb2', false) || false; // don't forget to change slide id
  65  

  77  
  78: // let data = getFromSlide(`slide-4335e9b50ee3`, "ggb1");
  79: // let data2 = getFromSlide(`slide-4335e9b50ee3`, "ggb2");
  80: let num = getFromSlide(`slide-4335e9b50ee3`, `input2.data.text`, '') || '';
  81  

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide13.js:
  28  
  29: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  30  

  42  
  43: let data2 = getFromSlide(id1, 'ggb2', false) || false; // don't forget to change slide id
  44  

  56  
  57: // let data = getFromSlide(`slide-4335e9b50ee3`, "ggb1");
  58: // let data2 = getFromSlide(`slide-4335e9b50ee3`, "ggb2");
  59: let num = getFromSlide(`slide-4335e9b50ee3`, `input2.data.text`, '') || '';
  60  

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide14.js:
   42  let num3 =
   43:   getFromSlide(id3, `cc_submit_40b5d45d3a84_input1.data.text`, '') || '';
   44  

   46  let num2 =
   47:   getFromSlide(id2, `cc_sharewithclass_32849cc9988a_input1.data.text`, '') ||
   48    '';

   50  const id1 = `slide-4335e9b50ee3`;
   51: let num = getFromSlide(id1, `input2.data.text`, '') || '';
   52  

   94  
   95: let data = getFromSlide(id4, 'ggb1', false) || false; // don't forget to change slide id
   96  

  108  
  109: let data2 = getFromSlide(id4, 'ggb2', false) || false; // don't forget to change slide id
  110  

  122  
  123: // let data = getFromSlide(`slide-4335e9b50ee3`, "ggb1");
  124: // let data2 = getFromSlide(`slide-4335e9b50ee3`, "ggb2");
  125  

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide15.js:
  51  
  52: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  53  

  65  
  66: let data2 = getFromSlide(id1, 'ggb2', false) || false; // don't forget to change slide id
  67  

  79  
  80: // let data = getFromSlide(`slide-4335e9b50ee3`, "ggb1");
  81: // let data2 = getFromSlide(`slide-4335e9b50ee3`, "ggb2");
  82: let num = getFromSlide(`slide-4335e9b50ee3`, `input2.data.text`, '') || '';
  83  

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide16.js:
  47  
  48: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
  49  

  61  
  62: let data2 = getFromSlide(id2, 'ggb2', false) || false; // don't forget to change slide id
  63  

  75  
  76: // let data = getFromSlide(`slide-680c745181bc`, "ggb1");
  77: // let data2 = getFromSlide(`slide-4335e9b50ee3`, "ggb2");
  78: let num = getFromSlide(`slide-4335e9b50ee3`, `input2.data.text`, '') || '';
  79  

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide19.js:
  57  
  58: let data2 = getFromSlide(id2, 'ggb2', false) || false; // don't forget to change slide id
  59  

  71  
  72: let num = getFromSlide(`slide-4d24fd7feef4`, `input2.data.text`, '') || '';
  73  ggb2.instance.setTextValue('TextNumber', num);

  75  
  76: // let data2 = getFromSlide(`slide-4d24fd7feef4`, "ggb2");
  77  

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide20.js:
  44  
  45: let data2 = getFromSlide(id2, 'ggb2', false) || false; // don't forget to change slide id
  46  

  58  
  59: // let data2 = getFromSlide(`slide-4d24fd7feef4`, "ggb2");
  60: let num = getFromSlide(`slide-4d24fd7feef4`, `input2.data.text`, '') || '';
  61  ggb2.instance.setTextValue('TextNumber', num);

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide21.js:
   39  }
   40: let num = getFromSlide(`slide-4d24fd7feef4`, `input2.data.text`, '') || '';
   41  ggb2.instance.setTextValue('TextNumber', num);

   45  let num3 =
   46:   getFromSlide(id3, `cc_submit_a41fb16893de_input1.data.text`, '') || '';
   47  

   49  let num2 =
   50:   getFromSlide(id2, `cc_sharewithclass_de967d4f028c_input1.data.text`, '') ||
   51    '';

   99  
  100: let data2 = getFromSlide(id4, 'ggb2', false) || false; // don't forget to change slide id
  101  

  113  
  114: // let data2 = getFromSlide(`slide-4d24fd7feef4`, "ggb2");
  115  ggb2.instance.setCoords(

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide22.js:
  59  
  60: let data2 = getFromSlide(id2, 'ggb2', false) || false; // don't forget to change slide id
  61  

  73  
  74: // let data2 = getFromSlide(`slide-4d24fd7feef4`, "ggb2");
  75: let num = getFromSlide(`slide-4d24fd7feef4`, `input2.data.text`, '') || '';
  76  ggb2.instance.setTextValue('TextNumber', num);

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide23.js:
  54  
  55: let data2 = getFromSlide(id2, 'ggb2', false) || false; // don't forget to change slide id
  56  

  68  
  69: // let data2 = getFromSlide(`slide-4d24fd7feef4`, "ggb2");
  70: let num = getFromSlide(`slide-4d24fd7feef4`, `input2.data.text`, '') || '';
  71  ggb2.instance.setTextValue('TextNumber', num);

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide27.js:
  40  let num =
  41:   getFromSlide(id1, `cc_submit_6dec7d7b823f_input1.data.text`, '') || '';
  42  

  44  let num2 =
  45:   getFromSlide(id2, `cc_sharewithclass_c78bcc179dc6_input1.data.text`, '') ||
  46    '';

DIDwhiteboard • G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide2.js:
  13  
  14: let data = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  15  

  27  
  28: // let data = getFromSlide("slide-a60c06cd5664", "ggb1");
  29  let balloonNumFromOne = data.innerData["balloonNum"];

DIDwhiteboard • G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide3 PA.js:
  31   *
  32:  * * use getPrevGGB instead of getFromSlide
  33   *

  87  	// get previous data
  88: 	let prevGGB = getFromSlide(slideID, compName, false) || false;
  89  	// check previous data

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide2.js:
   9  const prevXML =
  10:   getFromSlide("slide-167a6a43345a", "ggb1.data.saveXML", "") || "";
  11  

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide5.js:
   9  const prevXML =
  10:   getFromSlide("slide-288dcabe5390", "ggb1.data.saveXML", "") || "";
  11  

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide8.js:
   9  const prevXML =
  10:   getFromSlide("slide-df3f39a85ce0", "ggb1.data.saveXML", "") || "";
  11  

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide12.js:
   9  const prevPoints1 =
  10:   getFromSlide("slide-45d08cfa98f8", "ggb1.data.storedPoints", []) || [];
  11  const prevPoints2 =
  12:   getFromSlide("slide-179f3f38deed", "ggb1.data.storedPoints", []) || [];
  13  

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide15.js:
   9  const prevXML =
  10:   getFromSlide("slide-995090d0f5d9", "ggb1.data.saveXML", "") || "";
  11  

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide17.js:
   9  const prevXML =
  10:   getFromSlide("slide-288dcabe5390", "ggb1.data.saveXML", "") || "";
  11  

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide19.js:
   9  const prevXML =
  10:   getFromSlide("slide-4652713265ff", "ggb1.data.saveXML", "") || "";
  11  

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide22.js:
   9  const prevXML =
  10:   getFromSlide("slide-8f4a57d83ec8", "ggb1.data.saveXML", "") || "";
  11  

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide25.js:
   9  const prevXML =
  10:   getFromSlide("slide-09890bbbf7a4", "ggb1.data.saveXML", "") || "";
  11  

DIDwhiteboard • G7/M4/TC L15 - Watering a Lawn/slide3.js:
  16      const prev64 =
  17:       getFromSlide("slide-ffd45cce7710", "ggb1.data.string64", "") || "";
  18      if (prev64) {

DIDwhiteboard • G7/M4/TC L15 - Watering a Lawn/slide4.js:
  11  const prev64 =
  12:   getFromSlide("slide-6a81ce63043d", "ggb1.data.string64", "") || "";
  13  

DIDwhiteboard • G7/M4/TC L15 - Watering a Lawn/slide8.js:
  26      const prev64 =
  27:       getFromSlide("slide-f2b558361cf3", "ggb1.data.string64", "") || "";
  28      if (prev64) {

DIDwhiteboard • G7/M4/TC L15 - Watering a Lawn/slide9.js:
  14  const prev64 =
  15:   getFromSlide("slide-a16832d7fa23", "ggb1.data.string64", "") || "";
  16  

DIDwhiteboard • G7/M4/TC L15 - Watering a Lawn/slide10.js:
  14  const prev64 =
  15:   getFromSlide("slide-a16832d7fa23", "ggb1.data.string64", "") || "";
  16  

DIDwhiteboard • G7/M4/TE L23 - Cross Section Scavenger Hunt/OLD-slide4.js:
  12  // onInit();
  13: let prevPerspective = getFromSlide('slide-9b47ecb2225b', 'ggb1.data.storedPerspective', '') || '';
  14  

DIDwhiteboard • G7/M4/TE L23 - Cross Section Scavenger Hunt/OLD-slide6.js:
  14  let prevPerspective =
  15:   getFromSlide("slide-f5bc48acbbfc", "ggb1.data.storedPerspective", "") || "";
  16  

DIDwhiteboard • G7/M4/TE L23 - Cross Section Scavenger Hunt/slide4.js:
  13  // onInit();
  14: let prevPerspective = getFromSlide('slide-9b47ecb2225b', 'ggb1.data.storedPerspective', '') || '';
  15  

DIDwhiteboard • G7/M4/TE L23 - Cross Section Scavenger Hunt/slide6.js:
  14  
  15: let prevPerspective = getFromSlide('slide-f5bc48acbbfc', 'ggb1.data.storedPerspective', '') || '';
  16  

DIDwhiteboard • G7/M5/TD L19 - Applying Percent Error/slide5.js:
  24  let oldTable =
  25:   getFromSlide("slide-487250b13950", "table1", defPrevTable1) || defPrevTable1;
  26  
  27: // const oldTable = getFromSlide("slide-487250b13950", `table1`);
  28  

DIDwhiteboard • G7/M5/TD L19 - Applying Percent Error/slide9.js:
  14  const id1 = `slide-a61b2c9bc11b`;
  15: let num = getFromSlide(id1, `input1.data.text`, "") || "";
  16  let num1 = Math.abs(num - 1807);

DIDwhiteboard • G7/M5/TD L19 - Applying Percent Error/slide10.js:
  24  let oldTable =
  25:   getFromSlide("slide-7c89821a6721", "table1", defPrevTable1) || defPrevTable1;
  26  
  27: // const oldTable = getFromSlide("slide-7c89821a6721", `table1`);
  28  

DIDwhiteboard • G7/M5/TD L19 - Applying Percent Error/slide20.js:
   9  
  10: /*let student=getFromSlide(`slide-d8eeaea00b6a`,`radio1.data.selected`);
  11  

DIDwhiteboard • G7/M5/TE L22 - Making Mixtures/slide14.js:
  5  const prevData =
  6:   getFromSlide("slide-6f794219a5b6", "ggb1.innerData", false) || false;
  7  let prevPaint;

DIDwhiteboard • G7/M5/TE L22 - Making Mixtures/slide15.js:
  5  const prevData =
  6:   getFromSlide("slide-45f3b2b79a62", "ggb1.innerData", false) || false;
  7  let prevPaint;

DIDwhiteboard • G7/M5/TE L22 - Making Mixtures/slide19.js:
  13      let prev64 =
  14:       getFromSlide("slide-a24ce00727a4", "ggb1.data.save64", "") || "";
  15      if (prev64) {

DIDwhiteboard • G7/M6/TA L03 - Outcomes of Chance Experiments/Slide 7.js:
  4  
  5: let grab = getFromSlide("slide-76c60e09ea26", "ggb1.data.image", "") || "";
  6  if (grab) {

DIDwhiteboard • G7/M6/TA L03 - Outcomes of Chance Experiments/Slide 11.js:
  26  
  27: let oldTable = getFromSlide(id1, "table1", defPrevTable1) || defPrevTable1;
  28  
  29: // const oldTable = getFromSlide(`slide-2cfe81abfc55`, "table1");
  30  

DIDwhiteboard • G7/M6/TA L03 - Outcomes of Chance Experiments/Slide 12.js:
  26  
  27: let oldTable = getFromSlide(id1, "table1", defPrevTable1) || defPrevTable1;
  28  
  29: // const oldTable = getFromSlide(`slide-2cfe81abfc55`, "table1");
  30  

DIDwhiteboard • G7/M6/TA L03 - Outcomes of Chance Experiments/Slide 13.js:
  26  
  27: let oldTable = getFromSlide(id1, "table1", defPrevTable1) || defPrevTable1;
  28  
  29: // const oldTable = getFromSlide(`slide-2cfe81abfc55`, "table1");
  30  

DIDwhiteboard • G7/M6/TA L03 - Outcomes of Chance Experiments/Slide 14.js:
  25  
  26: let oldTable = getFromSlide(id1, "table1", defPrevTable1) || defPrevTable1;
  27  
  28: // const oldTable = getFromSlide(`slide-2cfe81abfc55`, "table1");
  29  

DIDwhiteboard • G7/M6/TA L03 - Outcomes of Chance Experiments/Slide 15.js:
  28  
  29: let oldTable = getFromSlide(id1, "table2", defPrevTable1) || defPrevTable1;
  30  
  31: // const oldTable = getFromSlide(`slide-b8eeffc472d4`, "table2");
  32  

DIDwhiteboard • G7/M6/TB L08 - Picking Blue/Slide 4.js:
  27  
  28: let data = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  29  

  41  
  42: // let data = getFromSlide(`slide-c6fdb0296a2d`, "ggb1", defGGB) || defGGB;
  43  

DIDwhiteboard • G7/M6/TB L08 - Picking Blue/Slide 6.js:
  27  
  28: let data = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  29  

  41  
  42: let grab = getFromSlide("slide-f0901f228473", "ggb2.data.image", "" || "");
  43  if (grab) {

  47  
  48: // let data = getFromSlide(id1, "ggb1", defGGB) || defGGB;
  49  let num = -1;

DIDwhiteboard • G7/M6/TB L08 - Picking Blue/Slide 8.js:
  25  
  26: let data = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  27  

  39  
  40: let grab = getFromSlide(id1, "ggb2.data.image", "") || "";
  41  

  46  
  47: // let data = getFromSlide(id1, "ggb1");
  48  let num = -1;

DIDwhiteboard • G7/M6/TB L08 - Picking Blue/Slide 10.js:
  106  
  107: let choiceData = getFromSlide(id1, "select1", defPrevSelect1) || defPrevSelect1;
  108  let choiceNum = choiceData.data.selected;

DIDwhiteboard • G7/M6/TB L08 - Picking Blue/Slide 14.js:
   78  
   79: let data = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
   80  

   92  
   93: // let data = getFromSlide(id1, "ggb1");
   94  

  151  let numSlide =
  152:   getFromSlide(id1, `cc_sharewithclass_08883e0adaa2_input1.data.text`, "") ||
  153    "";

DIDwhiteboard • G7/M6/TD L19 - Memory Games/Slide 8.js:
  36  
  37: let oldTable = getFromSlide(id1, "table1", defPrevTable1) || defPrevTable1; // don't forget to change slide id
  38  
  39: // const oldTable = getFromSlide("slide-ae9ff75b3098", "table1");
  40  

DIDwhiteboard • G7/M6/TD L19 - Memory Games/Slide 9.js:
  33  
  34: let oldTable = getFromSlide(id1, "table2", defPrevTable1) || defPrevTable1; // don't forget to change slide id
  35  
  36: // const oldTable = getFromSlide(id1, "table2");
  37  

DIDwhiteboard • G7/M6/TD L19 - Memory Games/Slide 14.js:
  33  
  34: let oldTable = getFromSlide(id1, "table2", defPrevTable1) || defPrevTable1; // don't forget to change slide id
  35  
  36: // const oldTable = getFromSlide(id1, "table2");
  37  

DIDwhiteboard • G8/M1/TB L06 - More Properties of Exponents/slide10.js:
  25  
  26: let prevEnd = getFromSlide(ID2, 'ggb1.innerData.end', false) || false;
  27  

  32  let num1 =
  33:   getFromSlide(ID1, 'cc_sharewithclass_fda0a467ce03_input1.data.text', false) ||
  34    false;

DIDwhiteboard • G8/M1/TB L06 - More Properties of Exponents/slide16.js:
  23  let num1 =
  24:   getFromSlide(ID1, 'cc_sharewithclass_36ecab6799b8_input1.data.text', false) ||
  25    false;

DIDwhiteboard • G8/M1/TC L13 - Applications with Numbers in Scientific Notation/slide2.js:
  51  
  52: let prevGuess = getFromSlide(ID1, "button1.data.selection", false) || false;
  53  

DIDwhiteboard • G8/M1/TC L13 - Applications with Numbers in Scientific Notation/slide6.js:
  15  
  16: let breaths = getFromSlide(ID1, "input1.data.text", false) || false;
  17  

DIDwhiteboard • G8/M1/TC L13 - Applications with Numbers in Scientific Notation/slide8.js:
  27  
  28: let breaths = getFromSlide(ID1, "input1.data.text", false) || false;
  29  

  39  
  40: const prevGGB = getFromSlide(ID1, "ggb1", false) || false;
  41  if (prevGGB.innerData && prevGGB.innerData["balloonInput"]) {

DIDwhiteboard • G8/M1/TC L13 - Applications with Numbers in Scientific Notation/slide9.js:
  24  
  25: let breathVol = getFromSlide(ID1, 'input1.data.text', false) || false;
  26  

DIDwhiteboard • G8/M1/TC L13 - Applications with Numbers in Scientific Notation/slide13.js:
  19  
  20: let moonStack = getFromSlide(ID1, "input1.data.text", false) || false;
  21  

DIDwhiteboard • G8/M1/TD L18 - The Pythagorean Theorem/slide10.js:
  2  
  3: let data = getFromSlide('slide-c3780ec607dc', 'ggb1', false) || false;
  4  

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide3.js:
  18    const prevGGB =
  19:     getFromSlide("slide-cfc84df559e9", "ggb1.innerData", false) || false;
  20    if (!prevGGB) {

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide5.js:
  20  const prevText =
  21:   getFromSlide(
  22      id,

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide8.js:
  20  const prevText =
  21:   getFromSlide(
  22      id,

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide12.js:
  20  const prevText =
  21:   getFromSlide(
  22      id,

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide15.js:
  29  const id = "slide-e86dfdf5fbdc";
  30: const prevInner = getFromSlide(id, "ggb1.innerData", false) || false;
  31  let range;

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide17.js:
  19  const id = "slide-22f290967089";
  20: const prevFIB = getFromSlide(id, "fib2.data.values", false) || false;
  21  //`\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(id)}\]}`;

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide18.js:
  17  const prevGuess =
  18:   getFromSlide(id1, "cc_sharewithclass_9d4f7fa9c547_input1.data.text", false) ||
  19    false;

  23  
  24: const prevTable = getFromSlide(id2, "table1.data.rows", false) || false;
  25  const approx =

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide3.js:
  39  
  40: let data = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  41  

  53  
  54: // let data = getFromSlide(id1, "ggb1");
  55  

  62  let studentInput =
  63:   getFromSlide(id1, "cc_sharewithclass_56104d8f91e1_input1.data.text", "") ||
  64    "";

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide9.js:
   37  
   38: let prevData = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
   39  

   51  
   52: // let data = getFromSlide(id1, "ggb1");
   53  

  127      }
  128:     // data = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  129      ggb1.instance.evalCommand(

DIDwhiteboard • G8/M2/TB L08 - Sequencing The Rigid Motions/slide6.js:
  14  const id = "slide-670f0fe6e48a";
  15: const priortable = getFromSlide(id, "table1.data.rows", false) || false;
  16  if (!priortable || !priortable.length) {

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide6.js:
  12  
  13: let data = getFromSlide(`slide-bdd08664bfab`, "ggb1", false) || false;
  14  

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide9.js:
  17  let num =
  18:   getFromSlide(id1, `cc_submit_f0f5cb851922_input1.data.text`, false) || false;
  19  

  36  let num2 =
  37:   getFromSlide(id2, `cc_sharewithclass_567bdeaf2e3b_input1.data.text`, false) ||
  38    false;

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide5.js:
  17  
  18: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  19  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide6.js:
  18  ggb1.instance.setValue("timeRot", 1);
  19: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  20  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide7.js:
  25  ggb1.instance.setValue("timeGrowthA", 1);
  26: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  27  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide8.js:
  26  ggb1.instance.setValue("timeGrowthB", 1);
  27: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  28  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide9.js:
  25  ggb1.instance.setValue("timeGrowthC", 1);
  26: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  27  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide10.js:
  29  ggb1.instance.setValue("timeGrowthC", 1);
  30: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  31  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide11.js:
  21  ggb1.instance.setValue("timeGrowthC", 0);
  22: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  23  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide12.js:
  43  
  44: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  45  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide13.js:
  39  ggb1.instance.setValue("step", 10);
  40: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  41  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide14.js:
  29  
  30: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  31  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide15.js:
  39  
  40: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  41  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide16.js:
  19  
  20: let data = getFromSlide("slide-77f8d1fdbe6c", "ggb2", false) || false;
  21  if (data.innerData) {

  27  const reason1 =
  28:   getFromSlide(id1, "cc_sharewithclass_6347c64e3bee_input1.data.text", "") ||
  29    `$\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(id1)}\]}$`;

  32  const reason2 =
  33:   getFromSlide(id2, "cc_sharewithclass_67182260e199_input1.data.text", "") ||
  34    `$\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(id2)}\]}$`;

  37  const reason3 =
  38:   getFromSlide(id3, "cc_sharewithclass_67182260e199_input1.data.text", "") ||
  39    `$\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(id3)}\]}$`;

  42  const reason4 =
  43:   getFromSlide(id4, "cc_sharewithclass_67182260e199_input1.data.text", "") ||
  44    `$\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(id4)}\]}$`;

  47  const reason5 =
  48:   getFromSlide(id5, "cc_sharewithclass_67182260e199_input1.data.text", "") ||
  49    `$\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(id5)}\]}$`;

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide18.js:
  16  
  17: let data = getFromSlide("slide-7793d711ccda", "ggb2", false || false);
  18  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide19.js:
  23  
  24: let data = getFromSlide("slide-7793d711ccda", "ggb2", false || false);
  25  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide20.js:
  17  button1.updateData({ disabled: false });
  18: let data = getFromSlide("slide-7793d711ccda", "ggb2", false || false);
  19  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide21.js:
  16  
  17: let data = getFromSlide("slide-7793d711ccda", "ggb2", false || false);
  18  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide22.js:
  18  
  19: let data = getFromSlide("slide-7793d711ccda", "ggb2", false || false);
  20  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide23.js:
  21  
  22: let data = getFromSlide("slide-7793d711ccda", "ggb2", false || false);
  23  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide24.js:
  18  });
  19: // let data = getFromSlide('slide-7793d711ccda', 'ggb2');
  20: let data = getFromSlide("slide-7793d711ccda", "ggb2", false || false);
  21  let aVal, bVal;

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide25.js:
  17  
  18: let data = getFromSlide("slide-7793d711ccda", "ggb2", false || false);
  19  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide26.js:
  15  
  16: let data = getFromSlide("slide-7793d711ccda", "ggb2", false || false);
  17  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide27.js:
  23  
  24: let data = getFromSlide("slide-7793d711ccda", "ggb2", false || false);
  25  if (data.innerData) {

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide28.js:
  15  
  16: let data = getFromSlide("slide-7793d711ccda", "ggb2", false || false);
  17  if (data.innerData) {

  23  const reason1 =
  24:   getFromSlide(id1, "cc_sharewithclass_1ff8e22ed745_input1.data.text", "") ||
  25    `$\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(id1)}\]}$`;

  28  const reason2 =
  29:   getFromSlide(id2, "cc_sharewithclass_1ff8e22ed745_input1.data.text", "") ||
  30    `$\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(id2)}\]}$`;

  33  const reason3 =
  34:   getFromSlide(id3, "cc_submit_384b99447747_input1.data.text", "") ||
  35    `$\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(id3)}\]}$`;

  38  const reason4 =
  39:   getFromSlide(id4, "cc_sharewithclass_1ff8e22ed745_input1.data.text", "") ||
  40    `$\\text\\color{A0A0A0}{\[no input yet on slide ${getSlideNum(id4)}\]}$`;

DIDwhiteboard • G8/M2/TD L18 - Proving the Converse of the Pythagorean Theorem/slide2.js:
  21  
  22: let response1 = getFromSlide(id1, "radio1.data.selected", false) || false;
  23: let response2 = getFromSlide(id1, "radio2.data.selected", false) || false;
  24  

DIDwhiteboard • G8/M2/TD L18 - Proving the Converse of the Pythagorean Theorem/slide6.js:
  22  const id1 = `slide-2ede02c9c86d`;
  23: let response1 = getFromSlide(id1, "radio1.data.selected", false) || false;
  24: let response2 = getFromSlide(id1, "radio2.data.selected", false) || false;
  25  

  46  const id3 = `slide-2acd7a1d80d8`;
  47: let response3 = getFromSlide(id3, "select1.data.selected", [false]) || [false];
  48  response3 = response3[0];

  50  const id4 = `slide-b3731aa4ac53`;
  51: let response4 = getFromSlide(id4, "radio1.data.selected", false) || false;
  52  

  78  let response5 =
  79:   getFromSlide(id5, "cc_sharewithclass_e322b40afa63_input1.data.text", false) ||
  80    false;

DIDwhiteboard • G8/M2/TD L18 - Proving the Converse of the Pythagorean Theorem/slide15.js:
  37  let response1 =
  38:   getFromSlide(id, "cc_submit_d9ff9e8ef7af_input1.data.text", false) || false;
  39  let response2 =
  40:   getFromSlide(id, "cc_sharewithclass_86543d656bd1_input1.data.text", false) ||
  41    false;

DIDwhiteboard • G8/M3/TC L09 - Describing Dilations/slide6.js:
  6  const prevInner =
  7:   getFromSlide("slide-6e430bcff5e0", "ggb1.innerData", false) || false;
  8  if (prevInner) {

DIDwhiteboard • G8/M3/TC L09 - Describing Dilations/slide8.js:
  15  const prevInner =
  16:   getFromSlide('slide-381e6f477e1d', 'ggb1.innerData', false) || false;
  17  if (prevInner) {

DIDwhiteboard • G8/M3/TC L09 - Describing Dilations/slide10.js:
  15  let oldScale;
  16: const prevInner = getFromSlide(slideId, "ggb1.innerData", false) || false;
  17  if (prevInner) {

DIDwhiteboard • G8/M3/TC L09 - Describing Dilations/slide11.js:
  30  const tableFillers = ids.map((id) => {
  31:   const inner = getFromSlide(id, "ggb1.innerData", false) || false;
  32    let scale;

DIDwhiteboard • G8/M3/TD L17 - Similar Triangles on a Line/slide3.js:
  42  
  43: let data = getFromSlide(`slide-a54624cada0b`, `ggb1`, false) || false;
  44  if (data.innerData && data.innerData.A?.length) {

DIDwhiteboard • G8/M4/TB L11 - Planning a Trip/slide3.js:
  29  const id = "slide-7d36c15d0675";
  30: const prevImage = getFromSlide(id, "image1.data.src", "") || "";
  31: const prevText = getFromSlide(id, "text1.data.text", "") || "";
  32  

DIDwhiteboard • G8/M4/TB L11 - Planning a Trip/slide4.js:
  31  let prevData =
  32:   getFromSlide("slide-8921e01e1e57", "select1.data", false) || false;
  33  let prevChoice = "";

  50  const id = "slide-7d36c15d0675";
  51: let dest = getFromSlide(id, "ggb1.innerData.chosenText", false) || false;
  52  if (!dest) {

  59  
  60: let dist = getFromSlide(id, "text1.data.dist", false) || false;
  61  if (!dist) {

DIDwhiteboard • G8/M4/TB L11 - Planning a Trip/slide5.js:
  17  const id = "slide-e2c5650a1171";
  18: let prevText = getFromSlide(id, "text1.data", false) || false;
  19  

DIDwhiteboard • G8/M4/TB L11 - Planning a Trip/slide6.js:
  17  const id = "slide-e2c5650a1171";
  18: let prevText = getFromSlide(id, "text2.data", false) || false;
  19  

DIDwhiteboard • G8/M4/TB L11 - Planning a Trip/slide7.js:
  18  const id1 = "slide-11572d19b8c8";
  19: let driveAnswer = getFromSlide(id1, "input2.data.text", "") || "";
  20  
  21  const id2 = "slide-aefb5835fa1a";
  22: let flyAnswer = getFromSlide(id2, "input2.data.text", "") || "";
  23  
  24  const id3 = "slide-8921e01e1e57";
  25: let tripChoice = getFromSlide(id3, "select1.data.selected", false) || false;
  26: let tripOptions = getFromSlide(id3, "select1.data.options", false) || false;
  27  

DIDwhiteboard • G8/M4/TB L11 - Planning a Trip/slide8.js:
   42  const id1 = "slide-7d36c15d0675";
   43: let dest = getFromSlide(id1, "ggb1.innerData.chosenText", "") || "";
   44  if (!dest) {

   61  
   62: let dist = getFromSlide(id1, "text1.data.dist", "") || "";
   63  if (!dist) {

   74    let planeAssumptions =
   75:     getFromSlide("slide-e2c5650a1171", "ggb2.innerData", false) || false;
   76    if (!planeAssumptions || !planeAssumptions["preBoard"]) {

   82    let carMPH =
   83:     getFromSlide("slide-e2c5650a1171", "ggb1.innerData.driveSpeed", false) ||
   84      false;

  105  const id2 = "slide-11572d19b8c8";
  106: let driveAnswer = getFromSlide(id2, "input2.data.text", "") || "";
  107  if (!driveAnswer) {

  113  const id3 = "slide-aefb5835fa1a";
  114: let flyAnswer = getFromSlide(id3, "input2.data.text", "") || "";
  115  if (!flyAnswer) {

DIDwhiteboard • G8/M4/TB L11 - Planning a Trip/slide10.js:
  30  let exp1 =
  31:   getFromSlide(id, "cc_submit_d432261553a7_input1.data.text", "") || "";
  32  let exp2 =
  33:   getFromSlide(id, "cc_submit_057b2dc1b016_input1.data.text", "") || "";
  34  

DIDwhiteboard • G8/M4/TB L11 - Planning a Trip/slide11.js:
  28  const id = "slide-c872d475010b";
  29: let num1 = getFromSlide(id, "input2.data.text", "") || "";
  30  

DIDwhiteboard • G8/M4/TB L11 - Planning a Trip/slide13.js:
  14  const id = "slide-b58c00990740";
  15: let detail = getFromSlide(id, "text2.data.text", "") || "";
  16  

DIDwhiteboard • G8/M4/TC L12 - Solutions to Linear Equations in Two Variables/Slide 7.js:
  15  let prevPoints =
  16:   getFromSlide('slide-f52d3361f76f', 'ggb1.data.names', false) || false;
  17  

DIDwhiteboard • G8/M5/TA L02 - Introduction to Systems of Linear Equations/slide4.js:
  17  const id = `slide-d7b277b63b6a`;
  18: let num = getFromSlide(id, `input1.data.text`, false) || false;
  19: let num2 = getFromSlide(id, `input2.data.text`, false) || false;
  20  

DIDwhiteboard • G8/M5/TA L02 - Introduction to Systems of Linear Equations/slide7.js:
  20  let equa =
  21:   getFromSlide(
  22      `slide-65d77b0ce000`,

  38  const id = `slide-bc11b8e8f71c`;
  39: let num = getFromSlide(id, `input1.data.text`, '') || '';
  40: let num2 = getFromSlide(id, `input2.data.text`, '') || '';
  41  

DIDwhiteboard • G8/M5/TA L02 - Introduction to Systems of Linear Equations/slide8.js:
  24  let equa =
  25:   getFromSlide(
  26      `slide-65d77b0ce000`,

DIDwhiteboard • G8/M5/TA L02 - Introduction to Systems of Linear Equations/slide9.js:
   5  let equa =
   6:   getFromSlide(
   7      `slide-65d77b0ce000`,

  22  
  23: // let equa = getFromSlide(
  24  //   `slide-65d77b0ce000`,

  30  let equa2 =
  31:   getFromSlide(
  32      `slide-de79a7a19f06`,

DIDwhiteboard • G8/M5/TA L02 - Introduction to Systems of Linear Equations/slide10.js:
   5  let equa =
   6:   getFromSlide(
   7      `slide-65d77b0ce000`,

  23  let equa2 =
  24:   getFromSlide(
  25      `slide-de79a7a19f06`,

DIDwhiteboard • G8/M5/TA L02 - Introduction to Systems of Linear Equations/slide12.js:
  39  const id = `slide-8682bc950a4d`;
  40: let num = getFromSlide(id, `input1.data.text`, "") || "";
  41: let num2 = getFromSlide(id, `input2.data.text`, "") || "";
  42  

DIDwhiteboard • G8/M5/TA L02 - Introduction to Systems of Linear Equations/slide15.js:
  20  const id = `slide-2c4c567cf5e4`;
  21: let choiceData = getFromSlide(id, "select1", false) || false;
  22  let choiceNum = choiceData.data?.selected;

DIDwhiteboard • G8/M5/TA L02 - Introduction to Systems of Linear Equations/slide17.js:
  18  const id = `slide-bec103dbf257`;
  19: let choiceData = getFromSlide(id, 'select1', false) || false;
  20  let choiceNum = choiceData.data?.selected;

DIDwhiteboard • G8/M5/TC L12 - Solving Historical Problems with Systems of Equations/slide3.js:
  27  
  28: let snapshot = getFromSlide("slide-4de50a577000", "ggb1.data.imageA", "") || "";
  29  if (snapshot) {

DIDwhiteboard • G8/M5/TC L12 - Solving Historical Problems with Systems of Equations/slide6.js:
  17  const id = `slide-45834b10817f`;
  18: let swallowInput = getFromSlide(id, `input1.data.text`, "") || "";
  19: let sparrowInput = getFromSlide(id, `input2.data.text`, "") || "";
  20  

  42  let bottomImageA1 =
  43:   getFromSlide("slide-4de50a577000", "ggb1.data.bottomImageA", "") || "";
  44  let bottomImageB1 =
  45:   getFromSlide("slide-4de50a577000", "ggb1.data.bottomImageB", "") || "";
  46  let bottomImageA2 =
  47:   getFromSlide("slide-705d219ad8ee", "ggb1.data.bottomImageA", "") || "";
  48  let bottomImageB2 =
  49:   getFromSlide("slide-705d219ad8ee", "ggb1.data.bottomImageB", "") || "";
  50  
  51  let snapshot1 =
  52:   getFromSlide("slide-4de50a577000", "ggb1.data.save64", "") || "";
  53  

  60  let snapshot2 =
  61:   getFromSlide("slide-705d219ad8ee", "ggb1.data.save64", "") || "";
  62  

DIDwhiteboard • G8/M5/TC L12 - Solving Historical Problems with Systems of Equations/slide7.js:
   38  let picsAFromSecondSlide =
   39:   getFromSlide("slide-705d219ad8ee", "ggb1.data.picsA", "") || "";
   40  
   41  let picsBFromSecondSlide =
   42:   getFromSlide("slide-705d219ad8ee", "ggb1.data.picsB", "") || "";
   43  
   44: //const prev64A = getFromSlide('slide-4de50a577000', 'ggb1.data.save64');
   45  let bottomImageA1 =
   46:   getFromSlide("slide-4de50a577000", "ggb1.data.bottomImageA", "") || "";
   47  let bottomImageB1 =
   48:   getFromSlide("slide-4de50a577000", "ggb1.data.bottomImageB", "") || "";
   49  
   50  let bottomImageA2 =
   51:   getFromSlide("slide-705d219ad8ee", "ggb1.data.bottomImageA", "") || "";
   52  let bottomImageB2 =
   53:   getFromSlide("slide-705d219ad8ee", "ggb1.data.bottomImageB", "") || "";
   54  
   55  let snapshot1 =
   56:   getFromSlide("slide-4de50a577000", "ggb1.data.save64", "") || "";
   57  if (snapshot1) {

   63  let snapshot2 =
   64:   getFromSlide("slide-705d219ad8ee", "ggb1.data.save64", "") || "";
   65  if (snapshot2) {

  119  let slide2Target1Arr =
  120:   getFromSlide("slide-4de50a577000", "ggb1.data.target1Arr", []) || [];
  121  

  126  let slide2Target2Arr =
  127:   getFromSlide("slide-4de50a577000", "ggb1.data.target2Arr", []) || [];
  128  

  133  let slide2CurentAInTar1 =
  134:   getFromSlide("slide-4de50a577000", "ggb1.data.currentAInTar1", false) ||
  135    false;

  141  let slide2CurentBInTar1 =
  142:   getFromSlide("slide-4de50a577000", "ggb1.data.currentBInTar1", false) ||
  143    false;

  149  let slide2CurentAInTar2 =
  150:   getFromSlide("slide-4de50a577000", "ggb1.data.currentAInTar2", false) ||
  151    false;

  157  let slide2CurentBInTar2 =
  158:   getFromSlide("slide-4de50a577000", "ggb1.data.currentBInTar2", false) ||
  159    false;

  164  
  165: //const prev64B = getFromSlide('slide-705d219ad8ee', 'ggb1.data.save64');
  166  let slide4Target1Arr =
  167:   getFromSlide("slide-705d219ad8ee", "ggb1.data.target1Arr", false) || false;
  168  

  173  let slide4CurentAInTar1 =
  174:   getFromSlide("slide-705d219ad8ee", "ggb1.data.currentAInTar1", false) ||
  175    false;

  181  let slide4CurentBInTar1 =
  182:   getFromSlide("slide-705d219ad8ee", "ggb1.data.currentBInTar1", false) ||
  183    false;

  206  const id = "slide-45834b10817f";
  207: let swallowInput = getFromSlide(id, "input1.data.text", "") || "";
  208: let sparrowInput = getFromSlide(id, "input2.data.text", "") || "";
  209  

  222  const id2 = "slide-a8d3eadfd8ad";
  223: let equation1 = getFromSlide(id2, "input1.data.text", "") || "";
  224: let equation2 = getFromSlide(id2, "input2.data.text", "") || "";
  225  

DIDwhiteboard • G8/M5/TC L12 - Solving Historical Problems with Systems of Equations/slide9.js:
  38  const id = "slide-3636b837dd6b";
  39: let oldTable = getFromSlide(id, "table1", false) || false;
  40  

DIDwhiteboard • G8/M5/TC L12 - Solving Historical Problems with Systems of Equations/slide11.js:
  17  const id = `slide-c969e090344e`;
  18: let oxInput = getFromSlide(id, `input1.data.text`, "") || "";
  19: let sheepInput = getFromSlide(id, `input2.data.text`, "") || "";
  20  

  41  let snapshot1 =
  42:   getFromSlide("slide-3636b837dd6b", "ggb1.data.save64", "") || "";
  43  if (snapshot1) {

  47  let snapshot2 =
  48:   getFromSlide("slide-746092970a09", "ggb1.data.save64", "") || "";
  49  if (snapshot2) {

  52  let bottomImageA2 =
  53:   getFromSlide("slide-705d219ad8ee", "ggb1.data.bottomImageA", "") || "";
  54  let bottomImageB2 =
  55:   getFromSlide("slide-705d219ad8ee", "ggb1.data.bottomImageB", "") || "";
  56  

DIDwhiteboard • G8/M5/TC L12 - Solving Historical Problems with Systems of Equations/slide12.js:
   41  const id = "slide-c969e090344e";
   42: let oxInput = getFromSlide(id, "input1.data.text", "") || "";
   43: let sheepInput = getFromSlide(id, "input2.data.text", "") || "";
   44  

   57  const id2 = "slide-7f9a203b04df";
   58: let equation1 = getFromSlide(id2, "input1.data.text", "") || "";
   59: let equation2 = getFromSlide(id2, "input2.data.text", "") || "";
   60  

   97  let snapshot1 =
   98:   getFromSlide("slide-3636b837dd6b", "ggb1.data.save64", "") || "";
   99  if (snapshot1) {

  103  let snapshot2 =
  104:   getFromSlide("slide-746092970a09", "ggb1.data.save64", "") || "";
  105  if (snapshot2) {

DIDwhiteboard • G8/M6/TA L01 - Motion and Speed/slide4.js:
  23  let eq =
  24:   getFromSlide(id1, `cc_sharewithclass_f96449e85295_input1.data.text`, '') ||
  25    '';

DIDwhiteboard • IM1/M1/TA L02/slide-b3df16ec6244.js:
  49  const prevSegs =
  50:   getFromSlide("slide-10b318d0c944", "text1.storage.segStrings", []) || [];
  51  

DIDwhiteboard • IM1/M1/TB L09 - Writing and Solving Equations in One Variable/slide7.js:
  42    };
  43:   const prelimFib = getFromSlide(slideID, compName, defFib) || defFib;
  44    const numInputs = !!prelimFib.data?.values?.length

  50    // get previous data
  51:   let prevFib = getFromSlide(slideID, compName, defFib) || defFib;
  52    // check previous data, fill in useful data

DIDwhiteboard • IM1/M1/TB L09 - Writing and Solving Equations in One Variable/slide8.js:
   70    };
   71:   const prelimFib = getFromSlide(slideID, compName, defFib) || defFib;
   72    const numInputs = !!prelimFib.data?.values?.length

   78    // get previous data
   79:   let prevFib = getFromSlide(slideID, compName, defFib) || defFib;
   80    // check previous data, fill in useful data

  121    // get previous data
  122:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  123    // fill in other useful data

DIDwhiteboard • IM1/M1/TC L13 - Solving and Graphing Compound Inequalities/slide5.js:
  38    let prevEnds =
  39:     getFromSlide("slide-f20099ccaff8", "ggb1.data.endsRecord", []) || [];
  40    /* [{

DIDwhiteboard • IM1/M1/TC L13 - Solving and Graphing Compound Inequalities/slide6.js:
  46    let prevEnds =
  47:     getFromSlide("slide-aa4bbc984e49", "ggb1.data.endsRecord", []) || [];
  48    /* [{

DIDwhiteboard • IM1/M1/TC L13 - Solving and Graphing Compound Inequalities/slide8.js:
  52    let clue1 =
  53:     getFromSlide("slide-4086cacd56f8", "ggb1.data.shadings", {}) || {};
  54    if (!Object.keys(clue1).length) {

DIDwhiteboard • IM1/M1/TC L13 - Solving and Graphing Compound Inequalities/slide9.js:
   52    let clue1 =
   53:     getFromSlide("slide-4086cacd56f8", "ggb1.data.shadings", {}) || {};
   54    if (!Object.keys(clue1).length) {

  108    let clue2 =
  109:     getFromSlide("slide-b9857447c139", "ggb1.data.shadings", {}) || {};
  110    if (!Object.keys(clue2).length) {

DIDwhiteboard • IM1/M1/TC L13 - Solving and Graphing Compound Inequalities/slide10.js:
   52    let clue1 =
   53:     getFromSlide("slide-4086cacd56f8", "ggb1.data.shadings", {}) || {};
   54    if (!Object.keys(clue1).length) {

  108    let clue2 =
  109:     getFromSlide("slide-b9857447c139", "ggb1.data.shadings", {}) || {};
  110    if (!Object.keys(clue2).length) {

  164    let clue3 =
  165:     getFromSlide("slide-ba407376a432", "ggb1.data.shadings", {}) || {};
  166    if (!Object.keys(clue3).length) {

DIDwhiteboard • IM1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/slide2 slide-8e74cc3defa1.js:
  143    };
  144:   const prelimTable = getFromSlide(slideID, compName, defTable) || defTable;
  145    const numRows = !!prelimTable.data?.rows?.length

  158    // get previous data
  159:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  160    // check previous data, fill in useful data

DIDwhiteboard • IM1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/slide3 slide-591b98c4c31d.js:
  56  const id1 = "slide-1a0fd993032e";
  57: let content = getFromSlide(id1, "table1", defTable) || defTable;
  58  let num = content.data.rows[0][0].value;

  60  
  61: let content2 = getFromSlide(id1, "table2", defTable) || defTable;
  62  let num3 = content2.data.rows[0][0].value;

  67  const id2 = "slide-8e74cc3defa1";
  68: let content3 = getFromSlide(id2, "table1", defTable) || defTable;
  69  let num7 = content3.data.rows[3][0].value;

DIDwhiteboard • IM1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/slide4 slide-1fae6b2740ae.js:
   47  
   48: let data = getFromSlide("slide-591b98c4c31d", "ggb1", defGGB) || defGGB;
   49  let slide4x1;

   96  let content =
   97:   getFromSlide("slide-1a0fd993032e", "table1", defTable) || defTable;
   98  let num = content.data.rows[0][0].value;

  101  let content2 =
  102:   getFromSlide("slide-1a0fd993032e", "table2", defTable) || defTable;
  103  let num3 = content2.data.rows[0][0].value;

  108  let content3 =
  109:   getFromSlide("slide-8e74cc3defa1", "table1", defTable) || defTable;
  110  let num7 = content3.data.rows[3][0].value;

DIDwhiteboard • IM1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/slide12 slide-cb14aaf8d320.js:
  29  
  30: let data = getFromSlide("slide-102b2e9edb49", "ggb1", defGGB) || defGGB;
  31  let num;

DIDwhiteboard • IM1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/slide13 slide-15596c4169b5.js:
  30  
  31: let data = getFromSlide("slide-102b2e9edb49", "ggb1", defGGB) || defGGB;
  32  let num;

DIDwhiteboard • IM1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/slide14 slide-9295071f4648.js:
    4  
    5: const prev64 = getFromSlide("slide-15596c4169b5", "ggb2.data.save64", "") || "";
    6  

  102    // get previous data
  103:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  104    // check previous data

DIDwhiteboard • IM1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/slide18 slide-5072c2c56e10.js:
  4  
  5: const prev64 = getFromSlide("slide-1cba24759350", "ggb2.data.save64", "") || "";
  6  

DIDwhiteboard • IM1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/slide19 slide-be0d33a7b382.js:
  13  
  14: const prev64 = getFromSlide("slide-15596c4169b5", "ggb2.data.save64", "") || "";
  15  

  35  const prev642 =
  36:   getFromSlide("slide-1cba24759350", "ggb2.data.save64", "") || "";
  37  

DIDwhiteboard • IM1/M2/TC L13 - Solution Sets of Linear Inequalities in Two Variables/slide4.js:
  33    };
  34:   const prelimTable = getFromSlide(slideID, compName, defTable) || defTable;
  35    const numRows = !!prelimTable.data?.rows?.length

  48    // get previous data
  49:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  50    // check previous data, fill in useful data

DIDwhiteboard • IM1/M2/TC L13 - Solution Sets of Linear Inequalities in Two Variables/slide7.js:
   54  
   55: let data = getFromSlide("slide-591b98c4c31d", "ggb1", defGGB) || defGGB;
   56  let slide4x1;

  103  let content =
  104:   getFromSlide("slide-1a0fd993032e", "table1", defTable) || defTable;
  105  let num = content.data.rows[0][0].value;

  108  let content2 =
  109:   getFromSlide("slide-1a0fd993032e", "table2", defTable) || defTable;
  110  let num3 = content2.data.rows[0][0].value;

  115  let content3 =
  116:   getFromSlide("slide-8e74cc3defa1", "table1", defTable) || defTable;
  117  let num7 = content3.data.rows[0][0].value;

DIDwhiteboard • IM1/M2/TD L19 - The Distance Formula/slide9.js:
   98    };
   99:   const prelimFib = getFromSlide(slideID, compName, defFib) || defFib;
  100    const numInputs = !!prelimFib.data?.values?.length

  106    // get previous data
  107:   let prevFib = getFromSlide(slideID, compName, defFib) || defFib;
  108    // check previous data, fill in useful data

DIDwhiteboard • IM1/M2/TD L19 - The Distance Formula/slide10.js:
  57    };
  58:   const prelimFib = getFromSlide(slideID, compName, defFib) || defFib;
  59    const numInputs = !!prelimFib.data?.values?.length

  65    // get previous data
  66:   let prevFib = getFromSlide(slideID, compName, defFib) || defFib;
  67    // check previous data, fill in useful data

DIDwhiteboard • IM1/M2/TD L19 - The Distance Formula/slide14.js:
  222    // get previous data
  223:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  224    // check previous data

DIDwhiteboard • IM1/M2/TD L19 - The Distance Formula/slide15.js:
  105    };
  106:   const prelimFib = getFromSlide(slideID, compName, defFib) || defFib;
  107    const numInputs = !!prelimFib.data?.values?.length

  113    // get previous data
  114:   let prevFib = getFromSlide(slideID, compName, defFib) || defFib;
  115    // check previous data, fill in useful data

DIDwhiteboard • IM1/M2/TD L19 - The Distance Formula/slide17.js:
  222    // get previous data
  223:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  224    // check previous data

DIDwhiteboard • IM1/M2/TD L19 - The Distance Formula/slide18.js:
  105    };
  106:   const prelimFib = getFromSlide(slideID, compName, defFib) || defFib;
  107    const numInputs = !!prelimFib.data?.values?.length

  113    // get previous data
  114:   let prevFib = getFromSlide(slideID, compName, defFib) || defFib;
  115    // check previous data, fill in useful data

DIDwhiteboard • IM1/M2/TD L19 - The Distance Formula/slide20.js:
  70    // get previous data
  71:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  72    // fill in other useful data

DIDwhiteboard • OMO/G1/M2/TC/L10/Version4/slide3.js:
  201  	// get previous data
  202: 	let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  203  	let selLabels = prevSelect.data.options

  246  	// get previous data
  247: 	let prevComp = getFromSlide(slideID, compName, {}) || {};
  248  	// check previous data

DIDwhiteboard • OMO/G1/M2/TC/L10/Version4/slide5.js:
  406  	// get previous data
  407: 	let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  408  	let selLabels = prevSelect.data.options

  451  	// get previous data
  452: 	let prevComp = getFromSlide(slideID, compName, {}) || {};
  453  	console.log(prevComp);

DIDwhiteboard • OMO/G1/M2/TC/L10/Version4/slide8.js:
  97  	// get previous data
  98: 	let prevGGB = getFromSlide(slideID, compName, false) || false;
  99  	// check previous data

DIDwhiteboard • OMO/G6/slide3.js:
  71    // get previous data
  72:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  73    // fill in other useful data

DIDwhiteboard • OMO/G6/slide5.js:
  473  	// get previous data
  474: 	let prevComp = getFromSlide(slideID, compName, {}) || {};
  475  	// check previous data

DIDwhiteboard • OMO/G6/slide6.js:
  492  	// get previous data
  493: 	let prevComp = getFromSlide(slideID, compName, {}) || {};
  494  	// check previous data

DIDwhiteboard • OMO/G6/slide9.js:
  391  	// get previous data
  392: 	let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  393  	// fill in other useful data

DIDwhiteboard • OMO/G6/slide10.js:
  82  	// get previous data
  83: 	let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  84  	// fill in other useful data

DIDwhiteboard • OMO/G7/M1/L20 - Proto 0/slide8.js:
  47    // get previous data
  48:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  49    // fill in other useful data

DIDwhiteboard • OMO/G7/M1/L20 - Proto 0/slide14.js:
  71    // get previous data
  72:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  73    // check previous data

DIDwhiteboard • OMO/G9/M2/TA/L2/Slide2.js:
  69  	// get previous data
  70: 	let prevComp = getFromSlide(slideID, compName, {}) || {};
  71  	// check previous data

DIDwhiteboard • OMO/G9/M2/TA/L2/Slide6.js:
  106  	};
  107: 	const prelimFib = getFromSlide(slideID, compName, defFib) || defFib;
  108  	const numInputs = !!prelimFib.data?.values?.length

  114  	// get previous data
  115: 	let prevFib = getFromSlide(slideID, compName, defFib) || defFib;
  116  	// check previous data, fill in useful data

DIDwhiteboard • OMO/G9/M2/TA/L2/Slide9.js:
  45  	// get previous data
  46: 	let prevComp = getFromSlide(slideID, compName, {}) || {};
  47  	// check previous data

DIDwhiteboard • OMO/G9/M2/TA/L2/Slide11.js:
  56    // get previous data
  57:   let prevSelect = getFromSlide(slideID, compName, defSelect) || defSelect;
  58    let selLabels = prevSelect.data.options

DIDwhiteboard • Other/Onboarding/Learning Task 1/slide3.js:
   74    // get previous data
   75:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
   76    // fill in other useful data

  107    // get previous data
  108:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  109    // check previous data

DIDwhiteboard • Other/Onboarding/Learning Task 2/slide2.js:
   57    // get previous data
   58:   let prevGGB = getFromSlide(slideID, compName, false) || false;
   59    // check previous data

  142    // get previous data
  143:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  144    // fill in other useful data

DIDwhiteboard • Print Alt/A1/M1/TC L15 - Solving and Graphing Compound Inequalities/slide4.js:
   6  
   7: //let data = getFromSlide(id1, `ggb1`);
   8  

  42    // get previous data
  43:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  44    // check previous data

DIDwhiteboard • Print Alt/A1/M1/TD L18 - Distributions and Their Shapes/slide7.js:
  24  
  25: let prevTable1 = getFromSlide(id1, 'table1', defPrevTable1) || defPrevTable1;
  26: let prevTable2 = getFromSlide(id2, 'table1', defPrevTable1) || defPrevTable1;
  27  

DIDwhiteboard • Print Alt/A1/M1/TD L18 - Distributions and Their Shapes/slide9.js:
  24  
  25: let prevTable1 = getFromSlide(id1, 'table1', defPrevTable1) || defPrevTable1;
  26: let prevTable2 = getFromSlide(id2, 'table1', defPrevTable1) || defPrevTable1;
  27  

DIDwhiteboard • Print Alt/A1/M2/TA L1/slide3.js:
  72    // get previous data
  73:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  74    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/A1/M2/TA L1/slide4.js:
  60    // get previous data
  61:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  62    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/A1/M2/TA L1/slide5.js:
  63    // get previous data
  64:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  65    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/A1/M2/TA L1/slide7.js:
  49    // get previous data
  50:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  51    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/A1/M2/TA L4/slide5.js:
  41    // get previous data
  42:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  43    // fill in other useful data

DIDwhiteboard • Print Alt/A1/M2/TA L4/slide6.js:
  46    // get previous data
  47:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  48    // fill in other useful data

DIDwhiteboard • Print Alt/A1/M2/TA L4/slide7.js:
  55    // get previous data
  56:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  57    // fill in other useful data

DIDwhiteboard • Print Alt/A1/M2/TA L4/slide8.js:
  26  const sketches =
  27:   getFromSlide("slide-1b5181ef8c83", "ggb1.innerData.doodles", []) || [];
  28  

  73    // get previous data
  74:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  75    // fill in other useful data

DIDwhiteboard • Print Alt/A1/M2/TC L21 - Analyzing Bivariate Quantative Data/slide4.js:
  34  const id = `slide-a833275c68b2`;
  35: let choiceData = getFromSlide(id, 'select1', false) || false;
  36  let choiceNum = choiceData.data?.selected;

DIDwhiteboard • Print Alt/A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/slide23.js:
  39    // get previous data
  40:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  41    // check previous data

DIDwhiteboard • Print Alt/A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/slide24.js:
  196    // get previous data
  197:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  198    // check previous data

DIDwhiteboard • Print Alt/A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/slide25.js:
  104    // get previous data
  105:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  106    // check previous data

DIDwhiteboard • Print Alt/A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/slide26.js:
  173    // get previous data
  174:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  175    // check previous data

DIDwhiteboard • Print Alt/A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/slide27.js:
  121    // get previous data
  122:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  123    // check previous data

DIDwhiteboard • Print Alt/A1/M2/TD L22 - Summarizing Bivariate Categorical Data with Two-Way Tables/slide28.js:
  137    // get previous data
  138:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  139    // check previous data

DIDwhiteboard • Print Alt/A1/M3/TA L3 The Graph of a Function/slide4.js:
  8  const sketches =
  9:   getFromSlide("slide-a086712cf51e", "ggb1.innerData.doodles", []) || [];
  10  

DIDwhiteboard • Print Alt/A1/M3/TA L3 The Graph of a Function/slide5.js:
  8  const sketches2 =
  9:   getFromSlide(`slide-633c077360b9`, `ggb1.innerData.doodles2`, []) || [];
  10  // console.log(sketches2);

DIDwhiteboard • Print Alt/A1/M3/TA L3 The Graph of a Function/slide6.js:
  27  const sketches3 =
  28:   getFromSlide(`slide-a7b672b5dd25`, `ggb1.innerData.doodles2`, []) || [];
  29  // console.log(sketches3);

DIDwhiteboard • Print Alt/A1/M3/TA L3 The Graph of a Function/slide7.js:
  17  const sketches2 =
  18:   getFromSlide(`slide-a7b672b5dd25`, `ggb1.innerData.doodles2`, []) || [];
  19  // console.log(sketches2);

DIDwhiteboard • Print Alt/A1/M3/TA L3 The Graph of a Function/slide8.js:
  31  const sketches2 =
  32:   getFromSlide(`slide-3b6db967be76`, `ggb1.innerData.doodles2`, []) || [];
  33  // console.log(sketches2);

DIDwhiteboard • Print Alt/A1/M3/TA L3 The Graph of a Function/slide9.js:
  56  const sketches2 =
  57:   getFromSlide(`slide-3b6db967be76`, `ggb1.innerData.doodles2`, []) || [];
  58  // console.log(sketches2);

DIDwhiteboard • Print Alt/A1/M3/TA L3 The Graph of a Function/slide11.js:
  8  
  9: let data = getFromSlide(`slide-bfc4a7709efe`, "ggb1", defGGB) || defGGB;
  10  

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide4.js:
  6  let prevStrokes =
  7:   getFromSlide("slide-01a39149e9bb", "ggb2.data.cmdStrings", []) || [];
  8  for (let i = 0, L = prevStrokes.length; i < L; i++) {

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide8.js:
  90    // get previous data
  91:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  92    // check previous data

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide11.js:
  88    // get previous data
  89:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  90    // check previous data

DIDwhiteboard • Print Alt/A1/M3/TC l13 Modeling Elevation as a Function of Time/slide10.js:
  50  /*const prevSketches =
  51:   getFromSlide("slide-c79aa62c31a4", "ggb1.data.strokeStrings") || [];
  52  const currentSketches = ggb1.instance.getAllObjectNames("penstroke");

  71  const sketches =
  72:   getFromSlide("slide-c79aa62c31a4", "ggb1.innerData.doodles", []) || [];
  73  

DIDwhiteboard • Print Alt/A1/M3/TC l13 Modeling Elevation as a Function of Time/slide13.js:
  24  
  25: const prevText = getFromSlide(id1, "text1", defPrevText1) || defPrevText1;
  26  

  69  
  70: // probably do a getFromSlide to grab the previous function and its domain
  71  

DIDwhiteboard • Print Alt/A1/M3/TC l13 Modeling Elevation as a Function of Time/slide14.js:
  35  
  36: //const prevText2 = getFromSlide(id2, "text1", defPrevText1) || defPrevText1;
  37: const prevText3 = getFromSlide(id3, "text1", defPrevText1) || defPrevText1;
  38  

  61    const numRows = 5;
  62:   //getFromSlide(id1, "cc_sharewithclass_8864c54161f8_input1.data.text", "") ||
  63    //  "";

  72    }
  73:   //const prevEq1 = getFromSlide()
  74    const prevSegs = [

DIDwhiteboard • Print Alt/A1/M3/TD l18 Exploring Transformations of the Graphs of Functions/slide15.js:
  12  function inherit1() {
  13:   const data1 = getFromSlide("slide-8aa464ffd805", "ggb1.innerData");
  14    // make sure stuff is defined

DIDwhiteboard • Print Alt/A1/M3/TD l18 Exploring Transformations of the Graphs of Functions/slide16.js:
  12    const data1 =
  13:     getFromSlide("slide-8aa464ffd805", "ggb1.innerData", false) || false;
  14    // make sure stuff is defined

  30    const data2 =
  31:     getFromSlide("slide-16829f834d88", "ggb1.innerData", false) || false;
  32    // make sure stuff is defined

DIDwhiteboard • Print Alt/A1/M4/TD L23 Creating Equations of Quadratic Functions to Model Contexts/slide4.js:
  25  const id = "slide-cbc7ba2ab067";
  26: let data1 = getFromSlide(id, "ggb1", defGGB) || defGGB;
  27  

DIDwhiteboard • Print Alt/A1/M4/TD L23 Creating Equations of Quadratic Functions to Model Contexts/slide5.js:
  10  let equa =
  11:   getFromSlide(
  12      `slide-4a2e9356d6a0`,

DIDwhiteboard • Print Alt/A1/M5/TB L08 - Exponential Functions/slide5.js:
  5  let prevInput =
  6:   getFromSlide(
  7      'slide-2c776e051648',

DIDwhiteboard • Print Alt/A1/M5/TB L08 - Exponential Functions/slide6.js:
  15  let prevInput =
  16:   getFromSlide(id1, 'cc_submit_e6a119967b77_input1.data.text', '') || '';
  17  let pop;

  46  let prevGuess =
  47:   getFromSlide(id1, 'cc_submit_5f2188c966cd_input1.data.text', '') || '';
  48  // let roundsGuess = "";

DIDwhiteboard • Print Alt/A1/M5/TB L08 - Exponential Functions/slide7.js:
  190    // get previous data
  191:   let prevInput = getFromSlide(slideID, compName, defInput) || defInput;
  192    // fill in other useful data

DIDwhiteboard • Print Alt/A1/M6/TA L01- Analyzing Paint Splatters/slide6.js:
  75  
  76: let prevTable1 = getFromSlide(id1, 'table1', defPrevTable1) || defPrevTable1;
  77  

DIDwhiteboard • Print Alt/A1/M6/TA L01- Analyzing Paint Splatters/slide7.js:
  160    // get previous data
  161:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  162    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/A1/M6/TA L01- Analyzing Paint Splatters/slide8.js:
  97    // get previous data
  98:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  99    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/A1/M6/TA L01- Analyzing Paint Splatters/slide9.js:
  50  
  51: let data = getFromSlide(`slide-3c4f252a12e8`, 'ggb1', defGGB) || defGGB;
  52  

DIDwhiteboard • Print Alt/G6/M1/TC l12/slide5.js:
  15  
  16: let oldTable1 = getFromSlide(id1, "table1", false) || false;
  17  

DIDwhiteboard • Print Alt/G6/M1/TC l12/slide6.js:
  15  
  16: let oldTable1 = getFromSlide(id1, "table1", false) || false;
  17  

DIDwhiteboard • Print Alt/G6/M1/TD l18/slide4.js:
  19  
  20: let data1 = getFromSlide(id1, "ggb1", false) || false;
  21: let data2 = getFromSlide(id2, "ggb1", false) || false;
  22  

DIDwhiteboard • Print Alt/G6/M1/TD l18/slide5.js:
  23  
  24: let oldTable1 = getFromSlide(id1, "table1", false) || false;
  25: let oldTable2 = getFromSlide(id1, "table2", false) || false;
  26  

DIDwhiteboard • Print Alt/G6/M3/TA L2/slide5.js:
  21  
  22: const table1Data = getFromSlide(id1, "table1", false) || false;
  23  

  38  
  39: const table2Data = getFromSlide(id2, "table1", false) || false;
  40  

  55  
  56: const table3Data = getFromSlide(id3, "table1", false) || false;
  57  

  73  //Diamond is at 30.
  74: /*const table1Data = getFromSlide('slide-19d7b095b436', 'table1',{});
  75  

  85  //Diamond is at 105.
  86: const table2Data = getFromSlide('slide-07d5e49fdeaa', 'table1',{});
  87  

  97  //Diamond is at 0.
  98: const table3Data = getFromSlide('slide-ed7d90fba7e6', 'table1',{});
  99  

DIDwhiteboard • Print Alt/G6/M4/TB L11 Modeling Real-World Situations and Expressions/slide3.js:
  21  
  22: let prevGGB1 = getFromSlide(id1, "ggb1", false) || false; // don't forget to change slide id
  23  

DIDwhiteboard • Print Alt/G6/M5/TC 09-Properties of Solids/slide5.js:
  35  /*const id1 = 'slide-7db41f926d55';
  36: const oldTable = getFromSlide(id1, 'table1', defTable) || defTable;
  37  

DIDwhiteboard • Print Alt/G6/M6/TC L15 - More Practice with Box Plots/slide7.js:
  80    // get previous data
  81:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  82    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/G6/M6/TC L15 - More Practice with Box Plots/slide8.js:
  51    // get previous data
  52:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  53    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide3.js:
  36    // get previous data
  37:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  38    // check previous data

DIDwhiteboard • Print Alt/G7/M4/TC L15 Watering a Lawn/slide4.js:
  16      const prev64 =
  17:       getFromSlide("slide-ffd45cce7710", "ggb1.data.string64", "") || "";
  18      if (prev64) {

DIDwhiteboard • Print Alt/G7/M5/TD L19 Applying Percent Error/slide6.js:
   3  const id1 = "slide-f008bcaa68ab";
   4: const id1Rows = getFromSlide(id1, "table1.data.rows", []) || [];
   5  const numRows = id1Rows.length;

  97    // get previous data
  98:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  99    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/G7/M5/TD L19 Applying Percent Error/slide8.js:
    4  
    5: const id1Rows = getFromSlide(id1, "table1.data.rows", []) || [];
    6  const numRows = id1Rows.length;

  108    // get previous data
  109:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  110    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/G7/M5/TD L19 Applying Percent Error/slide9.js:
    3  const id1 = "slide-f008bcaa68ab";
    4: const id1Rows = getFromSlide(id1, "table1.data.rows", []) || [];
    5  const numRows = id1Rows.length;

  135    // get previous data
  136:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  137    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/G7/M5/TD L19 Applying Percent Error/slide10.js:
    3  const id1 = "slide-5a3e048387f9";
    4: const id1Rows = getFromSlide(id1, "table1.data.rows", []) || [];
    5  const numRows = id1Rows.length;

  155    // get previous data
  156:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  157    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/G7/M6/TA L03 - Outcomes of Chance Experiments/slide5.js:
  66    // get previous data
  67:   let prevTable = getFromSlide(slideID, compName, defTable) || defTable;
  68    // check previous data, fill in useful data

DIDwhiteboard • Print Alt/G7/M6/TB L08 - Picking Blue/slide8.js:
  136    // get previous data
  137:   let prevGGB = getFromSlide(slideID, compName, false) || false;
  138    // check previous data

DIDwhiteboard • Print Alt/G7/M6/TB L08 - Picking Blue/slide15.js:
   96  
   97: let data = getFromSlide(id1, 'ggb1', false) || false; // don't forget to change slide id
   98  

  110  
  111: // let data = getFromSlide(id1, "ggb1");
  112  

  169  let numSlide =
  170:   getFromSlide(id1, `cc_sharewithclass_08883e0adaa2_input1.data.text`, '') ||
  171    '';

DIDwhiteboard • Print Alt/G8/M2/TA L4-Translations and Reflections on the Coordinate Plane/slide4.js:
   9  
  10: let data = getFromSlide("slide-845df5789f0c", "ggb1");
  11  

DIDwhiteboard • Print Alt/G8/M4/TC L12 - Solutions to Linear Equations in Two Variables/slide4:
  17  let prevPoints =
  18:   getFromSlide('slide-f52d3361f76f', 'ggb1.data.names', false) || false;
  19  

DIDwhiteboard • Print Alt/G8/M5/TC L12-Solving Historical Problems with Systems of Equations/slide5.js:
  17  /*const id = `slide-45834b10817f`;
  18: let swallowInput = getFromSlide(id, `input1.data.text`, "") || "";
  19: let sparrowInput = getFromSlide(id, `input2.data.text`, "") || "";
  20  

  42  let bottomImageA1 =
  43:   getFromSlide("slide-4de50a577000", "ggb1.data.bottomImageA", "") || "";
  44  let bottomImageB1 =
  45:   getFromSlide("slide-4de50a577000", "ggb1.data.bottomImageB", "") || "";
  46  let bottomImageA2 =
  47:   getFromSlide("slide-705d219ad8ee", "ggb1.data.bottomImageA", "") || "";
  48  let bottomImageB2 =
  49:   getFromSlide("slide-705d219ad8ee", "ggb1.data.bottomImageB", "") || "";
  50  
  51  let snapshot1 =
  52:   getFromSlide("slide-4de50a577000", "ggb1.data.save64", "") || "";
  53  

  60  let snapshot2 =
  61:   getFromSlide("slide-705d219ad8ee", "ggb1.data.save64", "") || "";
  62  

DIDwhiteboard • Print Alt/G8/M5/TC L12-Solving Historical Problems with Systems of Equations/slide7.js:
  27  /*const id = "slide-3636b837dd6b";
  28: let oldTable = getFromSlide(id, "table1", false) || false;
  29  

DIDwhiteboard • Print Alt/G8/M5/TC L12-Solving Historical Problems with Systems of Equations/slide7prev.js:
  30  /*const id = "slide-3636b837dd6b";
  31: let oldTable = getFromSlide(id, "table1", false) || false;
  32  

DIDwhiteboard • Print Alt/G8/M5/TC L12-Solving Historical Problems with Systems of Equations/slide8.js:
  17  const id = `slide-c969e090344e`;
  18: let oxInput = getFromSlide(id, `input1.data.text`, "") || "";
  19: let sheepInput = getFromSlide(id, `input2.data.text`, "") || "";
  20  

  33  let snapshot1 =
  34:   getFromSlide("slide-3636b837dd6b", "ggb1.data.save64", "") || "";
  35  if (snapshot1) {

  39  let snapshot2 =
  40:   getFromSlide("slide-746092970a09", "ggb1.data.save64", "") || "";
  41  if (snapshot2) {

  44  let bottomImageA2 =
  45:   getFromSlide("slide-705d219ad8ee", "ggb1.data.bottomImageA", "") || "";
  46  let bottomImageB2 =
  47:   getFromSlide("slide-705d219ad8ee", "ggb1.data.bottomImageB", "") || "";
  48  
