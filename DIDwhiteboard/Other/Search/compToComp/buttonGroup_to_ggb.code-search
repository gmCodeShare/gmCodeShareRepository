# Query: buttonGroup.*on\\(.click.*\\{((.|\\n)*?)ggb
# Flags: RegExp
# Including: ./DIDwhiteboard
# Excluding: Answer Key not working.json, PageSource.html, PageSource2.html, ROL.js
# ContextLines: 1

1534 results - 644 files

DIDwhiteboard • 7A/M1/whatIsThisForslide1.js:
  19  
  20: buttonGroup1.on('click:1', () => {
  21:   ggb1.instance.setValue('showSubtraction', true);
  22    updateText();

  27  
  28: buttonGroup1.on('click:2', () => {
  29:   ggb1.instance.setValue('showAddition', true);
  30    updateText();

  35  
  36: buttonGroup1.on('click:3', () => {
  37:   ggb1.instance.setValue('showAddition', false);
  38    ggb1.instance.setValue('showSubtraction', false);

DIDwhiteboard • 7A/M1/whatIsThisForslide2.js:
  16  
  17: buttonGroup1.on('click:1', () => {
  18:   let clickCounterPlus1 = ggb1.instance.getValue('clickCounter') + 1;
  19    ggb1.instance.stopAnimation();

  29  
  30: buttonGroup1.on('click:2', () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.instance.setValue('time', 1);

DIDwhiteboard • 7A/M1/TC L16 - More Scientific Notation/slide1.js:
  4  
  5: buttonGroup1.on('click:1', () => {
  6:   ggb1.instance.stopAnimation();
  7    ggb1.instance.setAnimating('time', true);

DIDwhiteboard • 7A/M1/TC L16 - More Scientific Notation/slide5.js:
  23  
  24: buttonGroup1.on('click:1', () => {
  25:   ggb1.instance.setValue('clickCount', ggb1.instance.getValue('clickCount') + 1);
  26    if (ggb1.data.startedClicks == false) {

  45  
  46: buttonGroup2.on('click:1', () => {
  47:   buttonGroup2.updateSingleButton(
  48:     {
  49:       disabled: true,
  50:     },
  51:     1
  52:   );
  53:   ggb1.instance.stopAnimation();
  54    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • 7A/M1/TC L16 - More Scientific Notation/slide6.js:
  18  
  19: buttonGroup1.on('click:1', () => {
  20:   ggb1.instance.setValue('clickCount', ggb1.instance.getValue('clickCount') + 1);
  21    if (ggb1.data.startedClicks == false) {

DIDwhiteboard • 7A/M1/TC L16 - More Scientific Notation/slide7.js:
  73  
  74: buttonGroup1.on('click:1', () => {
  75:   buttonGroup1.updateSingleButton(
  76:     {
  77:       text: 'Submitted',
  78:       disabled: true,
  79:     },
  80:     1
  81:   );
  82:   text2.updateData({ text: 'How much air is that per $1$ minute?', visible: true });
  83:   fib2.setVisible(true);
  84:   buttonGroup2.updateData({ visible: true });
  85: });
  86: undefined
  87: buttonGroup2.on('click:1', () => {
  88:   buttonGroup2.updateSingleButton(
  89:     {
  90:       text: 'Submitted',
  91:       disabled: true,
  92:     },
  93:     1
  94:   );
  95: });
  96: undefined
  97: function getPrevGGB(slideID, compName = 'ggb1', innerData, storageComp = '') {
  98    // find slide num of source

DIDwhiteboard • 7A/M1/TD L21 - Approximate Values of Roots/OLDslide2.js:
  21  
  22: buttonGroup1.on('click:1', () => {
  23:   ggb1.instance.stopAnimation();
  24    ggb1.instance.setAnimating('timeSelfSeg', true);

DIDwhiteboard • 7A/M1/TD L21 - Approximate Values of Roots/OLDslide14.js:
  10  
  11: buttonGroup1.on('click:1', () => {
  12:   ggb1.instance.getValue('clickCount');
  13    if (ggb1.instance.getValue('clickCount') == 0) {

DIDwhiteboard • 7A/M1/TD L21 - Approximate Values of Roots/OLDslide15.js:
  14  
  15: buttonGroup1.on('click:1', () => {
  16:   ggb1.instance.getValue('clickCount');
  17    if (ggb1.instance.getValue('clickCount') == 0) {

DIDwhiteboard • 7A/M1/TD L21 - Approximate Values of Roots/slide2.js:
  35  
  36: buttonGroup1.on('click:1', () => {
  37:   let low = ggb2.instance.getValue('dragLeftCurrentVal');
  38    let high = ggb2.instance.getValue('dragRightCurrentVal');

  50  
  51: buttonGroup1.on('click:2', () => {
  52:   ggb2.instance.setFixed('DragLeft', false, true);
  53    ggb2.instance.setFixed('DragRight', false, true);

  69  
  70: buttonGroup2.on('click:1', () => {
  71:   ggb2.instance.setVisible('DragApprox', false);
  72    buttonGroup2.updateSingleButton({ disabled: true }, 2);

  94  
  95: buttonGroup2.on('click:2', () => {
  96:   text5.updateData({ visible: true, text: 'Determine the two consecutive whole numbers that make the inequalities true.' });
  97:   ggb2.instance.setFixed('DragLeft', false, true);
  98    ggb2.instance.setFixed('DragRight', false, true);

DIDwhiteboard • 7A/M1/TD L21 - Approximate Values of Roots/slide4.js:
   65  
   66: buttonGroup1.on('click:1', () => {
   67:   let low = ggb2.instance.getValue('dragLeftCurrentVal');
   68    let high = ggb2.instance.getValue('dragRightCurrentVal');

   80  
   81: buttonGroup1.on('click:2', () => {
   82:   ggb2.instance.setFixed('DragLeft', false, true);
   83    ggb2.instance.setFixed('DragRight', false, true);

   99  
  100: buttonGroup2.on('click:1', () => {
  101:   let low = ggb2.instance.getValue('dragLeftCurrentVal');
  102    let high = ggb2.instance.getValue('dragRightCurrentVal');

  124  
  125: buttonGroup2.on('click:2', () => {
  126:   text6.updateData({ visible: true, text: 'Determine the two consecutive whole numbers that make the inequalities true.' });
  127:   ggb2.instance.setFixed('DragLeft', false, true);
  128    ggb2.instance.setFixed('DragRight', false, true);

DIDwhiteboard • 7A/M1/TD L21 - Approximate Values of Roots/slide5.js:
   65  
   66: buttonGroup1.on('click:1', () => {
   67:   let low = ggb2.instance.getValue('dragLeftCurrentVal');
   68    let high = ggb2.instance.getValue('dragRightCurrentVal');

   80  
   81: buttonGroup1.on('click:2', () => {
   82:   ggb2.instance.setFixed('DragLeft', false, true);
   83    ggb2.instance.setFixed('DragRight', false, true);

   99  
  100: buttonGroup2.on('click:1', () => {
  101:   let low = ggb2.instance.getValue('dragLeftCurrentVal');
  102    let high = ggb2.instance.getValue('dragRightCurrentVal');

  124  
  125: buttonGroup2.on('click:2', () => {
  126:   text6.updateData({ visible: true, text: 'Determine the two consecutive whole numbers that make the inequalities true.' });
  127:   ggb2.instance.setFixed('DragLeft', false, true);
  128    ggb2.instance.setFixed('DragRight', false, true);

DIDwhiteboard • A1/M1/TA L02 - Demo - The Communative Associative and Distributive Properties/slide1.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   ggb1.instance.setValue('show', true);
  24    if (ggb1.instance.getValue('correct')) {

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   ggb1.instance.setValue('show', false);
  38    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • A1/M1/TA L02 - Demo - The Communative Associative and Distributive Properties/slide2.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   ggb1.instance.setValue('show', true);
  24    if (ggb1.instance.getValue('correct')) {

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   ggb1.instance.setValue('show', false);
  38    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • A1/M1/TA L02 - Demo - The Communative Associative and Distributive Properties/slide3.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   ggb1.instance.setValue('show', true);
  24    if (ggb1.instance.getValue('correct')) {

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   ggb1.instance.setValue('show', false);
  38    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • A1/M1/TA L02 - Demo - The Communative Associative and Distributive Properties/slide4.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   ggb1.instance.setValue('show', true);
  24    if (ggb1.instance.getValue('correct')) {

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   ggb1.instance.setValue('show', false);
  38    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • A1/M1/TA L02 - Demo - The Communative Associative and Distributive Properties/slide5.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   ggb1.instance.setValue('show', true);
  24    if (ggb1.instance.getValue('correct')) {

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   ggb1.instance.setValue('show', false);
  38    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • A1/M1/TA L02 - Demo - The Communative Associative and Distributive Properties/slide6.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   ggb1.instance.setValue('show', true);
  24    if (ggb1.instance.getValue('correct')) {

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   ggb1.instance.setValue('show', false);
  38    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • A1/M1/TA L02 - Demo - The Communative Associative and Distributive Properties/slide7.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   ggb1.instance.setValue('show', true);
  24    if (ggb1.instance.getValue('correct')) {

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   ggb1.instance.setValue('show', false);
  38    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • A1/M1/TA L02 - Demo - The Communative Associative and Distributive Properties/slide8.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   ggb1.instance.setValue('show', true);
  24    if (ggb1.instance.getValue('correct')) {

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   ggb1.instance.setValue('show', false);
  38    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • A1/M1/TA L02 - Demo - The Communative Associative and Distributive Properties/slide9.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   ggb1.instance.setValue('show', true);
  24    if (ggb1.instance.getValue('correct')) {

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   ggb1.instance.setValue('show', false);
  38    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • A1/M1/TA L02 - Demo - The Communative Associative and Distributive Properties/slide10.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   ggb1.instance.setValue('show', true);
  24    if (ggb1.instance.getValue('correct')) {

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   ggb1.instance.setValue('show', false);
  38    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • A1/M1/TA L05 - Multiplying Polynomial Expressions/slide2.js:
  34  
  35: buttonGroup1.on("click:1", () => {
  36:   ggb1.instance.setValue("submit1a", true);
  37    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  40  
  41: buttonGroup1.on("click:2", () => {
  42:   ggb1.instance.setValue("submit1a", false);
  43    buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • A1/M1/TA L05 - Multiplying Polynomial Expressions/slide3.js:
  51  
  52: buttonGroup1.on("click:1", () => {
  53:   ggb1.instance.setValue("submit2", true);
  54    ggb1.instance.setValue("submit2a", true);

  58  
  59: buttonGroup1.on("click:2", () => {
  60:   ggb1.instance.setValue("submit2", false);
  61    ggb1.instance.setValue("submit2a", false);

DIDwhiteboard • A1/M1/TA L05 - Multiplying Polynomial Expressions/slide5.js:
   9  
  10: buttonGroup1.on("click:1", () => {
  11:   ggb1.instance.setValue("showBase10", true);
  12    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  15  
  16: buttonGroup1.on("click:2", () => {
  17:   ggb1.instance.setValue("showBase10", false);
  18    buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • A1/M1/TA L05 - Multiplying Polynomial Expressions/slide6.js:
  27  
  28: buttonGroup1.on("click:1", () => {
  29:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  31:   ggb1.instance.setValue("time", 0.001);
  32    ggb1.instance.setAnimating("time", true);

  35  
  36: buttonGroup1.on("click:2", () => {
  37:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  38:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  39:   ggb1.instance.setValue("time", 0.999);
  40    ggb1.instance.setAnimating("time", true);

DIDwhiteboard • A1/M1/TB L11 - Writing and Solving Equations in One Variable/slide10.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   ggb1.instance.setAnimating('time', true);
  11    ggb1.instance.startAnimation('time', true);

  15  
  16: buttonGroup1.on('click:2', () => {
  17:   ggb1.instance.setAnimating('time', false);
  18    ggb1.instance.stopAnimation('time', true);

DIDwhiteboard • A1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/Slide 12.js:
  30  
  31: buttonGroup1.on("click:1", () => {
  32:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  33:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  34:   text3.updateData({ visible: true });
  35:   input1.updateData({ visible: true });
  36:   text4.updateData({ visible: true });
  37:   button2.updateData({ visible: true });
  38:   ggb1.instance.setVisible("halo", false);
  39    ggb1.instance.setFixed("DragPoint", false, false);

  42  
  43: buttonGroup1.on("click:2", () => {
  44:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  45:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  46:   ggb1.instance.setVisible("halo", true);
  47    ggb1.instance.setFixed("DragPoint", false, true);

DIDwhiteboard • A1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/Slide 16.js:
  30  
  31: buttonGroup1.on("click:1", () => {
  32:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  33:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  34:   text3.updateData({ visible: true });
  35:   input1.updateData({ visible: true });
  36:   text4.updateData({ visible: true });
  37:   button2.updateData({ visible: true });
  38:   ggb1.instance.setVisible("halo", false);
  39    ggb1.instance.setFixed("DragPoint", false, false);

  42  
  43: buttonGroup1.on("click:2", () => {
  44:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  45:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  46:   ggb1.instance.setVisible("halo", true);
  47    ggb1.instance.setFixed("DragPoint", false, true);

DIDwhiteboard • A1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/Slide 20.js:
  80  
  81: buttonGroup1.on("click:1", () => {
  82:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  83:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  84:   ggb1.instance.setVisible("C1", true);
  85    text1.updateData({ text: "$25$ kilometers" });

  91  
  92: buttonGroup1.on("click:2", () => {
  93:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  94:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  95:   text1.updateData({ text: "$25$ songs" });
  96:   ggb2.instance.setVisible("C2", true);
  97    ggb1.updateData({ visible: false });

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide1.js:
   72  
   73: buttonGroup1.on("click:1", () => {
   74:   if (
   75:     ggb1.instance.getValue("frogCompletelyInInequality1") &&
   76      !ggb1.instance.getValue("cheese1InInequality1") &&

  118  
  119: buttonGroup1.on("click:2", () => {
  120:   text2.updateData({ text: "" });
  121:   submitText1.updateData({ visible: false });
  122:   submitInput1.updateData({ visible: false, text: "", previousAnswer: "" });
  123:   submitButton1.updateData({ visible: false });
  124:   ggb1.instance.setValue("showLine1Points", true);
  125    ggb1.instance.setValue("allowLineControls", true);

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide2.js:
   70  
   71: buttonGroup1.on("click:1", () => {
   72:   if (
   73:     ggb1.instance.getValue("frogCompletelyInInequality1") &&
   74      ggb1.instance.getValue("frogCompletelyInInequality2") &&

  113  
  114: buttonGroup1.on("click:2", () => {
  115:   text2.updateData({ text: "" });
  116:   submitText1.updateData({ visible: false });
  117:   submitInput1.updateData({ visible: false });
  118:   submitButton1.updateData({ visible: false });
  119:   ggb1.instance.setValue("showLine1Points", true);
  120    ggb1.instance.setValue("showLine2Points", true);

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide3.js:
  63  
  64: buttonGroup1.on("click:1", () => {
  65:   submitText1.updateData({ visible: true });
  66:   submitInput1.updateData({ visible: true });
  67:   submitButton1.updateData({ visible: true });
  68:   ggb1.instance.setValue("showLine1Points", false);
  69    ggb1.instance.setValue("allowLineControls", false);

  83  
  84: buttonGroup1.on("click:2", () => {
  85:   text2.updateData({ text: "" });
  86:   submitText1.updateData({ visible: false });
  87:   submitInput1.updateData({ visible: false });
  88:   submitButton1.updateData({ visible: false });
  89:   ggb1.instance.setValue("showLine1Points", true);
  90    ggb1.instance.setValue("allowLineControls", true);

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide4.js:
  63  
  64: buttonGroup1.on("click:1", () => {
  65:   submitText1.updateData({ visible: true });
  66:   submitInput1.updateData({ visible: true });
  67:   submitButton1.updateData({ visible: true });
  68:   ggb1.instance.setValue("showLine2Points", false);
  69    ggb1.instance.setValue("allowLineControls", false);

  83  
  84: buttonGroup1.on("click:2", () => {
  85:   text2.updateData({ text: "" });
  86:   submitText1.updateData({ visible: false });
  87:   submitInput1.updateData({ visible: false });
  88:   submitButton1.updateData({ visible: false });
  89:   ggb1.instance.setValue("showLine2Points", true);
  90    ggb1.instance.setValue("allowLineControls", true);

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide6.js:
  44  
  45: buttonGroup1.on("click:1", () => {
  46:   ggb1.instance.setAnimating("time", true);
  47    ggb1.instance.startAnimation("time");

  61  
  62: buttonGroup1.on("click:2", () => {
  63:   ggb1.instance.setAnimating("time", false);
  64    ggb1.instance.setValue("time", 0);

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide7.js:
   63  
   64: buttonGroup1.on("click:1", () => {
   65:   let counterPlus = ggb1.instance.getValue("counter") + 1;
   66    buttonGroup1.updateSingleButton(

  128  
  129: buttonGroup1.on("click:2", () => {
  130:   ggb1.instance.setValue("counter", 1);
  131    ggb1.instance.setVisible("QuizPoint1", false);

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide9.js:
   57  
   58: buttonGroup1.on("click:1", () => {
   59:   submitText1.updateData({ visible: true });
   60:   submitInput1.updateData({ visible: true });
   61:   submitButton1.updateData({ visible: true });
   62:   ggb1.instance.setValue("showLine1Points", false);
   63    ggb1.instance.setValue("showLine2Points", false);

   78  
   79: buttonGroup1.on("click:2", () => {
   80:   ggb1.instance.setValue("showLine1Points", true);
   81    ggb1.instance.setValue("showLine2Points", true);

  108  
  109: buttonGroup2.on("click:1", () => {
  110:   ggb1.instance.setFixed("solutionSetText", true, false);
  111    buttonGroup2.updateSingleButton(

  124  
  125: buttonGroup2.on("click:2", () => {
  126:   ggb1.instance.setFixed("solutionSetText", false, true);
  127    buttonGroup2.updateSingleButton(

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide11.js:
   95  
   96: buttonGroup1.on("click:1", () => {
   97:   buttonGroup1.updateSingleButton(
   98:     {
   99:       disabled: true,
  100:     },
  101:     1
  102:   );
  103: undefined
  104:   finalAnswer1 = formatInput(input1.data.text);
  105:   finalAnswer2 = formatInput(input2.data.text);
  106: undefined
  107:   convertedEquation1 = convertToEquation(finalAnswer1);
  108:   convertedEquation2 = convertToEquation(finalAnswer2);
  109: undefined
  110:   let includesInequality1 =
  111:     finalAnswer1.includes(">") || finalAnswer1.includes("<");
  112:   let includesInequality2 =
  113:     finalAnswer2.includes(">") || finalAnswer2.includes("<");
  114: undefined
  115:   ggb1.instance.evalCommand(`equationTest1: ${convertedEquation1}`);
  116    ggb1.instance.evalCommand(`equationTest2: ${convertedEquation2}`);

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide12.js:
  227  //hides select component and shows initial steps for their chosen adventure
  228: buttonGroup1.on('click:1', () => {
  229:   separator1.updateData({ size: '8px' });
  230:   select1.setVisible(false);
  231:   ggb1.updateData({ visible: true });
  232  

  266  //resets screen, allows student to choose different adventure
  267: buttonGroup1.on('click:2', () => {
  268:   setInitialState();
  269: });
  270: undefined
  271: //clicking "Lock it in!" for placement of frog and cheese
  272: buttonGroup11.on('click:1', () => {
  273:   text11.updateData({ visible: false });
  274:   buttonGroup11.updateData({ visible: false });
  275: undefined
  276:   text12.updateData({ visible: true });
  277:   buttonGroup12.updateData({ visible: true });
  278:   text13.updateData({ visible: true });
  279:   ggb1.instance.setFixed('frogSVG', true, false);
  280    ggb1.instance.setFixed('cheese1SVG', true, false);

  287  //clicking "Go back" for placement of frog and cheese
  288: buttonGroup11.on('click:2', () => {
  289:   setInitialState();
  290: });
  291: undefined
  292: //clicking "lock it in" when graphing lines before writing the inequalities
  293: buttonGroup12.on('click:1', () => {
  294:   //for when frog is successfully captured
  295:   if (ggb1.instance.getValue('frogCompletelyInInequality1') && ggb1.instance.getValue('frogCompletelyInInequality2') && !(ggb1.instance.getValue('cheese1InInequality1') && ggb1.instance.getValue('cheese1InInequality2')) && !(ggb1.instance.getValue('cheese2InInequality1') && ggb1.instance.getValue('cheese2InInequality2')) && !(ggb1.instance.getValue('cheese3InInequality1') && ggb1.instance.getValue('cheese3InInequality2'))) {
  296      ggb1.instance.evalCommand('inequalityAsEquation1=line1');

  343  //clicking "Go back" when graphing lines before writing the inequalities
  344: buttonGroup12.on('click:2', () => {
  345:   text12.updateData({ visible: false });
  346:   buttonGroup12.updateData({ visible: false });
  347:   text13.updateData({ visible: false, text: '' });
  348:   ggb1.instance.setFixed('frogSVG', false, true);
  349    ggb1.instance.setFixed('cheese1SVG', false, true);

  359  //clicking "Check it" when writing inequalities
  360: buttonGroup13.on('click:1', () => {
  361:   buttonGroup13.updateSingleButton(
  362:     {
  363:       disabled: true,
  364:     },
  365:     1
  366:   );
  367: undefined
  368:   let finalAnswer1 = formatInput(input11.data.text);
  369:   ggb1.instance.evalCommand('studentInequality1: ' + finalAnswer1);
  370    let studentIneq1OrEqual = finalAnswer1.includes('=');

  428  
  429: buttonGroup13.on('click:2', () => {
  430:   text14.updateData({ visible: false });
  431:   input11.updateData({ visible: false });
  432:   text15.updateData({ visible: false });
  433:   input12.updateData({ visible: false });
  434:   buttonGroup13.updateData({ visible: false });
  435:   text16.updateData({ visible: false, text: '' });
  436:   text17.updateData({ visible: false, text: '' });
  437: undefined
  438:   text12.updateData({ visible: true });
  439:   buttonGroup12.updateData({ visible: true });
  440:   text13.updateData({ visible: true });
  441:   ggb1.instance.setFixed('frogSVG', true, false);
  442    ggb1.instance.setFixed('cheese1SVG', true, false);

  470  //clicking "Lock it in!" for placement of frog and cheese
  471: buttonGroup21.on('click:1', () => {
  472:   text21.updateData({ visible: false });
  473:   buttonGroup21.updateData({ visible: false });
  474: undefined
  475:   text22.updateData({ visible: true });
  476:   buttonGroup22.updateData({ visible: true });
  477:   text23.updateData({ visible: true });
  478:   ggb1.instance.setFixed('frogSVG', true, false);
  479    ggb1.instance.setFixed('cheese1SVG', true, false);

  486  //clicking "Go back" for placement of frog and cheese
  487: buttonGroup21.on('click:2', () => {
  488:   setInitialState();
  489: });
  490: undefined
  491: //clicking "lock it in" when graphing lines before writing the inequalities
  492: buttonGroup22.on('click:1', () => {
  493:   //for when frog is successfully captured
  494:   if (ggb1.instance.getValue('frogCompletelyInInequality1') && ggb1.instance.getValue('frogCompletelyInInequality2') && !(ggb1.instance.getValue('cheese1InInequality1') && ggb1.instance.getValue('cheese1InInequality2')) && !(ggb1.instance.getValue('cheese2InInequality1') && ggb1.instance.getValue('cheese2InInequality2')) && !(ggb1.instance.getValue('cheese3InInequality1') && ggb1.instance.getValue('cheese3InInequality2'))) {
  495      let ineq1GreaterOrLess = ggb1.instance.getValue('line1Greater') ? '>' : '<';

  551  //clicking "Go back" when graphing lines before writing the inequalities
  552: buttonGroup22.on('click:2', () => {
  553:   text22.updateData({ visible: false });
  554:   buttonGroup22.updateData({ visible: false });
  555:   text23.updateData({ visible: false, text: '' });
  556:   ggb1.instance.setFixed('frogSVG', false, true);
  557    ggb1.instance.setFixed('cheese1SVG', false, true);

  567  //clicking "Check it" when writing inequalities
  568: buttonGroup23.on('click:1', () => {
  569:   if (ggb1.instance.getValue('frogCompletelyInStudentInequality1') && ggb1.instance.getValue('frogCompletelyInStudentInequality2') && !(ggb1.instance.getValue('cheese1InStudentInequality1') && ggb1.instance.getValue('cheese1InStudentInequality2')) && !(ggb1.instance.getValue('cheese2InStudentInequality1') && ggb1.instance.getValue('cheese2InStudentInequality2')) && !(ggb1.instance.getValue('cheese3InStudentInequality1') && ggb1.instance.getValue('cheese3InStudentInequality2'))) {
  570      ggb1.instance.setValue('showStudentInequality1', true);

  623  
  624: buttonGroup23.on('click:2', () => {
  625:   text24.updateData({ visible: false });
  626:   text25.updateData({ visible: false, text: '' });
  627:   buttonGroup23.updateSingleButton(
  628:     {
  629:       disabled: false,
  630:     },
  631:     1
  632:   );
  633:   buttonGroup23.updateData({ visible: false });
  634:   text26.updateData({ visible: false, text: '' });
  635:   text27.updateData({ visible: false, text: '' });
  636:   text22.updateData({ visible: true });
  637:   buttonGroup22.updateData({ visible: true });
  638:   text23.updateData({ visible: true, text: '' });
  639:   ggb1.instance.setFixed('frogSVG', true, false);
  640    ggb1.instance.setFixed('cheese1SVG', true, false);

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide13.js:
  274  
  275: buttonGroup1.on('click:1', () => {
  276:   buttonGroup1.updateSingleButton(
  277:     {
  278:       disabled: true,
  279:     },
  280:     1
  281:   );
  282:   //if working on left side problem
  283:   if (text1.data.currentSide == 'left') {
  284:     if (checkLeftSide()) {
  285:       text6.updateData({ text: `Great work! Now try another classmate's posed problem.` });
  286:       leftSideButtons[text1.data.currentProb].updateData({ color: 'success' });
  287:     } else {
  288:       text6.updateData({ text: `Not yet. Keep working at it!` });
  289:     }
  290:   }
  291:   //if working on right side problem
  292:   else {
  293:     if (checkRightSide()) {
  294:       text6.updateData({ text: `Great work! Now try another classmate's posed problem.` });
  295:       rightSideButtons[text1.data.currentProb].updateData({ color: 'success' });
  296:     } else {
  297:       text6.updateData({ text: `Not yet. Keep working at it!` });
  298:     }
  299:   }
  300: });
  301: undefined
  302: buttonGroup1.on('click:2', () => {
  303:   buttonGroup1.updateData({ visible: false });
  304:   input1.updateData({ visible: false });
  305:   input2.updateData({ visible: false });
  306:   ggb1.instance.setFilling('inequality1', normalFill);
  307    ggb1.instance.setFilling('inequality2', normalFill);

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/archive/slide12old.js:
  203  //hides select component and shows initial steps for their chosen adventure
  204: buttonGroup1.on('click:1', () => {
  205:   separator1.updateData({ size: '8px' });
  206:   select1.setVisible(false);
  207:   ggb1.updateData({ visible: true });
  208  

  241  //resets screen, allows student to choose different adventure
  242: buttonGroup1.on('click:2', () => {
  243:   setInitialState();
  244: });
  245: undefined
  246: //clicking "Lock it in!" for placement of frog and cheese
  247: buttonGroup11.on('click:1', () => {
  248:   text11.updateData({ visible: false });
  249:   buttonGroup11.updateData({ visible: false });
  250:   //text12.updateData({ visible: true });
  251:   //buttonGroup12.updateData({ visible: true });
  252:   ggb1.instance.setFixed('frogSVG', true, false);
  253    ggb1.instance.setFixed('cheese1SVG', true, false);

  258  //clicking "Go back" for placement of frog and cheese
  259: buttonGroup11.on('click:2', () => {
  260:   setInitialState();
  261: });
  262: undefined
  263: // //clicking "Graph the lines"
  264: // buttonGroup12.on('click:1', () => {
  265: //   text12.updateData({ visible: false });
  266: //   buttonGroup12.updateData({ visible: false });
  267: //   text13.updateData({ visible: true });
  268: //   buttonGroup13.updateData({ visible: true });
  269: //   text14.updateData({ visible: true, text: '' });
  270: //   ggb1.instance.setValue('showLine1', true);
  271  //   ggb1.instance.setValue('showLine3', true);

  274  // //clicking "Go right to writing inequalities"
  275: // buttonGroup12.on('click:2', () => {
  276: //   text12.updateData({ visible: false });
  277: //   buttonGroup12.updateData({ visible: false });
  278: //   text15.updateData({ visible: true });
  279: //   input11.updateData({ visible: true });
  280: //   text16.updateData({ visible: true });
  281: //   text17.updateData({
  282: //     visible: true,
  283: //     text: `Your system:\n\n$\\begin{cases}
  284: //     ${input11.data.text} \\\\
  285: //     ${input12.data.text}
  286: //   \\end{cases}$`,
  287: //   });
  288: //   text18.updateData({ visible: true });
  289: //   input12.updateData({ visible: true });
  290: //   buttonGroup14.updateData({ visible: true });
  291: //   buttonGroup14.updateSingleButton(
  292: //     {
  293: //       disabled: false,
  294: //     },
  295: //     1
  296: //   );
  297: // });
  298: undefined
  299: // //clicking "Go back"
  300: // buttonGroup12.on('click:3', () => {
  301: //   text12.updateData({ visible: false });
  302: //   buttonGroup12.updateData({ visible: false });
  303: //   text11.updateData({ visible: true });
  304: //   buttonGroup11.updateData({ visible: true });
  305: //   ggb1.instance.setFixed('frogSVG', false, true);
  306  //   ggb1.instance.setFixed('cheese1SVG', false, true);

  311  //clicking "lock it in" when graphing lines before writing the inequalities
  312: buttonGroup13.on('click:1', () => {
  313:   //for when frog is successfully captured
  314:   if (
  315:     ggb1.instance.getValue('frogCompletelyInInequality1') &&
  316      ggb1.instance.getValue('frogCompletelyInInequality3') &&

  361  //clicking "Go back" when graphing lines before writing the inequalities
  362: buttonGroup13.on('click:2', () => {
  363:   text13.updateData({ visible: false });
  364:   buttonGroup13.updateData({ visible: false });
  365:   // text12.updateData({ visible: true });
  366:   // buttonGroup12.updateData({ visible: true });
  367:   ggb1.instance.setValue('showLine1', false);
  368    ggb1.instance.setValue('showLine3', false);

  371  //clicking "Check it" when writing inequalities
  372: buttonGroup14.on('click:1', () => {
  373:   buttonGroup14.updateSingleButton(
  374:     {
  375:       disabled: true,
  376:     },
  377:     1
  378:   );
  379: undefined
  380:   finalAnswer1 = formatInput(input11.data.text);
  381:   ggb1.instance.evalCommand('studentInequality1: ' + finalAnswer1);
  382  

  444  
  445: buttonGroup14.on('click:2', () => {
  446:   text15.updateData({ visible: false });
  447:   input11.updateData({ visible: false });
  448:   text16.updateData({ visible: false });
  449:   input12.updateData({ visible: false });
  450:   buttonGroup14.updateData({ visible: false });
  451:   text17.updateData({ visible: false, text: '' });
  452:   text18.updateData({ visible: false, text: '' });
  453:   // text12.updateData({ visible: true });
  454:   // buttonGroup12.updateData({ visible: true });
  455:   ggb1.instance.setFixed('P1A', false, true);
  456    ggb1.instance.setFixed('P1B', false, true);

DIDwhiteboard • A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/archive/slide15ToDelete.js:
  205  //hides select component and shows initial steps for their chosen adventure
  206: buttonGroup1.on("click:1", () => {
  207:   separator1.updateData({ size: "8px" });
  208:   select1.setVisible(false);
  209:   ggb1.updateData({ visible: true });
  210  

  243  //resets screen, allows student to choose different adventure
  244: buttonGroup1.on("click:2", () => {
  245:   setInitialState();
  246: });
  247: undefined
  248: //clicking "Lock it in!" for placement of frog and cheese
  249: buttonGroup11.on("click:1", () => {
  250:   text11.updateData({ visible: false });
  251:   buttonGroup11.updateData({ visible: false });
  252:   text12.updateData({ visible: true });
  253:   buttonGroup12.updateData({ visible: true });
  254:   ggb1.instance.setFixed("frogSVG", true, false);
  255    ggb1.instance.setFixed("cheese1SVG", true, false);

  260  //clicking "Go back" for placement of frog and cheese
  261: buttonGroup11.on("click:2", () => {
  262:   setInitialState();
  263: });
  264: undefined
  265: //clicking "Graph the lines"
  266: buttonGroup12.on("click:1", () => {
  267:   text12.updateData({ visible: false });
  268:   buttonGroup12.updateData({ visible: false });
  269:   text13.updateData({ visible: true });
  270:   buttonGroup13.updateData({ visible: true });
  271:   text14.updateData({ visible: true, text: "" });
  272:   ggb1.instance.setValue("showLine1", true);
  273    ggb1.instance.setValue("showLine3", true);

  276  //clicking "Go right to writing inequalities"
  277: buttonGroup12.on("click:2", () => {
  278:   text12.updateData({ visible: false });
  279:   buttonGroup12.updateData({ visible: false });
  280:   text15.updateData({ visible: true });
  281:   input11.updateData({ visible: true });
  282:   text16.updateData({ visible: true });
  283:   text17.updateData({
  284:     visible: true,
  285:     text: `Your system:\n\n$\\begin{cases}
  286:     ${input11.data.text} \\\\
  287:     ${input12.data.text}
  288:   \\end{cases}$`,
  289:   });
  290:   text18.updateData({ visible: true });
  291:   input12.updateData({ visible: true });
  292:   buttonGroup14.updateData({ visible: true });
  293:   buttonGroup14.updateSingleButton(
  294:     {
  295:       disabled: false,
  296:     },
  297:     1
  298:   );
  299: });
  300: undefined
  301: //clicking "Go back"
  302: buttonGroup12.on("click:3", () => {
  303:   text12.updateData({ visible: false });
  304:   buttonGroup12.updateData({ visible: false });
  305:   text11.updateData({ visible: true });
  306:   buttonGroup11.updateData({ visible: true });
  307:   ggb1.instance.setFixed("frogSVG", false, true);
  308    ggb1.instance.setFixed("cheese1SVG", false, true);

  313  //clicking "lock it in" when graphing lines before writing the inequalities
  314: buttonGroup13.on("click:1", () => {
  315:   //for when frog is successfully captured
  316:   if (
  317:     ggb1.instance.getValue("frogCompletelyInInequality1") &&
  318      ggb1.instance.getValue("frogCompletelyInInequality3") &&

  362  //clicking "Go back" when graphing lines before writing the inequalities
  363: buttonGroup13.on("click:2", () => {
  364:   text13.updateData({ visible: false });
  365:   buttonGroup13.updateData({ visible: false });
  366:   text12.updateData({ visible: true });
  367:   buttonGroup12.updateData({ visible: true });
  368:   ggb1.instance.setValue("showLine1", false);
  369    ggb1.instance.setValue("showLine3", false);

  372  //clicking "Check it" when writing inequalities
  373: buttonGroup14.on("click:1", () => {
  374:   buttonGroup14.updateSingleButton(
  375:     {
  376:       disabled: true,
  377:     },
  378:     1
  379:   );
  380: undefined
  381:   finalAnswer1 = formatInput(input11.data.text);
  382:   ggb1.instance.evalCommand("studentInequality1: " + finalAnswer1);
  383  

  444  
  445: buttonGroup14.on("click:2", () => {
  446:   text15.updateData({ visible: false });
  447:   input11.updateData({ visible: false });
  448:   text16.updateData({ visible: false });
  449:   input12.updateData({ visible: false });
  450:   buttonGroup14.updateData({ visible: false });
  451:   text17.updateData({ visible: false, text: "" });
  452:   text18.updateData({ visible: false, text: "" });
  453:   text12.updateData({ visible: true });
  454:   buttonGroup12.updateData({ visible: true });
  455:   ggb1.instance.setFixed("P1A", false, true);
  456    ggb1.instance.setFixed("P1B", false, true);

DIDwhiteboard • A1/M2/TC L15 - Relationships Between Quantitative Variables/Slide 2.js:
   36  
   37: buttonGroup1.on("click:1", () => {
   38:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
   39:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
   40:   text2.updateData({ visible: true });
   41:   input1.updateData({ visible: true });
   42:   button1.updateData({ visible: true });
   43:   ggb1.instance.setAnimating("time", false);
   44    ggb1.instance.setValue("time", 0);

  104  
  105: buttonGroup1.on("click:2", () => {
  106:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  107:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  108:   ggb1.instance.setVisible("picAlabama", true);
  109    ggb1.instance.setVisible("picArizona", true);

DIDwhiteboard • A1/M2/TC L15 - Relationships Between Quantitative Variables/Slide 7.js:
  38  
  39: buttonGroup1.on('click:1', () => {
  40:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  41:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  42:   ggb1.updateData({ visible: true });
  43    ggb2.updateData({ visible: false });

  45  
  46: buttonGroup1.on('click:2', () => {
  47:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  48:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  49:   ggb1.updateData({ visible: false });
  50    ggb2.updateData({ visible: true });

DIDwhiteboard • A1/M2/TC L15 - Relationships Between Quantitative Variables/Slide 9.js:
  38  
  39: buttonGroup1.on('click:1', () => {
  40:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  41:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  42:   ggb1.updateData({ visible: true });
  43    ggb2.updateData({ visible: false });

  45  
  46: buttonGroup1.on('click:2', () => {
  47:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  48:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  49:   ggb1.updateData({ visible: false });
  50    ggb2.updateData({ visible: true });

DIDwhiteboard • A1/M2/TC L15 - Relationships Between Quantitative Variables/Slide 10.js:
  43  
  44: buttonGroup1.on('click:1', () => {
  45:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  46:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  47:   updateSingleButtonGroup(3, { disabled: false }, buttonGroup1);
  48:   ggb1.updateData({ visible: true });
  49    ggb2.updateData({ visible: false });

  52  
  53: buttonGroup1.on('click:2', () => {
  54:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  55:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  56:   updateSingleButtonGroup(3, { disabled: false }, buttonGroup1);
  57:   ggb1.updateData({ visible: false });
  58    ggb2.updateData({ visible: true });

  61  
  62: buttonGroup1.on('click:3', () => {
  63:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  64:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  65:   updateSingleButtonGroup(3, { disabled: true }, buttonGroup1);
  66:   ggb1.updateData({ visible: false });
  67    ggb2.updateData({ visible: false });

DIDwhiteboard • A1/M2/TC L15 - Relationships Between Quantitative Variables/Slide 11.js:
  38  
  39: buttonGroup1.on('click:1', () => {
  40:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  41:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  42:   ggb1.updateData({ visible: true });
  43    ggb2.updateData({ visible: false });

  45  
  46: buttonGroup1.on('click:2', () => {
  47:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  48:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  49:   ggb1.updateData({ visible: false });
  50    ggb2.updateData({ visible: true });

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 2.js:
  41  
  42: buttonGroup1.on('click:1', () => {
  43:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  44:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  45:   ggb1.updateData({ visible: true });
  46    ggb2.updateData({ visible: false });

  48  
  49: buttonGroup1.on('click:2', () => {
  50:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  51:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  52:   ggb1.updateData({ visible: false });
  53    ggb2.updateData({ visible: true });

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 3.js:
  125  
  126: buttonGroup1.on('click:1', () => {
  127:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  128:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  129:   ggb2.updateData({ visible: true });
  130    ggb3.updateData({ visible: false });

  132  
  133: buttonGroup1.on('click:2', () => {
  134:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  135:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  136:   ggb2.updateData({ visible: false });
  137    ggb3.updateData({ visible: true });

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 8.js:
  30  
  31: buttonGroup1.on('click:1', () => {
  32:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  33:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  34:   ggb1.updateData({ visible: true });
  35    ggb2.updateData({ visible: false });

  37  
  38: buttonGroup1.on('click:2', () => {
  39:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  40:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  41:   ggb1.updateData({ visible: false });
  42    ggb2.updateData({ visible: true });

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 15.js:
  78  
  79: buttonGroup1.on('click:1', () => {
  80:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  81:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  82:   ggb1.updateData({ visible: true });
  83    ggb2.updateData({ visible: false });

  85  
  86: buttonGroup1.on('click:2', () => {
  87:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  88:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  89:   ggb1.updateData({ visible: false });
  90    ggb2.updateData({ visible: true });

DIDwhiteboard • A1/M2/TC L16 - Using Lines to Model Bivariate Quantitative Data/Slide 16.js:
  78  
  79: buttonGroup1.on('click:1', () => {
  80:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  81:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  82:   ggb2.updateData({ visible: true });
  83    ggb3.updateData({ visible: false });

  85  
  86: buttonGroup1.on('click:2', () => {
  87:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  88:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  89:   ggb2.updateData({ visible: false });
  90    ggb3.updateData({ visible: true });

DIDwhiteboard • A1/M2/TC L17 - Modeling Relationships with a Line/Slide 2.js:
  26  
  27: buttonGroup1.on('click:1', () => {
  28:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  29:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  30:   ggb1.updateData({ visible: true });
  31    ggb2.updateData({ visible: false });

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  36:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  37:   ggb1.updateData({ visible: false });
  38    ggb2.updateData({ visible: true });

DIDwhiteboard • A1/M2/TC L17 - Modeling Relationships with a Line/Slide 4.js:
  25  
  26: buttonGroup1.on('click:1', () => {
  27:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  28:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  29:   ggb1.instance.setValue('showPoints', false);
  30  });
  31  
  32: buttonGroup1.on('click:2', () => {
  33:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  34:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  35:   ggb1.instance.setValue('showPoints', true);
  36  });

DIDwhiteboard • A1/M2/TC L17 - Modeling Relationships with a Line/Slide 8.js:
  43  
  44: buttonGroup1.on("click:1", () => {
  45:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  46:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  47:   ggb1.instance.setValue("show", false);
  48  });
  49  
  50: buttonGroup1.on("click:2", () => {
  51:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  52:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  53:   ggb1.instance.setValue("show", true);
  54    text2.updateData({ text: `` });

DIDwhiteboard • A1/M2/TC L19 - Analyzing Residuals Demo/slide1.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setAnimating('translate', false);
  13    ggb1.instance.setValue('translate', 0);

  17  
  18: buttonGroup1.on('click:2', () => {
  19:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  20:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  21:   ggb1.instance.setAnimating('translate', false);
  22    ggb1.instance.setValue('translate', 0);

DIDwhiteboard • A1/M2/TC L19 - Analyzing Residuals Demo/slide2.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setAnimating('angle', false);
  13    ggb1.instance.setValue('angle', 0);

  17  
  18: buttonGroup1.on('click:2', () => {
  19:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  20:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  21:   ggb1.instance.setAnimating('angle', false);
  22    ggb1.instance.setValue('angle', 0);

DIDwhiteboard • A1/M2/TC L19 - Analyzing Residuals Demo/slide3.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setAnimating('time', false);
  13    ggb1.instance.setValue('time', 0);

  17  
  18: buttonGroup1.on('click:2', () => {
  19:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  20:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  21:   ggb1.instance.setAnimating('time', false);
  22    ggb1.instance.setValue('time', 0);

DIDwhiteboard • A1/M2/TC L19 - Analyzing Residuals Demo/slide4.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setValue('show', true);
  13  });
  14  
  15: buttonGroup1.on('click:2', () => {
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  18:   ggb1.instance.setValue('show', false);
  19  });

DIDwhiteboard • A1/M2/TC L20 - Interpreting Correlation/slide2.js:
  40  
  41: buttonGroup1.on('click:1', () => {
  42:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  43:   ggb1.instance.setValue('time', 30);
  44    ggb1.instance.setAnimating('time', true);

  47  
  48: buttonGroup1.on('click:2', () => {
  49:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  50:   ggb1.instance.setValue('time', 30);
  51    ggb1.instance.setAnimating('time', true);

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide9.js:
  45  
  46: buttonGroup1.on('click:1', () => {
  47:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  48:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  49:   ggb1.instance.setVisible('f', true);
  50  });
  51  
  52: buttonGroup1.on('click:2', () => {
  53:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  54:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  55:   ggb1.instance.setVisible('f', false);
  56  });

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide16.js:
  71  
  72: buttonGroup1.on('click:1', () => {
  73:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  74:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  75:   text1.updateData({ visible: true });
  76:   ggb1.instance.setVisible('f_5', true);
  77  });
  78  
  79: buttonGroup1.on('click:2', () => {
  80:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  81:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  82:   text1.updateData({ visible: false });
  83:   ggb1.instance.setVisible('f_5', false);
  84  });

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide19.js:
  33  
  34: buttonGroup1.on("click:1", () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  37:   text1.updateData({ visible: true });
  38:   input1.updateData({ visible: true });
  39:   button1.updateData({ visible: true });
  40:   ggb1.instance.setVisible("eq2", false);
  41    ggb1.instance.setVisible("eq3", false);

  50  
  51: buttonGroup1.on("click:2", () => {
  52:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  53:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  54:   ggb1.instance.setVisible("eq2", true);
  55    ggb1.instance.setVisible("eq3", true);

DIDwhiteboard • A1/M3/TA L03 - The Graph of a Function/slide20.js:
  49  
  50: buttonGroup1.on('click:1', () => {
  51:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  52:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  53:   text1.updateData({ visible: true });
  54:   input1.updateData({ visible: true });
  55:   button1.updateData({ visible: true });
  56:   ggb1.instance.setVisible('eq6', false);
  57    ggb1.instance.setVisible('eq7', false);

  64  
  65: buttonGroup1.on('click:2', () => {
  66:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  67:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  68:   ggb1.instance.setVisible('eq6', true);
  69    ggb1.instance.setVisible('eq7', true);

DIDwhiteboard • A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide1.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  32:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  33:   ggb1.instance.setAnimating("time", true);
  34    ggb1.instance.startAnimation();

  36  
  37: buttonGroup1.on("click:2", () => {
  38:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  39:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  40:   ggb1.instance.stopAnimation();
  41  });
  42  
  43: buttonGroup1.on("click:3", () => {
  44:   ggb1.instance.stopAnimation();
  45    ggb1.instance.setValue("time", 0);

DIDwhiteboard • A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide2.js:
  129  
  130: buttonGroup1.on("click:1", () => {
  131:   if (ggb2.instance.getValue("scrub") == 1) {
  132      ggb2.instance.setCoords("Scrubber", 0, -4);

  139  
  140: buttonGroup1.on("click:2", () => {
  141:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  142:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  143:   ggb2.instance.stopAnimation();
  144  });
  145  
  146: buttonGroup1.on("click:3", () => {
  147:   ggb2.instance.stopAnimation();
  148    ggb2.instance.setCoords("Scrubber", 0, -4);

DIDwhiteboard • A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide3.js:
  110  
  111: buttonGroup1.on("click:1", () => {
  112:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  113:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  114:   ggb2.instance.setAnimating("Scrubber", true);
  115    ggb2.instance.startAnimation();

  117  
  118: buttonGroup1.on("click:2", () => {
  119:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  120:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  121:   ggb2.instance.stopAnimation();
  122  });
  123  
  124: buttonGroup1.on("click:3", () => {
  125:   ggb2.instance.stopAnimation();
  126    ggb2.instance.setCoords("Scrubber", 0, -4);

DIDwhiteboard • A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide5.js:
  21  
  22: buttonGroup1.on("click:1", () => {
  23:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  24:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  25:   ggb2.instance.setAnimating("Scrubber", true);
  26    ggb2.instance.startAnimation();

  28  
  29: buttonGroup1.on("click:2", () => {
  30:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  31:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  32:   ggb2.instance.stopAnimation();
  33  });
  34  
  35: buttonGroup1.on("click:3", () => {
  36:   ggb2.instance.stopAnimation();
  37    ggb2.instance.setCoords("Scrubber", 0, -4);

DIDwhiteboard • A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide6.js:
  25  
  26: buttonGroup1.on("click:1", () => {
  27:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  28:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  29:   ggb2.instance.setAnimating("Scrubber", true);
  30    ggb2.instance.startAnimation();

  32  
  33: buttonGroup1.on("click:2", () => {
  34:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   ggb2.instance.stopAnimation();
  37  });
  38  
  39: buttonGroup1.on("click:3", () => {
  40:   ggb2.instance.stopAnimation();
  41    ggb2.instance.setCoords("Scrubber", 0, -4);

DIDwhiteboard • A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide14.js:
  171  
  172: buttonGroup1.on("click:1", () => {
  173:   if (ggb2.instance.getValue("scrub") == 1) {
  174      ggb2.instance.setCoords("Scrubber", 0, -4);

  181  
  182: buttonGroup1.on("click:2", () => {
  183:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  184:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  185:   ggb2.instance.stopAnimation();
  186  });
  187  
  188: buttonGroup1.on("click:3", () => {
  189:   ggb2.instance.stopAnimation();
  190    ggb2.instance.setCoords("Scrubber", 0, -4);

DIDwhiteboard • A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide16.js:
  171  
  172: buttonGroup1.on("click:1", () => {
  173:   if (ggb2.instance.getValue("scrub") == 1) {
  174      ggb2.instance.setCoords("Scrubber", 0, -4);

  181  
  182: buttonGroup1.on("click:2", () => {
  183:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  184:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  185:   ggb2.instance.stopAnimation();
  186  });
  187  
  188: buttonGroup1.on("click:3", () => {
  189:   ggb2.instance.stopAnimation();
  190    ggb2.instance.setCoords("Scrubber", 0, -4);

DIDwhiteboard • A1/M3/TC L13 - Modeling Elevation as a Function of Time/slide14.js:
  32  
  33: buttonGroup1.on("click:1", () => {
  34:   ggb1.instance.stopAnimation();
  35    ggb1.instance.setValue("time", 0);

DIDwhiteboard • A1/M3/TD L20 - Demo - Reflections/slide1.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  12:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  13:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  14:   ggb1.instance.setValue('refX', true);
  15    ggb1.instance.setValue('refY', false);

  21  
  22: buttonGroup1.on('click:2', () => {
  23:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  24:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  25:   ggb1.instance.setValue('refX', false);
  26    ggb1.instance.setValue('refY', true);

  32  
  33: buttonGroup1.on('click:3', () => {
  34:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  35:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  37:   ggb1.instance.setValue('refX', false);
  38    ggb1.instance.setValue('refY', false);

DIDwhiteboard • A1/M4/TA L03 - Analyzing Functions that Model Projectile Motion/slide1.js:
  411  
  412: buttonGroup1.on("click:1", () => {
  413:   launchInit();
  414:   launchScreenSetup();
  415: });
  416: undefined
  417: buttonGroup1.on("click:2", () => {
  418:   ggbReset();
  419  });

DIDwhiteboard • A1/M4/TA L03 - Analyzing Functions that Model Projectile Motion/slide2.js:
  415  
  416: buttonGroup1.on("click:1", () => {
  417:   launchInit();
  418:   launchScreenSetup();
  419: });
  420: undefined
  421: buttonGroup1.on("click:2", () => {
  422:   ggbReset();
  423  });

DIDwhiteboard • A1/M4/TA L03 - Analyzing Functions that Model Projectile Motion/slide3.js:
  420  
  421: buttonGroup1.on("click:1", () => {
  422:   launchInit();
  423:   launchScreenSetup();
  424: });
  425: undefined
  426: buttonGroup1.on("click:2", () => {
  427:   ggbReset();
  428  });

DIDwhiteboard • A1/M4/TA L03 - Analyzing Functions that Model Projectile Motion/slide4.js:
  400  
  401: buttonGroup1.on("click:1", () => {
  402:   launchInit();
  403:   launchScreenSetup();
  404: });
  405: undefined
  406: buttonGroup1.on("click:2", () => {
  407:   ggbReset();
  408  });

DIDwhiteboard • A1/M4/TB L11 - Graphing Quadratic Functions from Factored Form/slide15.js:
   88  
   89: buttonGroup1.on('click:1', () => {
   90:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
   91:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
   92:   ggb1.instance.evalCommand('SelectObjects()');
   93    ggb1.instance.setValue('show', true);

  129  
  130: buttonGroup1.on('click:2', () => {
  131:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  132:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  133:   ggb1.instance.setValue('show', false);
  134    ggb1.instance.setVisible('slide16a', false);

DIDwhiteboard • A1/M4/TB L11 - Graphing Quadratic Functions from Factored Form/slide16.js:
   88  
   89: buttonGroup1.on('click:1', () => {
   90:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
   91:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
   92:   ggb1.instance.evalCommand('SelectObjects()');
   93    ggb1.instance.setValue('show', true);

  129  
  130: buttonGroup1.on('click:2', () => {
  131:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  132:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  133:   ggb1.instance.setValue('show', false);
  134    ggb1.instance.setVisible('slide17a', false);

DIDwhiteboard • A1/M4/TB L11 - Graphing Quadratic Functions from Factored Form/slide17.js:
   88  
   89: buttonGroup1.on('click:1', () => {
   90:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
   91:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
   92:   ggb1.instance.evalCommand('SelectObjects()');
   93    ggb1.instance.setValue('show', true);

  129  
  130: buttonGroup1.on('click:2', () => {
  131:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  132:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  133:   ggb1.instance.setValue('show', false);
  134    ggb1.instance.setVisible('slide18a', false);

DIDwhiteboard • A1/M4/TB L11 - Graphing Quadratic Functions from Factored Form/slide18.js:
   88  
   89: buttonGroup1.on('click:1', () => {
   90:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
   91:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
   92:   ggb1.instance.evalCommand('SelectObjects()');
   93    ggb1.instance.setValue('show', true);

  129  
  130: buttonGroup1.on('click:2', () => {
  131:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  132:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  133:   ggb1.instance.setValue('show', false);
  134    ggb1.instance.setVisible('slide19a', false);

DIDwhiteboard • A1/M4/TC L13 - Demo - Using Square Roots to Solve Quadratic Equations/slide1.js:
  11  
  12: buttonGroup1.on('click:1', () => {
  13:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  14:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  15:   ggb1.instance.setAnimating('time', false);
  16    ggb1.instance.setValue('time', 0);

  20  
  21: buttonGroup1.on('click:2', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  23:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  24:   ggb1.instance.setAnimating('time', false);
  25    ggb1.instance.setValue('time', 0);

  32  
  33: buttonGroup1.on('click:3', () => {
  34:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  35:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  36:   ggb1.instance.setAnimating('time', false);
  37    ggb1.instance.setValue('time', 0);

DIDwhiteboard • A1/M4/TC L20 - Art with Transformations (Optional)/slide3-4.js:
  36  //lock it in button
  37: buttonGroup2.on("click:1", () => {
  38: 	buttonGroup2.updateSingleButton({ disabled: true }, 1);
  39: 	buttonGroup2.updateSingleButton({ disabled: false }, 2);
  40: 	click++;
  41: 	ggb2.instance.setValue("showPoints", click % 2);
  42  	ggb2.instance.setVisible("eq1", (click % 2) * seeA);

  56  //unlock it button
  57: buttonGroup2.on("click:2", () => {
  58: 	buttonGroup2.updateSingleButton({ disabled: false }, 1);
  59: 	buttonGroup2.updateSingleButton({ disabled: true }, 2);
  60: 	click++;
  61: 	ggb2.instance.setValue("showPoints", click % 2);
  62  	ggb2.instance.setVisible("eq1", (click % 2) * seeA);

  76  //reset button
  77: buttonGroup2.on("click:3", () => {
  78: 	ggb2.instance.reset();
  79  	select1.unselectAll();

DIDwhiteboard • A1/M4/TC L20 - Art with Transformations (Optional)/slide3.js:
  16  //lock it in button
  17: buttonGroup1.on("click:1", () => {
  18: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  19: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  20: 	click++;
  21: 	ggb1.instance.setValue("showPoints", click % 2);
  22  	ggb1.instance.setVisible("eq1", (click % 2) * seeA);

  32  //unlock it button
  33: buttonGroup1.on("click:2", () => {
  34: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  35: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  36: 	click++;
  37: 	ggb1.instance.setValue("showPoints", click % 2);
  38  	ggb1.instance.setVisible("eq1", (click % 2) * seeA);

  48  //reset button
  49: buttonGroup1.on("click:3", () => {
  50: 	ggb1.instance.reset();
  51  	select1.unselectAll();

DIDwhiteboard • A1/M4/TC L20 - Art with Transformations (Optional)/slide4.js:
  198  
  199: buttonGroup1.on("click:1", () => {
  200:   ggb1.instance.setValue("showPoints", false);
  201  });
  202  
  203: buttonGroup1.on("click:2", () => {
  204:   ggb1.instance.reset();
  205    // let data = getFromSlide("slide-4e0ee4b64cf5", "ggb1");

DIDwhiteboard • A1/M4/TC L20 - Art with Transformations (Optional)/slide5.js:
   22  //add row
   23: buttonGroup1.on('click:1', () => {
   24:   /*const createTableCell = (value) => ({
   25: 		editable: true,
   26: 		math: !isNaN(value),
   27: 		value,
   28: 	});
   29: 	const createTableRowsData = (rows) =>
   30: 		rows.map((row) => row.map(createTableCell));
   31: 	let oldRows = [...table1.data.rows];
   32: 	let modRows = oldRows.map((row) => row.map((cell) => cell.value));
   33: 	let newRow = ["", "", "", "", ""];
   34: 	let combinedRows = [...modRows, [...newRow]];
   35: 	const tableRows = createTableRowsData(combinedRows);
   36: 	console.log("Table Rows", tableRows); // For illustrative purposes only
   37: 	// Step 6: Update table
   38: 	table1.updateData({ rows: tableRows });
   39: 	
   40: 	let oldRows = table1.data.rows;
   41: 	let newRow = [];
   42: 	for (let i = 0, L = table1.data.columns.length; i < L; i++) {
   43: 		let sampleCell = {
   44: 			className: false,
   45: 			editable: true,
   46: 			math: true,
   47: 			value: "",
   48: 		};
   49: 		newRow.push(sampleCell);
   50: 	}
   51: 	table1.updateData({ rows: [...oldRows, [...newRow]] });
   52:     */
   53:   rowNumber++;
   54:   table1.addRow();
   55:   table1.updateCell(rowNumber - 1, 0, {
   56:     className: false,
   57:     editable: false,
   58:     math: true,
   59:     value: 'f_{' + rowNumber + '}(x)=',
   60:   });
   61:   table1.updateCell(rowNumber - 1, 3, {
   62:     className: false,
   63:     editable: false,
   64:     math: false,
   65:     value: '${\\le x\\le}$',
   66:   });
   67: });
   68: undefined
   69: //remove row
   70: buttonGroup1.on('click:2', () => {
   71:   ggb1.instance.setVisible('g' + (rowNumber + 1), false);
   72    let newRows = [...table1.data.rows];

   78  //graph it
   79: buttonGroup1.on('click:3', () => {
   80:   for (let i = 2, L = 2 + table1.data.rows.length; i < L; i++) {
   81:     if (
   82:       table1.getCell(i - 2, 1).value.includes('x') ||
   83:       /\w/.test(table1.getCell(i - 2, 1).value == false)
   84:     ) {
   85:       // console.log(/\w/.test(table1.getCell(i - 2, 1).value));
   86:       let frac = table1.getCell(i - 2, 1).value.replace(/\\frac{/, '(');
   87:       let fracMid = frac.replace(/\}\{/, ')/(');
   88:       let leftParen = fracMid.replace(/\\left/g, '');
   89:       let rightParen = leftParen.replace(/\\right/g, '');
   90:       let absLeft = rightParen.replace(/\|/, 'abs(');
   91:       let absRight = absLeft.replace(/\|/, ')');
   92:       let squirtLeft = absRight.replace(/\\sqrt\{/, 'sqrt(');
   93:       let cbrtLeft = squirtLeft.replace(/\\sqrt\[3\]\{/, 'cbrt(');
   94:       let brackRight = cbrtLeft.replace(/\}/, ')');
   95:       let brackLeft = brackRight.replace(/\{/, '(');
   96:       let finalAnswer = '"' + brackLeft.replace(/\{/, '(') + '"';
   97:       // console.log("replaced: " + finalAnswer);
   98:       ggb1.instance.evalCommand(
   99          'ParseToFunction(A' + i + ',' + finalAnswer + ')'

  133  //remove row
  134: buttonGroup1.on('click:4', () => {
  135:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  136:   buttonGroup1.updateSingleButton({ disabled: false }, 5);
  137:   click++;
  138:   /*if (click % 2 == 1) {
  139:     buttonGroup1.updateSingleButton({ text: "All Done!" }, 4);
  140:   } else {
  141:     buttonGroup1.updateSingleButton({ text: "Unlock It" }, 4);
  142:   }*/
  143:   let hideyPoints = ggb1.instance.getAllObjectNames('point');
  144    // console.log(hideyPoints);

  152  
  153: buttonGroup1.on('click:5', () => {
  154:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  155:   buttonGroup1.updateSingleButton({ disabled: true }, 5);
  156:   click++;
  157:   /* if (click % 2 == 1) {
  158:     buttonGroup1.updateSingleButton({ text: "All Done!" }, 4);
  159:   } else {
  160:     buttonGroup1.updateSingleButton({ text: "Unlock It" }, 4);
  161:   }*/
  162:   let hideyPoints = ggb1.instance.getAllObjectNames('point');
  163    // console.log(hideyPoints);

DIDwhiteboard • A1/M4/TD L23 - Creating Equations of Quadratic Functions to Model Contexts/slide1.js:
  33  
  34: buttonGroup1.on("click:1", () => {
  35:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  36:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  37:   ggb1.instance.setAnimating("time", false);
  38    ggb1.instance.setValue("time", 0.1);

  42  
  43: buttonGroup1.on("click:2", () => {
  44:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  45:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  46:   ggb1.instance.stopAnimation();
  47    ggb1.instance.setAnimating("time", false);

DIDwhiteboard • A1/M4/TD L23 - Creating Equations of Quadratic Functions to Model Contexts/slide5.js:
  65  
  66: buttonGroup1.on("click:1", () => {
  67:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  68:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  69:   ggb2.updateData({ visible: true });
  70    ggb2.instance.setAnimating("time", false);

  75  
  76: buttonGroup1.on("click:2", () => {
  77:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  78:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  79:   ggb2.instance.stopAnimation();
  80    ggb2.instance.setAnimating("time", false);

DIDwhiteboard • A1/M5/TA L07 - Sierpinski Triangle/slide1.js:
  26  
  27: buttonGroup1.on('click:1', () => {
  28:   ggbComps[parseInt(select1.data.selected)].instance.stopAnimation();
  29    ggbComps[parseInt(select1.data.selected)].instance.setValue('time1', 0);

  36  
  37: buttonGroup1.on('click:2', () => {
  38:   ggbComps[parseInt(select1.data.selected)].instance.setValue(
  39      'show',

  43  
  44: buttonGroup1.on('click:3', () => {
  45:   ggbComps[parseInt(select1.data.selected)].instance.stopAnimation();
  46    ggbComps[parseInt(select1.data.selected)].instance.setValue('time1', 0);

DIDwhiteboard • A1/M5/TA L07 - Sierpinski Triangle/toDelete/slide1.js:
   6  
   7: buttonGroup1.on("click:1", () => {
   8:   ggb1.instance.stopAnimation();
   9    ggb1.instance.setValue("time1", 0);

  13  
  14: buttonGroup1.on("click:2", () => {
  15:   ggb1.instance.setValue("show", ggb1.instance.getValue("show") + 1);
  16  });
  17  
  18: buttonGroup1.on("click:3", () => {
  19:   ggb1.instance.stopAnimation();
  20    ggb1.instance.setValue("time1", 0);

DIDwhiteboard • A1/M5/TA L07 - Sierpinski Triangle/toDelete/slide2.js:
   6  
   7: buttonGroup1.on("click:1", () => {
   8:   ggb1.instance.stopAnimation();
   9    ggb1.instance.setValue("time1", 0);

  13  
  14: buttonGroup1.on("click:2", () => {
  15:   ggb1.instance.setValue("show", ggb1.instance.getValue("show") + 1);
  16  });
  17  
  18: buttonGroup1.on("click:3", () => {
  19:   ggb1.instance.stopAnimation();
  20    ggb1.instance.setValue("time1", 0);

DIDwhiteboard • A1/M5/TA L07 - Sierpinski Triangle/toDelete/slide3.js:
   6  
   7: buttonGroup1.on("click:1", () => {
   8:   ggb1.instance.stopAnimation();
   9    ggb1.instance.setValue("time1", 0);

  13  
  14: buttonGroup1.on("click:2", () => {
  15:   ggb1.instance.setValue("show", ggb1.instance.getValue("show") + 1);
  16  });
  17  
  18: buttonGroup1.on("click:3", () => {
  19:   ggb1.instance.stopAnimation();
  20    ggb1.instance.setValue("time1", 0);

DIDwhiteboard • A1/M5/TB L08 - Exponential Functions/slide2.js:
  27  
  28: buttonGroup1.on("click:1", () => {
  29:   ggb1.instance.evalCommand("RunClickScript(dec)");
  30    displayVals();

  32  
  33: buttonGroup1.on("click:2", () => {
  34:   ggb1.instance.evalCommand("RunClickScript(inc)");
  35    displayVals();

DIDwhiteboard • A1/M5/TB L08 - Exponential Functions/slide4.js:
  22  
  23: buttonGroup1.on("click:1", () => {
  24:   ggb1.instance.evalCommand("RunClickScript(dec)");
  25    displayVals();

  27  
  28: buttonGroup1.on("click:2", () => {
  29:   ggb1.instance.evalCommand("RunClickScript(inc)");
  30    displayVals();

DIDwhiteboard • A1/M5/TB L08 - Exponential Functions/slide11.js:
  20  
  21: buttonGroup1.on("click:1", () => {
  22:   ggb1.instance.evalCommand("RunClickScript(dec)");
  23    // let gen = ggb1.instance.getValue("gen");

  37  
  38: buttonGroup1.on("click:2", () => {
  39:   let oldRows = [...table1.data.rows];
  40:   ggb1.instance.evalCommand("RunClickScript(inc)");
  41    // let gen = ggb1.instance.getValue("gen");

DIDwhiteboard • A1/M5/TB L08 - Exponential Functions/slide12.js:
  27  
  28: buttonGroup1.on("click:1", () => {
  29:   ggb1.instance.evalCommand("RunClickScript(dec)");
  30    // let gen = ggb1.instance.getValue("gen");

  49  
  50: buttonGroup1.on("click:2", () => {
  51:   let oldRows = [...table1.data.rows];
  52:   ggb1.instance.evalCommand("RunClickScript(inc)");
  53    // let gen = ggb1.instance.getValue("gen");

DIDwhiteboard • A1/M5/TB L08 - Exponential Functions/slide14.js:
  16  
  17: buttonGroup1.on("click:1", () => {
  18:   ggb1.instance.stopAnimation();
  19    ggb1.instance.setValue("time", 0);

  26  
  27: buttonGroup1.on("click:2", () => {
  28:   ggb1.instance.stopAnimation();
  29    ggb1.instance.setValue("time", 0);

DIDwhiteboard • A1/M5/TC L16 - Exponential Growth/slide5.js:
  72  
  73: buttonGroup1.on('click:1', () => {
  74:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  75:   more();
  76:   ggb2.instance.evalCommand('RunClickScript(inc)');
  77    if (ggb2.instance.getValue('gen') > 9) {

  82  
  83: buttonGroup1.on('click:2', () => {
  84:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  85:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  86:   button1.updateData({ disabled: true });
  87:   let allPoints = ggb1.instance.getAllObjectNames('point');
  88    let madePoints = allPoints.filter(

DIDwhiteboard • A1/M5/TC L17 - Demo - Exponential Decay/slide1.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   less();
  13:   ggb2.instance.setValue('xmax', ggb2.instance.getValue('xmax') + 1);
  14  });
  15  
  16: buttonGroup1.on('click:2', () => {
  17:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  18:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  19:   reset();
  20:   ggb1.instance.evalCommand('pointList={500}');
  21    ggb1.instance.evalCommand('clickList={0}');

DIDwhiteboard • A1/M6/A1 M6 TB L6 - Verifying Maximum Profit.js:
  44  
  45: buttonGroup1.on("click:1", () => {
  46:     buttonGroup1.updateSingleButton({disabled: true}, 1);
  47:     buttonGroup1.updateSingleButton({disabled: false}, 2);
  48:     buttonGroup1.updateSingleButton({disabled: false}, 3);
  49:     ggb1.instance.setAnimating("v", true);
  50      ggb1.instance.startAnimation();

  52  
  53: buttonGroup1.on("click:2", () => {
  54:     buttonGroup1.updateSingleButton({disabled: false}, 1);
  55:     buttonGroup1.updateSingleButton({disabled: true}, 2);
  56:     ggb1.instance.stopAnimation();
  57  })
  58  
  59: buttonGroup1.on("click:3", () => {
  60:     buttonGroup1.updateSingleButton({disabled: true}, 3);
  61:     buttonGroup1.updateSingleButton({disabled: true}, 2);
  62:     buttonGroup1.updateSingleButton({disabled: false}, 1);
  63:     ggb1.instance.stopAnimation();
  64      ggb1.instance.setValue("v", 0);

  66  
  67: buttonGroup2.on("click:1", () => {
  68:     ggb1.instance.setValue("v", ggb1.instance.getValue("v") - 0.25);
  69  })
  70: buttonGroup2.on("click:2", () => {
  71:     ggb1.instance.setValue("v", ggb1.instance.getValue("v") + 0.25);
  72  })

DIDwhiteboard • A1/M6/TA L01 - Analyzing Paint Splatters/slide2.js:
   60  
   61: buttonGroup1.on("click:1", () => {
   62:   ggb1.instance.setVisible("blueBal1", true);
   63    ggb1.instance.setVisible("redBal1", false);

   84  });
   85: buttonGroup1.on("click:2", () => {
   86:   ggb1.instance.setVisible("blueBal1", false);
   87    ggb1.instance.setVisible("redBal1", true);

  108  });
  109: buttonGroup1.on("click:3", () => {
  110:   ggb1.instance.setVisible("blueBal1", false);
  111    ggb1.instance.setVisible("redBal1", false);

  132  });
  133: buttonGroup1.on("click:4", () => {
  134:   ggb1.instance.setVisible("blueBal1", false);
  135    ggb1.instance.setVisible("redBal1", false);

  157  
  158: buttonGroup1.on("click:5", () => {
  159:   ggb1.instance.setVisible("blueBal1", false);
  160    ggb1.instance.setVisible("redBal1", false);

  192  
  193: buttonGroup2.on("click:1", () => {
  194:   count += 1;
  195:   // console.log(count);
  196:   ggb1.instance.setVisible("balloonDilation", false);
  197    ggb1.instance.setVisible("faucet'", false);

  290  
  291: buttonGroup2.on("click:2", () => {
  292:   count = 0;
  293:   ggb1.instance.setVisible("blueSplat'", false);
  294    ggb1.instance.setVisible("redSplat'", false);

DIDwhiteboard • A1/M6/TA L01 - Analyzing Paint Splatters/slide4.js:
   52  
   53: buttonGroup1.on('click:1', () => {
   54:   ggb1.instance.setCoords(
   55      'T',

  102  
  103: buttonGroup1.on('click:2', () => {
  104:   ggb1.instance.setCoords(
  105      'T',

  151  });
  152: buttonGroup1.on('click:3', () => {
  153:   ggb1.instance.setCoords(
  154      'T',

  200  });
  201: buttonGroup1.on('click:4', () => {
  202:   ggb1.instance.setCoords(
  203      'T',

  249  });
  250: buttonGroup1.on('click:5', () => {
  251:   ggb1.instance.setCoords(
  252      'T',

  309  
  310: buttonGroup2.on('click:1', () => {
  311:   count += 1;
  312:   ggb1.instance.setVisible('balloonDilation', false);
  313    ggb1.instance.setVisible("faucet'", false);

  407  
  408: buttonGroup2.on('click:2', () => {
  409:   ggb1.instance.evalCommand('RunClickScript(button1)');
  410    buttonGroup2.updateSingleButton({ disabled: true }, 2);

  429  
  430: buttonGroup2.on('click:3', () => {
  431:   ggb1.instance.evalCommand('RunClickScript(button1)');
  432    buttonGroup2.updateSingleButton({ disabled: false }, 2);

DIDwhiteboard • A1/M6/TA L01 - Analyzing Paint Splatters/slide5.js:
  100  
  101: buttonGroup1.on('click:1', () => {
  102:   ggb1.instance.setCoords(
  103      'T',

  144  
  145: buttonGroup1.on('click:2', () => {
  146:   ggb1.instance.setCoords(
  147      'T',

  188  });
  189: buttonGroup1.on('click:3', () => {
  190:   ggb1.instance.setCoords(
  191      'T',

  232  });
  233: buttonGroup1.on('click:4', () => {
  234:   ggb1.instance.setCoords(
  235      'T',

  276  });
  277: buttonGroup1.on('click:5', () => {
  278:   ggb1.instance.setCoords(
  279      'T',

  331  
  332: buttonGroup2.on('click:1', () => {
  333:   count += 1;
  334:   ggb1.instance.setVisible('balloonDilation', false);
  335    ggb1.instance.setVisible("faucet'", false);

  418  
  419: buttonGroup2.on('click:2', () => {
  420:   ggb1.instance.evalCommand('RunClickScript(button1)');
  421    buttonGroup2.updateSingleButton({ disabled: true }, 2);

  427  
  428: buttonGroup2.on('click:3', () => {
  429:   ggb1.instance.evalCommand('RunClickScript(button1)');
  430    buttonGroup2.updateSingleButton({ disabled: false }, 2);

DIDwhiteboard • A1/M6/TA L01 - Analyzing Paint Splatters/slide9.js:
  76  
  77: buttonGroup1.on('click:1', () => {
  78:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  79:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  80:   ggb1.updateData({ visible: true });
  81    ggb2.updateData({ visible: false });

  83  
  84: buttonGroup1.on('click:2', () => {
  85:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  86:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  87:   ggb1.updateData({ visible: false });
  88    ggb2.updateData({ visible: true });

DIDwhiteboard • A1/M6/TA L01 - Analyzing Paint Splatters/slide10.js:
  72  
  73: buttonGroup1.on("click:1", () => {
  74:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  75:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  76:   ggb1.instance.setVisible("shortenedQuadratic", true);
  77    ggb1.instance.setVisible("shortenedExponential", false);

  81  
  82: buttonGroup1.on("click:2", () => {
  83:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  84:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  85:   ggb1.instance.setVisible("shortenedQuadratic", false);
  86    ggb1.instance.setVisible("shortenedExponential", true);

DIDwhiteboard • G2/G2 M1 TB L7 - Measuring Objects.js:
  113  //measure button
  114: buttonGroup1.on("click:1", () => {
  115: 	if (rulers != 0 || blocks != 0) {
  116: 		ggb1.instance.evalCommand("RunClickScript(button1)");
  117  		buttonGroup1.updateSingleButton({ disabled: true }, 1);

  124  //pause/play button
  125: buttonGroup1.on("click:2", () => {
  126: 	flip++;
  127: 	if (flip % 2 == 0) {
  128: 		ggb1.instance.startAnimation();
  129  		buttonGroup1.updateSingleButton({ text: "Pause" }, 2);

  136  //save button
  137: buttonGroup1.on("click:3", () => {
  138: 	ggb1.instance.evalCommand("RunClickScript(button3)");
  139  	saved = true;

  144  //clear button
  145: buttonGroup1.on("click:4", () => {
  146: 	ggb1.instance.evalCommand("RunClickScript(button2)");
  147  	saved = false;

  155  //choose another button
  156: buttonGroup1.on("click:5", () => {
  157: 	select1.setVisible(true);
  158: 	button1.updateData({ visible: true });
  159: 	ggb1.updateData({ visible: false });
  160  	buttonGroup1.updateData({ visible: false });

DIDwhiteboard • G2/G2 M1 TB L8 - Measuring Stick.js:
   3  //measure button
   4: buttonGroup1.on("click:1", () => {
   5: 	measure();
   6: });
   7: undefined
   8: //pause/play button
   9: buttonGroup1.on("click:2", () => {
  10: 	stop();
  11: 	flip++;
  12: 	if (flip % 2 == 0) {
  13: 		buttonGroup1.updateSingleButton({ text: "Pause" }, 2);
  14: 	} else {
  15: 		buttonGroup1.updateSingleButton({ text: "Play" }, 2);
  16: 	}
  17: });
  18: undefined
  19: //reset button
  20: buttonGroup1.on("click:3", () => {
  21: 	reset();
  22: });
  23: undefined
  24: ggb1.instance.registerObjectUpdateListener("time", bounce);
  25  ggb1.instance.registerObjectUpdateListener("shift", shift);

DIDwhiteboard • G2/G2 M1 TF L24 - Place Value with Sticks.js:
   2  
   3: buttonGroup1.on("click:1", () => {
   4: 	ggb1.instance.setValue("StartingNum", input1.data.text);
   5  	getSet();

   7  
   8: buttonGroup1.on("click:2", () => {
   9: 	reset();
  10: });
  11: undefined
  12: autorun(()=>{
  13: if (input1.data.text==""){
  14: buttonGroup1.updateSingleButton({disabled: true},1);
  15: }else{
  16: buttonGroup1.updateSingleButton({disabled: false},1);
  17: }
  18: })
  19: undefined
  20: ggb1.instance.registerClientListener(copy);
  21  ggb1.instance.registerObjectUpdateListener("time", bundle);

DIDwhiteboard • G2/G2 M3 TD L15 - Timer.js:
  13  //start clock button
  14: buttonGroup1.on("click:1", () => {
  15: 	tick();
  16: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  17: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  18: });
  19: undefined
  20: //stop clock button
  21: buttonGroup1.on("click:2", () => {
  22: 	stopIt();
  23: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  24: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  25: 	buttonGroup1.updateSingleButton({ disabled: false }, 3);
  26: });
  27: undefined
  28: //reset clock button
  29: buttonGroup1.on("click:3", () => {
  30: 	ggb1.instance.unregisterObjectUpdateListener("MinutePoint");
  31  	ggb1.instance.unregisterObjectUpdateListener("SecondPoint");

  55  //run for a minute button
  56: buttonGroup1.on("click:4", () => {
  57: 	ggb1.instance.setCoords("SecondPoint", 0.01, 0.98);
  58  	tick();

DIDwhiteboard • G3/G3 M2 TD L23 - Subtraction HTO.js:
  33  
  34: buttonGroup1.on("click:1", () => {
  35: 	ggb1.updateData({ flag: false });
  36  	ggb1.instance.setValue("subt1", number1);

  45  
  46: buttonGroup1.on("click:2", () => {
  47: 	ggb1.instance.setValue("step", 2);
  48  	ggb1.instance.evalCommand("RunClickScript(button1)");

  51  
  52: buttonGroup1.on("click:3", () => {
  53: 	ggb1.instance.evalCommand("RunClickScript(reset)");
  54  	ggb1.instance.setValue("step", 3);

DIDwhiteboard • G3/G3 M3 TC L16 - Times Table Pattern.js:
  47  //Show all numbers
  48: buttonGroup1.on("click:1", () => {
  49: 	for (let i = 1; i < 170; i++) {
  50: 		ggb1.instance.setVisible("F" + i, true);
  51  	}

  56  //Clear all numbers
  57: buttonGroup1.on("click:2", () => {
  58: 	for (let i = 1; i < 170; i++) {
  59: 		ggb1.instance.setVisible("F" + i, false);
  60  	}

  70  //Reveal
  71: buttonGroup2.on("click:1", () => {
  72: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  73: 	ggb1.instance.setValue("revealOne", true);
  74  	buttonGroup2.updateSingleButton({ disabled: true }, 1);

  93  //Reveal other facts
  94: buttonGroup2.on("click:2", () => {
  95: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  96: 	ggb1.instance.setValue("reveal", true);
  97  	buttonGroup2.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • G3/G3 M3 TD L21 - Associative Property Array.js:
   55  //break apart a factor button
   56: buttonGroup1.on("click:1", () => {
   57: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
   58: 	if (
   59: 		typeof parensFirst != undefined &&
   60: 		parensFirst[2] / 10 == Math.floor(parensFirst[2] / 10)
   61: 	) {
   62: 		buttonGroup2.updateSingleButton(
   63: 			{
   64: 				text: `$${parensFirst[1]}\\times ${
   65: 					parensFirst[2] / 10
   66: 				}\\times 10$`,
   67: 			},
   68: 			1
   69: 		);
   70: undefined
   71: 		buttonGroup2.updateSingleButton(
   72: 			{
   73: 				text: `$${parensFirst[1]}\\times ( ${
   74: 					parensFirst[2] / 10
   75: 				}\\times 10)$`,
   76: 			},
   77: 			2
   78: 		);
   79: 		buttonGroup2.updateSingleButton(
   80: 			{
   81: 				text: `$(${parensFirst[1]}\\times ${
   82: 					parensFirst[2] / 10
   83: 				})\\times 10$`,
   84: 			},
   85: 			3
   86: 		);
   87: 		ggb1.instance.setValue("factor1", parensFirst[2] / 10);
   88  		ggb1.instance.setValue("factor2", parensFirst[1]);

  104  //reset
  105: buttonGroup1.on("click:2", () => {
  106: 	ggb1.instance.reset();
  107  	buttonGroup2.updateData({ visible: false });

  122  
  123: buttonGroup2.on("click:1", () => {
  124: 	ggb1.instance.reset();
  125  	ggb1.instance.setValue("factorCase", 1);

  144  });
  145: buttonGroup2.on("click:2", () => {
  146: 	ggb1.instance.reset();
  147  	ggb1.instance.setValue("factorCase", 2);

  160  });
  161: buttonGroup2.on("click:3", () => {
  162: 	ggb1.instance.reset();
  163  	ggb1.instance.setValue("factorCase", 3);

DIDwhiteboard • G3/Multiply by 10 PVC NO CHOICE BUTTONS.js:
  38  
  39: buttonGroup1.on("click:1", () => {
  40: 	ggb1.instance.reset();
  41  	buttonGroup1.updateSingleButton({ disabled: false }, 2);

  71  
  72: buttonGroup1.on("click:2", () => {
  73: 	ggb1.instance.reset();
  74  	input1.updateData({ text: "" });

DIDwhiteboard • G3/Multiply by 10 PVC WITH CHOICE BUTTONS.js:
   42  
   43: buttonGroup1.on("click:1", () => {
   44: 	if (typeof parensFirst != undefined) {
   45: 		buttonGroup2.updateSingleButton(
   46: 			{
   47: 				text: `$${parensFirst[1]}\\cdot ${
   48: 					parensFirst[2] / 10
   49: 				}\\cdot 10$`,
   50: 			},
   51: 			1
   52: 		);
   53: 		buttonGroup2.updateSingleButton(
   54: 			{
   55: 				text: `$${parensFirst[1]}\\cdot( ${
   56: 					parensFirst[2] / 10
   57: 				}\\cdot 10)$`,
   58: 			},
   59: 			2
   60: 		);
   61: 		buttonGroup2.updateSingleButton(
   62: 			{
   63: 				text: `$(${parensFirst[1]}\\cdot ${
   64: 					parensFirst[2] / 10
   65: 				})\\cdot 10$`,
   66: 			},
   67: 			3
   68: 		);
   69: 		ggb1.instance.setValue("factor1", parensFirst[1]);
   70  		ggb1.instance.setValue("factor2", parensFirst[2] / 10);

   79  
   80: buttonGroup1.on("click:2", () => {
   81: 	ggb1.instance.reset();
   82  

   91  
   92: buttonGroup2.on("click:1", () => {
   93: 	ggb1.instance.setValue("factorCase", 1);
   94  	ggb1.instance.setValue("factor1", 1);

   97  });
   98: buttonGroup2.on("click:2", () => {
   99: 	ggb1.instance.setValue("factorCase", 2);
  100  	ggb1.instance.setValue("factor1", parensFirst[1]);

  103  });
  104: buttonGroup2.on("click:3", () => {
  105: 	ggb1.instance.setValue("factorCase", 3);
  106  	ggb1.instance.setValue("factor1", 10);

DIDwhiteboard • G3/PVC multiply by 10.js:
   42  
   43: buttonGroup1.on("click:1", () => {
   44: 	if (typeof parensFirst != undefined) {
   45: 		buttonGroup2.updateSingleButton(
   46: 			{
   47: 				text: `$${parensFirst[1]}\\cdot ${
   48: 					parensFirst[2] / 10
   49: 				}\\cdot 10$`,
   50: 			},
   51: 			1
   52: 		);
   53: 		buttonGroup2.updateSingleButton(
   54: 			{
   55: 				text: `$${parensFirst[1]}\\cdot( ${
   56: 					parensFirst[2] / 10
   57: 				}\\cdot 10)$`,
   58: 			},
   59: 			2
   60: 		);
   61: 		buttonGroup2.updateSingleButton(
   62: 			{
   63: 				text: `$(${parensFirst[1]}\\cdot ${
   64: 					parensFirst[2] / 10
   65: 				})\\cdot 10$`,
   66: 			},
   67: 			3
   68: 		);
   69: 		ggb1.instance.setValue("factor1", parensFirst[1]);
   70  		ggb1.instance.setValue("factor2", parensFirst[2] / 10);

   79  
   80: buttonGroup1.on("click:2", () => {
   81: 	ggb1.instance.reset();
   82  

   91  
   92: buttonGroup2.on("click:1", () => {
   93: 	ggb1.instance.setValue("factorCase", 1);
   94  	ggb1.instance.setValue("factor1", 1);

   97  });
   98: buttonGroup2.on("click:2", () => {
   99: 	ggb1.instance.setValue("factorCase", 2);
  100  	ggb1.instance.setValue("factor1", parensFirst[1]);

  103  });
  104: buttonGroup2.on("click:3", () => {
  105: 	ggb1.instance.setValue("factorCase", 3);
  106  	ggb1.instance.setValue("factor1", 10);

DIDwhiteboard • G4/G4 M1 TB L6 - Multiply by 10.js:
  18  //make points on first button click
  19: buttonGroup1.on("click:1", () => {
  20: 	//popul8();
  21: });
  22: undefined
  23: //multiply points by 10 on second button click until points are in millions region
  24: buttonGroup1.on("click:1", () => {
  25: 	clickCount++;
  26: 	moveIt();
  27: });
  28: undefined
  29: //reset the applet on third button click
  30: buttonGroup1.on("click:2", () => {
  31: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  32: 	input1.updateData({ text: "" });
  33: 	select1.unselectAll();
  34: 	reset();
  35: 	clickCount = 0;
  36: });
  37: undefined
  38: autorun(() => {
  39: 	let checkPoint = ggb1.innerData["MovingPoint0"];
  40  	console.log(checkPoint);

DIDwhiteboard • G4/G4 M1 TD L16 - PVC Addition.js:
  14  });
  15: buttonGroup1.on("click:1", () => {
  16: 	boundIt(fib1, 0, 0, 4999999);
  17: 	boundIt(fib1, 1, 0, 4999999);
  18: 	ggb1.instance.setValue("add1", fib1.getInput(0).text.replaceAll(",", ""));
  19  	ggb1.instance.setValue("add2", fib1.getInput(1).text.replaceAll(",", ""));

  26  
  27: buttonGroup1.on("click:2", () => {
  28: 	organize();
  29: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  30: });
  31: undefined
  32: buttonGroup1.on("click:3", () => {
  33: 	bundle();
  34: });
  35: undefined
  36: buttonGroup1.on("click:4", () => {
  37: 	reset();
  38: 	fib1.updateInput(0, { text: "" });
  39: 	fib1.updateInput(1, { text: "" });
  40: 	buttonGroup1.updateSingleButton({ disabled: true }, 4);
  41: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  42: 	buttonGroup1.updateSingleButton({ disabled: true }, 3);
  43: });
  44: undefined
  45: ggb1.instance.registerObjectUpdateListener("time", moveIt);
  46  

DIDwhiteboard • G4/G4 M1 TD L18 - PVC Subtraction.js:
  14  
  15: buttonGroup1.on("click:1", () => {
  16: 	boundIt(fib1, 0, 0, 9999999);
  17: 	if (fib1.getInput(0)) {
  18: 		boundIt(fib1, 1, 0, fib1.getInput(0).text.replaceAll(",", ""));
  19: 	}
  20: 	ggb1.instance.setValue("subt1", fib1.getInput(0).text.replaceAll(",", ""));
  21  	ggb1.instance.setValue("subt2", fib1.getInput(1).text.replaceAll(",", ""));

  40  
  41: buttonGroup1.on("click:2", () => {
  42: 	matchIt();
  43: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  44: });
  45: undefined
  46: buttonGroup1.on("click:3", () => {
  47: 	reset();
  48: 	fib1.updateInput(0, { text: "" });
  49: 	fib1.updateInput(1, { text: "" });
  50: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  51: 	buttonGroup1.updateSingleButton({ disabled: true }, 3);
  52: });
  53: undefined
  54: ggb1.instance.registerClientListener(breakOut);
  55  

DIDwhiteboard • G4/G4 M2 TB L5 - PVC Multiplication.js:
  106  
  107: buttonGroup1.on("click:1", () => {
  108: 	boundIt(fib1, 0, 0, 9);
  109: 	boundIt(fib1, 1, 0, 99);
  110: 	ggb1.instance.setValue("multiplier", fib1.getInput(0).text);
  111  	ggb1.instance.setValue("multiplicand", fib1.getInput(1).text);

  115  });
  116: buttonGroup1.on("click:2", () => {
  117: 	reset();
  118: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  119: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  120: 	select1.selectOption("1");
  121: });
  122: undefined
  123: select1.on("change", () => {
  124: 	console.log(select1.data.selected);
  125: 	if (select1.data.selected == "0") {
  126: 		text1.updateData({ visible: true });
  127: 	} else {
  128: 		text1.updateData({ visible: false });
  129: 	}
  130: });
  131: undefined
  132: ggb1.instance.registerClientListener(breakOut);
  133  

DIDwhiteboard • G4/G4 M2 TC L15 - PVC Division.js:
  15  });
  16: buttonGroup1.on("click:1", () => {
  17: 	popul8();
  18: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  19: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  20: 	buttonGroup1.updateSingleButton({ disabled: false }, 3);
  21: });
  22: buttonGroup1.on("click:2", () => {
  23: 	share();
  24: });
  25: buttonGroup1.on("click:3", () => {
  26: 	reset();
  27: 	buttonGroup1.updateSingleButton({ disabled: true }, 3);
  28: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  29: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  30: });
  31: undefined
  32: //global variables for all of the functions
  33: var rowAdderOnes = 0;
  34: var rowAdderTens = 0;
  35: var labelTens = ggb1.instance.getValue("tensCount");
  36  var labelOnes = ggb1.instance.getValue("onesCount");

DIDwhiteboard • G4/G4 M2 TD L18 - Arranging Rectangle Side Lengths.js:
  27  
  28: buttonGroup1.on("click:1", () => {
  29: 	createSides();
  30: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  31: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  32: 	buttonGroup1.updateSingleButton({ disabled: false }, 3);
  33: });
  34: buttonGroup1.on("click:2", () => {
  35: 	moveSides();
  36: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37: });
  38: buttonGroup1.on("click:3", () => {
  39: 	reset();
  40: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  41: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  42: 	buttonGroup1.updateSingleButton({ disabled: true }, 3);
  43: });
  44: undefined
  45: fib1.on("change", ({ values }) => {
  46: 	reset();
  47: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  48: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  49: 	buttonGroup1.updateSingleButton({ disabled: true }, 3);
  50: 	boundIt(fib1, 0, 0, 15);
  51: 	boundIt(fib1, 1, 0, 15);
  52: 	ggb1.instance.setValue("length", values[0].text);
  53  	ggb1.instance.setValue("width", values[1].text);

DIDwhiteboard • G4/G4 M3 TC L9 - PVC Multiplication 3 Column.js:
  132  
  133: buttonGroup1.on("click:1", () => {
  134: 	boundIt(fib1, 0, 0, 9);
  135: 	boundIt(fib1, 1, 0, 999);
  136: 	ggb1.instance.setValue("multiplier", fib1.getInput(0).text);
  137  	ggb1.instance.setValue("multiplicand", fib1.getInput(1).text);

  141  });
  142: buttonGroup1.on("click:2", () => {
  143: 	reset();
  144: 	fib1.updateInput(0, {text: ""});
  145: 	fib1.updateInput(1, {text: ""});
  146: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  147: 	buttonGroup1.updateSingleButton({disabled: true}, 2);
  148: 	select1.selectOption("1");
  149: });
  150: undefined
  151: select1.on("change", () => {
  152: 	if (select1.data.selected == "0") {
  153: 		text1.updateData({visible: true});
  154: 	} else {
  155: 		text1.updateData({visible: false});
  156: 	}
  157: });
  158: undefined
  159: function multiplyIt() {
  160: 	reset();
  161: 	//sets the amount of vertical space between sets of numbers so that there's one empty line between each set
  162: 	var spacerH = 3;
  163: 	var spacerT = 3;
  164: 	var spacerO = 3;
  165: 	if (
  166: 		ggb1.instance.getValue("onesCount") < 6 &&
  167  		ggb1.instance.getValue("tensCount") < 6 &&

DIDwhiteboard • G4/G4 M5 TA L4 - Decimal PVC Tenths and Ones.js:
   7  //show disks on button click
   8: buttonGroup1.on("click:1", () => {
   9: 	ggb1.instance.setValue("myNumber", input1.data.text);
  10  	populate();

  13  //bundle disks on button click
  14: buttonGroup1.on("click:2", () => {
  15: 	bundle();
  16: });
  17: undefined
  18: //unbundle disks on button click
  19: buttonGroup1.on("click:3", () => {
  20: 	unbundle();
  21: });
  22: undefined
  23: //resets the applet
  24: buttonGroup1.on("click:4", () => {
  25: 	reset();
  26: });
  27: undefined
  28: //sets up lists and variables for list management
  29: var hundredthsList = [];
  30: var tenthsList = [];
  31: var onesList = [];
  32: var hundredthsImageList = [];
  33: var tenthsImageList = [];
  34: var onesImageList = [];
  35: var bundleNum = 0;
  36: var unbundleNum = 0;
  37: var hiddenTenths = [];
  38: var hiddenHundredths = [];
  39: var possibleHundredths = [];
  40: var firstVisit = true;
  41: var allDone = false;
  42: var noMore = false;
  43: var unclick = 0;
  44: buttonVisibility();
  45: undefined
  46: //creates hidden points that are the anchors for movement vectors
  47: function setUp() {
  48: 	if (firstVisit == true) {
  49: 		firstVisit = false;
  50: 		for (var i = 1; i < 100; i++) {
  51: 			ggb1.instance.evalCommand(
  52  				"PossibleHundredth" +

DIDwhiteboard • G4/G4 M5 TC L11 - Rube Goldberg Machine - Slide 6.js:
  113  
  114: buttonGroup1.on("click:1", () => {
  115: 	rollBall();
  116: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  117: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  118: });
  119: undefined
  120: buttonGroup1.on("click:2", () => {
  121: 	reset();
  122: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  123: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  124: });
  125: undefined
  126: //gets all data from slide 1 and sets conditions
  127: function setUpSlide1() {
  128: 	console.log(
  129: 		id1PrevGGB1.innerData["hangRight"],
  130  		id1PrevGGB1.innerData["hangLeft"]

DIDwhiteboard • G4/G4 M6 TB L8 - Circles and Angles.js:
   5  
   6: buttonGroup1.on("click:1", () => {
   7: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
   8: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
   9: 	ggb1.instance.setValue("showAngles", true);
  10  });
  11  
  12: buttonGroup1.on("click:2", () => {
  13: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  14: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  15: 	ggb1.instance.setValue("showAngles", false);
  16  });

DIDwhiteboard • G4/G4 M6 TB L10 - Measuring Angles with a Protractor.js:
   2  
   3: buttonGroup1.on("click:1", () => {
   4: 	ggb1.instance.evalCommand("RunClickScript(newangle)");
   5  	fib1.clear();
   6  });
   7: buttonGroup1.on("click:2", () => {
   8: 	ggb1.instance.evalCommand("RunClickScript(flipangle)");
   9  });
  10: /*buttonGroup1.on("click:4", () => {
  11: 	ggb1.instance.evalCommand("RunClickScript(tryagain)");
  12  	buttonGroup1.updateSingleButton({ disabled: true }, 3);

  15  */
  16: buttonGroup1.on("click:3", () => {
  17: 	ggb1.instance.setValue("angle", (fib1.getInput(0).text * Math.PI) / 180);
  18  	ggb1.instance.evalCommand("RunClickScript(check)");

DIDwhiteboard • G4/G4 M6 TB L12 - Construct an Angle.js:
  26  
  27: buttonGroup1.on("click:1", () => {
  28: 	ggb1.instance.evalCommand("RunClickScript(newangle)");
  29  	//	buttonGroup1.updateSingleButton({ disabled: true }, 4);

  31  });
  32: buttonGroup1.on("click:2", () => {
  33: 	ggb1.instance.evalCommand("RunClickScript(flipangle)");
  34  	ggb1.instance.setValue("b", false);

  36  });
  37: buttonGroup1.on("click:3", () => {
  38: 	//ggb1.instance.setValue("angle", (fib1.getInput(0).text * Math.PI) / 180);
  39  	ggb1.instance.evalCommand("RunClickScript(check)");

  42  });
  43: /*buttonGroup1.on("click:4", () => {
  44: 	ggb1.instance.evalCommand("RunClickScript(tryagain)");
  45  	buttonGroup1.updateSingleButton({ disabled: true }, 4);

DIDwhiteboard • G4/G4 M6 TD L18 - Triangle Classifications.js:
   8  //displays a new triangle chosen randomly from the list
   9: buttonGroup1.on("click:1", () => {
  10: 	ggb1.instance.evalCommand("RunClickScript(newTriangle)");
  11  });

  13  //displays challenge triangles, disables once all three are complete
  14: buttonGroup1.on("click:2", () => {
  15: 	ggb1.instance.evalCommand("RunClickScript(challenge)");
  16  	click++;

  22  //resets the demo back to the beginning
  23: buttonGroup1.on("click:3", () => {
  24: 	ggb1.instance.evalCommand("RunClickScript(reset)");
  25  	buttonGroup1.updateSingleButton({ disabled: false }, 2);

DIDwhiteboard • G4/G4 M3 TE L20 - Water Factory/G4 M3 TE L20 - Water Factory.js:
  20  
  21: buttonGroup1.on("click:1", () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  24:   if (select1.data.selected[0] == "0") {
  25:     state = 1;
  26:     ggb1.instance.setValue("galBool", 1);
  27      ggb1.instance.setValue("quartBool", 0);

  70  
  71: buttonGroup1.on("click:2", () => {
  72:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  73:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  74:   reset();
  75:   select1.unselectAll();
  76:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  77: });
  78: undefined
  79: //start the conveyor belt
  80: function start() {
  81:   switch (state) {
  82:     case 1:
  83:       ggb1.instance.setVisible("quart1", true);
  84        ggb1.instance.setVisible("quart2", true);

DIDwhiteboard • G4/G4 M3 TE L20 - Water Factory/v2.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  32:   resetFlags();
  33:   ggb1.instance.setAnimating("timeStart", true);
  34    ggb1.instance.startAnimation();

  36  
  37: buttonGroup1.on("click:2", () => {
  38:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  39:   resetFlags(true);
  40: });
  41: undefined
  42: function nextAnim(currentTime, nextTime, proceed = false) {
  43:   // if the current time is done, animate the next time
  44:   // at key points, quickly set some values to keep the conveyor moving forward
  45:   const time = ggb1.innerData[currentTime];
  46    if (time == 1) {

DIDwhiteboard • G5/G5 M1 TA L1 - Place Value Chart to Millions Version B.js:
  57  //multiply points by 10 on first button click until points are in millions region
  58: buttonGroup1.on("click:1", () => {
  59: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  60: 	clickCount++;
  61: 	multiplying = true;
  62: 	dividing = false;
  63: 	multiplyIt();
  64: });
  65: undefined
  66: //divide points by 10 on second button click until points are in ones region
  67: buttonGroup1.on("click:2", () => {
  68: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  69: 	clickCount++;
  70: 	multiplying = false;
  71: 	dividing = true;
  72: 	divideIt();
  73: });
  74: undefined
  75: //reset the applet on third button click
  76: buttonGroup1.on("click:3", () => {
  77: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  78: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  79: 	input1.updateData({ text: "" });
  80: 	select1.unselectAll();
  81: 	multiplying = false;
  82: 	dividing = false;
  83: 	reset();
  84: 	clickCount = 0;
  85: });
  86: undefined
  87: autorun(() => {
  88: 	let checkPoint = ggb1.innerData["MovingPoint0"];
  89  	console.log(checkPoint);

DIDwhiteboard • G5/G5 M1 TA L1 - Place Value Chart to Millions Version C.js:
  37  //multiply points by 10 on first button click until points are in millions region
  38: buttonGroup1.on("click:1", () => {
  39: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  40: 	clickCount++;
  41: 	multiplying = true;
  42: 	dividing = false;
  43: 	multiplyIt();
  44: });
  45: undefined
  46: //divide points by 10 on second button click until points are in ones region
  47: buttonGroup1.on("click:2", () => {
  48: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  49: 	clickCount++;
  50: 	multiplying = false;
  51: 	dividing = true;
  52: 	divideIt();
  53: });
  54: undefined
  55: //reset the applet on third button click
  56: buttonGroup1.on("click:3", () => {
  57: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  58: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  59: 	input1.updateData({ text: "" });
  60: 	select1.unselectAll();
  61: 	multiplying = false;
  62: 	dividing = false;
  63: 	reset();
  64: 	clickCount = 0;
  65: });
  66: undefined
  67: autorun(() => {
  68: 	let checkPoint = ggb1.innerData["MovingPoint0"];
  69  	console.log(checkPoint);

DIDwhiteboard • G5/G5 M1 TA L1 - Place Value Chart to Millions.js:
  29  //multiply points by 10 on first button click until points are in millions region
  30: buttonGroup1.on("click:1", () => {
  31: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  32: 	clickCount++;
  33: 	multiplying = true;
  34: 	dividing = false;
  35: 	multiplyIt();
  36: });
  37: undefined
  38: //divide points by 10 on second button click until points are in ones region
  39: buttonGroup1.on("click:2", () => {
  40: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  41: 	clickCount++;
  42: 	multiplying = false;
  43: 	dividing = true;
  44: 	divideIt();
  45: });
  46: undefined
  47: //reset the applet on third button click
  48: buttonGroup1.on("click:3", () => {
  49: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  50: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  51: 	input1.updateData({ text: "" });
  52: 	select1.unselectAll();
  53: 	multiplying = false;
  54: 	dividing = false;
  55: 	reset();
  56: 	clickCount = 0;
  57: });
  58: undefined
  59: autorun(() => {
  60: 	let checkPoint = ggb1.innerData["MovingPoint0"];
  61  	console.log(checkPoint);

DIDwhiteboard • G5/G5 M1 TD L17 - Tape Diagram Expressions.js:
   9  
  10: buttonGroup1.on("click:1", () => {
  11: 	reset();
  12: });
  13: undefined
  14: function spawn(grabbed) {
  15:     if (grabbed.type == "dragEnd") {
  16:         if (grabbed.target == "RedDragged") {
  17:             ggb1.instance.setVisible("q3", false);
  18  			click++;

DIDwhiteboard • G5/G5 M2 TB L5 - Vertical Block Drop.js:
  2  
  3: buttonGroup1.on("click:1", () => {
  4: 	reset();
  5: });
  6: undefined
  7: ggb1.instance.registerClientListener(springBack);
  8  

DIDwhiteboard • G5/G5 M2 TD L15 - Line Plot Tool.js:
   5  
   6: buttonGroup1.on("click:1", () => {
   7:     ggb1.instance.evalCommand("RunClickScript(left)");
   8      ggb2.instance.setValue("Slider", 1);

  10  
  11: buttonGroup1.on("click:2", () => {
  12:     ggb1.instance.evalCommand("RunClickScript(right)");
  13      ggb2.instance.setValue("Slider", 1);

  15  
  16: buttonGroup1.on("click:3", () => {
  17:     ggb1.instance.evalCommand("RunClickScript(zoomIn)");
  18      ggb2.instance.setValue("Slider", 1);

  20  
  21: buttonGroup1.on("click:4", () => {
  22:     ggb1.instance.evalCommand("RunClickScript(zoomOut)");
  23      ggb2.instance.setValue("Slider", 1);

  25  
  26: buttonGroup1.on("click:5", () => {
  27:     ggb1.instance.setValue("xmin", 2/3);
  28      ggb1.instance.setValue("xmax", 19/3);

DIDwhiteboard • G5/G5 M3 TA L2 - Array Merge to Tape.js:
  15  
  16: buttonGroup1.on("click:1", () => {
  17:     ggb1.instance.setValue("PointBool", true);
  18      ggb1.instance.setAnimating("t1", true);

  23  
  24: buttonGroup1.on("click:2", () => {
  25:     ggb1.instance.setValue("SegBool", true);
  26      ggb1.instance.setAnimating("t1", true);

  31  
  32: buttonGroup1.on("click:3", () => {
  33:     ggb1.instance.setValue("TapeBool", true);
  34      ggb1.instance.setAnimating("t1", true);

  39  
  40: buttonGroup1.on("click:4", () => {
  41:     ggb1.instance.setValue("PointBool", false);
  42      ggb1.instance.setAnimating("t1", false);

  48  
  49: buttonGroup1.on("click:5", () => {
  50:     ggb1.instance.setValue("PointBool", false);
  51      ggb1.instance.setValue("TapeBool", false);

DIDwhiteboard • G5/G5 M3 TB L10 - Smooshy Multiplication.js:
  11  
  12: buttonGroup1.on("click:1", () => {
  13: 	boundIt(fib1, 1, 0, 8);
  14: 	boundIt(fib1, 0, 0, 1);
  15: 	if (boundIt(fib1, 0, 0, 1) == 1 || boundIt(fib1, 1, 0, 8) == 1) {
  16: 		buttonGroup1.updateSingleButton({ disabled: true }, 2);
  17: 		buttonGroup1.updateSingleButton({ disabled: true }, 3);
  18: 	}
  19: 	ggb1.instance.setValue("time", 0);
  20  	let firstFraction = undoLaTeX(fib1.getInput(1).text);

  52  
  53: buttonGroup1.on("click:2", () => {
  54: 	console.log(ggb1.instance.getValue("FirstDivision"));
  55  	console.log(ggb1.instance.getValue("SecondDivision"));

  66  
  67: buttonGroup1.on("click:3", () => {
  68: 	ggb1.instance.setValue("speed", -3);
  69  	ggb1.instance.setAnimating("time", true);

DIDwhiteboard • G5/G5 M3 TD L19 - Comparative Tape Diagram.js:
   2  buttonGroup1.updateSingleButton({ disabled: true }, 2);
   3: buttonGroup1.on("click:1", () => {
   4: 	ggb1.instance.setValue("speed", 10);
   5  	ggb1.instance.setAnimating("time", true);

  12  
  13: buttonGroup1.on("click:2", () => {
  14: 	ggb1.instance.setValue("speed", -10);
  15  	ggb1.instance.setAnimating("time", true);

DIDwhiteboard • G5/G5 M4 TA L1 - Graduated Cylinder.js:
   7  
   8: buttonGroup1.on("click:1", () => {
   9: 	buttonGroup1.updateSingleButton({ disabled: false }, 4);
  10: 	ggb1.instance.evalCommand("RunClickScript(button3)");
  11  	if (click == 0 || click == 2) {

  22  
  23: buttonGroup1.on("click:2", () => {
  24: 	ggb1.instance.evalCommand("RunClickScript(button1)");
  25  	if (click == 1 || click == 3) {

  31  
  32: buttonGroup1.on("click:3", () => {
  33: 	ggb1.instance.evalCommand("RunClickScript(button4)");
  34  	if (click == 5) {

  39  
  40: buttonGroup1.on("click:4", () => {
  41: 	ggb1.instance.evalCommand("RunClickScript(button2)");
  42  	click = 0;

DIDwhiteboard • G5/G5 M4 TA L3 - Place Value Chart with Decimals.js:
  29  //multiply points by 10 on first button click until points are in thousands region
  30: buttonGroup1.on("click:1", () => {
  31: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  32: 	clickCount++;
  33: 	multiplying = true;
  34: 	dividing = false;
  35: 	multiplyIt();
  36: });
  37: undefined
  38: //divide points by 10 on second button click until points are in thousandths region
  39: buttonGroup1.on("click:2", () => {
  40: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  41: 	clickCount++;
  42: 	multiplying = false;
  43: 	dividing = true;
  44: 	divideIt();
  45: });
  46: undefined
  47: //reset the applet on third button click
  48: buttonGroup1.on("click:3", () => {
  49: 	buttonGroup1.updateSingleButton({ disabled: false }, 1);
  50: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  51: 	input1.updateData({ text: "" });
  52: 	select1.unselectAll();
  53: 	multiplying = false;
  54: 	dividing = false;
  55: 	reset();
  56: 	clickCount = 0;
  57: });
  58: undefined
  59: autorun(() => {
  60: 	let checkPoint = ggb1.innerData["MovingPoint0"];
  61  	console.log(checkPoint);

DIDwhiteboard • G5/G5 M5 TA L1 - Geometry World Angle Explorer.js:
  33  
  34: buttonGroup1.on("click:1", () => {
  35: 	ggb1.instance.evalCommand("RunClickScript(AlwaysTrap)");
  36  	buttonGroup1.updateSingleButton({ disabled: false }, 3);
  37  });
  38: buttonGroup1.on("click:2", () => {
  39: 	ggb1.instance.evalCommand("RunClickScript(AlwaysPara)");
  40  	buttonGroup1.updateSingleButton({ disabled: false }, 3);
  41  });
  42: buttonGroup1.on("click:3", () => {
  43: 	ggb1.instance.evalCommand("RunClickScript(UnlockPara)");
  44  	ggb1.instance.evalCommand("RunClickScript(UnlockTrap)");

  47  
  48: buttonGroup2.on("click:1", () => {
  49: 	ggb1.instance.evalCommand("RunClickScript(Animate)");
  50  	buttonGroup1.updateSingleButton({ disabled: true }, 1);

  55  
  56: buttonGroup2.on("click:2", () => {
  57: 	ggb1.instance.evalCommand("RunClickScript(FlyBack)");
  58  	buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • G5/G5 M5 TA L3 - Geometry World All Explorers.js:
  37  //lock into trapezoid state
  38: buttonGroup1.on("click:1", () => {
  39: 	ggb1.instance.evalCommand("RunClickScript(AlwaysTrap)");
  40  	buttonGroup1.updateSingleButton({ disabled: false }, 3);

  42  //lock into paralellogram state
  43: buttonGroup1.on("click:2", () => {
  44: 	ggb1.instance.evalCommand("RunClickScript(AlwaysPara)");
  45  	buttonGroup1.updateSingleButton({ disabled: false }, 3);

  47  //unlock points
  48: buttonGroup1.on("click:3", () => {
  49: 	ggb1.instance.evalCommand("RunClickScript(UnlockPara)");
  50  	ggb1.instance.evalCommand("RunClickScript(UnlockTrap)");

  54  //animates sides/diagonals/angles to the left
  55: buttonGroup2.on("click:1", () => {
  56: 	ggb1.instance.evalCommand("RunClickScript(Animate)");
  57  	buttonGroup2.updateSingleButton({ disabled: true }, 1);

  60  //animates sides/diagonals/angles back to quad
  61: buttonGroup2.on("click:2", () => {
  62: 	ggb1.instance.evalCommand("RunClickScript(FlyBack)");
  63  	buttonGroup2.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • G5/G5 M5 TA L4 - Geometry World Diagonal Explorer Rectangle Emphasis.js:
  26  //lock into trapezoid state
  27: buttonGroup1.on("click:1", () => {
  28: 	ggb1.instance.setCoords(
  29  		"RectTopLeft",

  41  //unlock points
  42: buttonGroup1.on("click:2", () => {
  43: 	ggb1.instance.setCoords(
  44  		"D",

  62  //animates sides/diagonals/angles to the left
  63: buttonGroup2.on("click:1", () => {
  64: 	ggb1.instance.evalCommand("RunClickScript(Animate)");
  65  	buttonGroup2.updateSingleButton({ disabled: true }, 1);

  68  //animates sides/diagonals/angles back to quad
  69: buttonGroup2.on("click:2", () => {
  70: 	ggb1.instance.evalCommand("RunClickScript(FlyBack)");
  71  	buttonGroup2.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • G5/G5 M5 TA L4 - Geometry World Symmetry Explorer.js:
   2  
   3: buttonGroup1.on("click:1", () => {
   4:     ggb1.instance.evalCommand("CopyFreeObject(Segment(IntersectNear, IntersectFar))");
   5      ggb1.instance.evalCommand("SelectObjects(q1)");

   8  
   9: buttonGroup1.on("click:2", () => {
  10:     deleteThem();
  11: })
  12: ggb1.instance.registerClientListener(fold);
  13  

DIDwhiteboard • G5/G5 M5 TA L4 - Symmetry Explorer Rhombus Emphasis.js:
   2  
   3: buttonGroup1.on("click:1", () => {
   4:     ggb1.instance.evalCommand("CopyFreeObject(Segment(IntersectNear, IntersectFar))");
   5      ggb1.instance.evalCommand("SelectObjects(q1)");

   8  
   9: buttonGroup1.on("click:2", () => {
  10:     deleteThem();
  11: })
  12: ggb1.instance.registerClientListener(fold);
  13  

DIDwhiteboard • G5/G5 M5 TB L8 - Fractional Tiles.js:
  10  
  11: buttonGroup1.on("click:1", () => {
  12: 	ggb1.instance.setVisible("l3", true);
  13  	hideAndTile();

  15  
  16: buttonGroup1.on("click:2", () => {
  17: 	reset();
  18: });
  19: undefined
  20: ggb2.instance.registerObjectUpdateListener("Denom", moveSlider);
  21  function moveSlider() {

DIDwhiteboard • G5/G5 M5 TB L10 - Fractional Tiles Less Than 1.js:
   3  
   4: buttonGroup1.on("click:1",()=>{
   5:     hideAndTile();
   6: })
   7: undefined
   8: undefined
   9: function hideAndTile() {
  10:     ggb1.instance.setValue("time", 0);
  11      ggb1.instance.setAnimating("time", true);

DIDwhiteboard • G5/G5 M5 TC L16 - Right Rectangular Prism.js:
  60  
  61: buttonGroup1.on("click:1", () => {
  62: 	ggb2.instance.evalCommand("SetViewDirection(Vector(Midpoint(A,G),D))");
  63  	ggb2.instance.setCoordSystem(-6, 12, -9, 9, -4, 14, false);

DIDwhiteboard • G5/G5 M5 TC L19 - Volume with Layers.js:
  36  //
  37: buttonGroup1.on("click:1", () => {
  38:     let cubeSize = ggb1.instance.getValue("cubeSize");
  39      ggb1.instance.setValue("time2",cubeSize)

  48  
  49: buttonGroup1.on("click:2", () => {
  50:     ggb1.instance.setValue("time1", 0);
  51      ggb1.instance.setValue("cubeSize", 1);

  56  
  57: buttonGroup1.on("click:3", () => {
  58:     ggb1.instance.evalCommand("SetViewDirection(Vector((5,-5,4.5),(-5,2.65,0)))");
  59      ggb1.instance.setCoordSystem(-6, 6, -6, 6, -2, 10, false);

DIDwhiteboard • G5/G5 M6 TA L4 - Coordinate Hopping.js:
  45  
  46: buttonGroup1.on("click:1", () => {
  47:     if (selectedLabels(select1).includes("Move by Using Coordinates")) {
  48:         ggb1.instance.evalCommand("RunClickScript(button3)");
  49          ggb1.instance.setValue("xCoor", fib1.getInput(0).text);

  78  
  79: buttonGroup1.on("click:2", () => {
  80:     console.log((ggb1.instance.getXcoord('Point1')+ fib2.getInput('0').text), selectedLabels(select2).includes('Right'));
  81  	ggb1.instance.evalCommand("RunClickScript(button3)");

DIDwhiteboard • G5/G5 M6 TB L5 - Point Grabber Game.js:
  16  
  17: buttonGroup1.on("click:1", () => {
  18: 	let distance = fib1.getInput(0).text;
  19: 	ggb1.instance.setValue("Dist", distance);
  20  	ggb1.instance.evalCommand("RunClickScript(button1)");
  21  });
  22: buttonGroup1.on("click:2", () => {
  23: 	let distance = fib1.getInput(0).text;
  24: 	ggb1.instance.setValue("Dist", distance);
  25  	ggb1.instance.evalCommand("RunClickScript(button2)");

  27  
  28: buttonGroup2.on("click:1", () => {
  29: 	ggb1.instance.evalCommand("RunClickScript(button3)");
  30  	fib1.updateInput(0, { text: "" });

DIDwhiteboard • G5/G5 M6 TB L8 - Table-Graph Linker (patterns down).js:
  35  
  36: buttonGroup1.on("click:1", () => {
  37: 	ggb1.instance.setValue("n", -1);
  38  	ggb1.instance.setAnimating("n", true);

  44  
  45: buttonGroup1.on("click:2", () => {
  46: 	ggb1.instance.setValue("t1", 0);
  47  	ggb1.instance.setAnimating("t1", true);

  52  
  53: buttonGroup1.on("click:3", () => {
  54: 	ggb1.instance.setAnimating("t1", false);
  55  	ggb1.instance.setAnimating("n", false);

DIDwhiteboard • G5/G5 M6 TB L10 - Table-Graph Linker (patterns across).js:
  37  
  38: buttonGroup1.on("click:1", () => {
  39: 	ggb1.instance.setValue("n", -1);
  40  	ggb1.instance.setAnimating("n", true);

  46  
  47: buttonGroup1.on("click:2", () => {
  48: 	ggb1.instance.setValue("t1", 0);
  49  	ggb1.instance.setAnimating("t1", true);

  54  
  55: buttonGroup1.on("click:3", () => {
  56: 	ggb1.instance.setAnimating("t1", false);
  57  	ggb1.instance.setAnimating("n", false);

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-3f748a86edd6.js:
  21  
  22: buttonGroup1.on('click:1', () => {
  23:   let Batch = ggb1.instance.getValue('Batch');
  24    ggb1.instance.setValue('Batch', Batch + 1);

  36  
  37: buttonGroup1.on('click:2', () => {
  38:   let Batch = ggb1.instance.getValue('Batch');
  39    ggb1.instance.setValue('Batch', Batch - 1);

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-4c468d9ff35c.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   let Batch = ggb1.instance.getValue('Batch');
  23    ggb1.instance.setValue('Batch', Batch + 1);

  35  
  36: buttonGroup1.on('click:2', () => {
  37:   let Batch = ggb1.instance.getValue('Batch');
  38    ggb1.instance.setValue('Batch', Batch - 1);

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-33efdc26718c.js:
  33  
  34: buttonGroup1.on('click:1', () => {
  35:   let Batch = ggb1.instance.getValue('Batch');
  36    ggb1.instance.setValue('Batch', Batch + 1);

  48  
  49: buttonGroup1.on('click:2', () => {
  50:   let Batch = ggb1.instance.getValue('Batch');
  51    ggb1.instance.setValue('Batch', Batch - 1);

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-73a422614d1e.js:
  68  
  69: buttonGroup1.on('click:1', () => {
  70:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  71:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  72:   ggb1.instance.evalCommand('RunClickScript(button5)');
  73  });
  74  
  75: buttonGroup1.on('click:2', () => {
  76:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  77:   ggb2.instance.evalCommand('RunClickScript(addASetButton)');
  78  });
  79  
  80: buttonGroup1.on('click:3', () => {
  81:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  82:   ggb2.instance.setValue('tryIt', false);
  83    ggb2.instance.setValue('blueTestNumber', 0);

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-353e64b2db75.js:
  21  
  22: buttonGroup1.on('click:1', () => {
  23:   let Batch = ggb1.instance.getValue('Batch');
  24    ggb1.instance.setValue('Batch', Batch + 1);

  36  
  37: buttonGroup1.on('click:2', () => {
  38:   let Batch = ggb1.instance.getValue('Batch');
  39    ggb1.instance.setValue('Batch', Batch - 1);

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-934c81c7905a.js:
  52  
  53: buttonGroup1.on('click:1', () => {
  54:   ggb1.instance.evalCommand('RunClickScript(button3)');
  55    if (ggb1.instance.getValue('numOfTiles') == 10) {

  62  
  63: buttonGroup1.on('click:2', () => {
  64:   ggb1.instance.evalCommand('RunClickScript(button1)');
  65    buttonGroup1.updateSingleButton({ disabled: true }, 2);

  68  
  69: buttonGroup1.on('click:3', () => {
  70:   ggb1.instance.evalCommand('RunClickScript(button2)');
  71    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-301204701c37.js:
  24  
  25: buttonGroup1.on('click:1', () => {
  26:   let Batch = ggb1.instance.getValue('Batch');
  27    ggb1.instance.setValue('Batch', Batch + 1);

  39  
  40: buttonGroup1.on('click:2', () => {
  41:   let Batch = ggb1.instance.getValue('Batch');
  42    ggb1.instance.setValue('Batch', Batch - 1);

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-a0109e29b7d1.js:
  15  
  16: buttonGroup1.on('click:1', () => {
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  19:   ggb1.instance.setAnimating('time', true);
  20    ggb1.instance.startAnimation();

  22  
  23: buttonGroup1.on('click:2', () => {
  24:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  26:   ggb1.instance.setAnimating('time', false);
  27    ggb1.instance.setAnimating('Number', false);

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-bf2eba252a4f.js:
  30  
  31: buttonGroup1.on('click:1', () => {
  32:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  33:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  34:   ggb1.instance.setAnimating('time', true);
  35    ggb1.instance.startAnimation();

  37  
  38: buttonGroup1.on('click:2', () => {
  39:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  40:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  41:   ggb1.instance.setAnimating('time', false);
  42    ggb1.instance.setAnimating('Number', false);

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-d71435a4371a.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   let Batch = ggb1.instance.getValue('Batch');
  23    ggb1.instance.setValue('Batch', Batch + 1);

  35  
  36: buttonGroup1.on('click:2', () => {
  37:   let Batch = ggb1.instance.getValue('Batch');
  38    ggb1.instance.setValue('Batch', Batch - 1);

DIDwhiteboard • G6/M1/TA L04 - Exploring Ratios by Making Batches/slide-dbbabd10eca9.js:
  63  
  64: buttonGroup1.on('click:1', () => {
  65:   ggb1.instance.evalCommand('RunClickScript(button3)');
  66    if (ggb1.instance.getValue('numOfTiles') == 10) {

  74  
  75: buttonGroup1.on('click:2', () => {
  76:   ggb1.instance.evalCommand('RunClickScript(button1)');
  77    buttonGroup1.updateSingleButton({ disabled: true }, 2);

  80  
  81: buttonGroup1.on('click:3', () => {
  82:   ggb1.instance.evalCommand('RunClickScript(button2)');
  83    if (ggb1.instance.getValue('numOfTiles') == 10) {

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide-22f92cf58fad.js:
  15  
  16: buttonGroup1.on('click:1', () => {
  17:   let blueNum = utils.math.evaluateLatex(table1.getCell(0, 1).value);
  18:   if (blueNum.value < 1 || blueNum.error) {
  19:     return;
  20:   }
  21:   let redNum = utils.math.evaluateLatex(table1.getCell(1, 1).value);
  22:   if (redNum.value < 1 || redNum.error) {
  23:     return;
  24:   }
  25:   ggb1.instance.setValue('redPart', redNum.value);
  26    ggb2.instance.setValue('redPart', redNum.value);

  34  
  35: buttonGroup1.on('click:2', () => {
  36:   let blueNum2 = utils.math.evaluateLatex(table1.getCell(0, 2).value);
  37:   if (blueNum2.value < 1 || blueNum2.error) {
  38:     return;
  39:   }
  40:   let redNum2 = utils.math.evaluateLatex(table1.getCell(1, 2).value);
  41:   if (redNum2.value < 1 || redNum2.error) {
  42:     return;
  43:   }
  44:   ggb1.instance.setValue('bluePart2', blueNum2.value);
  45    ggb2.instance.setValue('bluePart2', blueNum2.value);

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide-327a92d99a54.js:
  15  
  16: buttonGroup1.on('click:1', () => {
  17:   let blueNum = utils.math.evaluateLatex(table1.getCell(0, 1).value);
  18:   if (blueNum.value < 1 || blueNum.error || blueNum.value > 50) {
  19:     return;
  20:   }
  21:   let redNum = utils.math.evaluateLatex(table1.getCell(1, 1).value);
  22:   if (redNum.value < 1 || redNum.error || redNum.value > 50) {
  23:     return;
  24:   }
  25:   table1.updateCell(1, 2, { value: redNum.value });
  26:   ggb1.instance.setValue('redPart', redNum.value);
  27    ggb1.instance.setValue('bluePart', blueNum.value);

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   let blueNum2 = utils.math.evaluateLatex(table1.getCell(0, 2).value);
  36:   if (blueNum2.value < 1 || blueNum2.error || blueNum2.value > 50) {
  37:     return;
  38:   }
  39:   let redNum = utils.math.evaluateLatex(table1.getCell(1, 1).value);
  40:   if (redNum.value < 1 || redNum.error || redNum.value > 50) {
  41:     return;
  42:   }
  43:   ggb1.instance.setValue('bluePart2', blueNum2.value);
  44    ggb1.instance.setValue('redPart2', redNum.value);

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide-1912c4519a27.js:
  71  
  72: buttonGroup1.on('click:1', () => {
  73:   ggb1.instance.setAnimating('time', true);
  74    ggb1.instance.startAnimation();

  79  
  80: buttonGroup1.on('click:2', () => {
  81:   ggb1.instance.setAnimating('time2', true);
  82    ggb1.instance.startAnimation();

  86  
  87: buttonGroup1.on('click:3', () => {
  88:   ggb1.instance.setValue('time', 0);
  89    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide-6706e4d7cd0a.js:
  70  
  71: buttonGroup1.on('click:1', () => {
  72:   ggb1.instance.setAnimating('time', true);
  73    ggb1.instance.startAnimation();

  78  
  79: buttonGroup1.on('click:2', () => {
  80:   ggb1.instance.setAnimating('time2', true);
  81    ggb1.instance.startAnimation();

  85  
  86: buttonGroup1.on('click:3', () => {
  87:   ggb1.instance.setValue('time', 0);
  88    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide-a5ba11681296.js:
  30  
  31: buttonGroup1.on('click:1', () => {
  32:   let blueNum = utils.math.evaluateLatex(table1.getCell(0, 1).value);
  33:   if (blueNum.value < 1 || blueNum.error || blueNum.value > 50) {
  34:     return;
  35:   }
  36:   let redNum = utils.math.evaluateLatex(table1.getCell(1, 1).value);
  37:   if (redNum.value < 1 || redNum.error || redNum.value > 50) {
  38:     return;
  39:   }
  40: undefined
  41:   ggb1.instance.setValue('redParts1', redNum.value);
  42    ggb2.instance.setValue('redPart', redNum.value);

  49  
  50: buttonGroup1.on('click:2', () => {
  51:   let blueNum2 = utils.math.evaluateLatex(table1.getCell(0, 2).value);
  52:   if (blueNum2.value < 1 || blueNum2.error || blueNum2.value > 50) {
  53:     return;
  54:   }
  55:   let redNum2 = utils.math.evaluateLatex(table1.getCell(1, 2).value);
  56:   if (redNum2.value < 1 || redNum2.error || redNum2.value > 50) {
  57:     return;
  58:   }
  59:   ggb1.instance.setValue('blueParts2', blueNum2.value);
  60    ggb2.instance.setValue('bluePart2', blueNum2.value);

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide-c4ce3168ee1b.js:
  14  
  15: buttonGroup1.on('click:1', () => {
  16:   let blueNum = utils.math.evaluateLatex(table1.getCell(0, 1).value);
  17:   if (blueNum.value < 1 || blueNum.error || blueNum.value > 50) {
  18:     return;
  19:   }
  20:   let redNum = utils.math.evaluateLatex(table1.getCell(1, 1).value);
  21:   if (redNum.value < 1 || redNum.error || redNum.value > 50) {
  22:     return;
  23:   }
  24:   ggb1.instance.setValue('redPart', redNum.value);
  25    ggb2.instance.setValue('redPart', redNum.value);

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   let blueNum2 = utils.math.evaluateLatex(table1.getCell(0, 2).value);
  36:   if (blueNum2.value < 1 || blueNum2.error || blueNum2.value > 50) {
  37:     return;
  38:   }
  39:   let redNum2 = utils.math.evaluateLatex(table1.getCell(1, 2).value);
  40:   if (redNum2.value < 1 || redNum2.error || redNum2.value > 50) {
  41:     return;
  42:   }
  43:   ggb1.instance.setValue('bluePart2', blueNum2.value);
  44    ggb2.instance.setValue('bluePart2', blueNum2.value);

DIDwhiteboard • G6/M1/TC L12 - Multiple Ratio Relationships/slide-e8d925272835.js:
  29  
  30: buttonGroup1.on('click:1', () => {
  31:   let blueNum = utils.math.evaluateLatex(table1.getCell(0, 1).value);
  32:   if (blueNum.value < 1 || blueNum.error || blueNum.value > 50) {
  33:     return;
  34:   }
  35:   let redNum = utils.math.evaluateLatex(table1.getCell(1, 1).value);
  36:   if (redNum.value < 1 || redNum.error || redNum.value > 50) {
  37:     return;
  38:   }
  39:   ggb1.instance.setValue('redParts1', redNum.value);
  40    ggb2.instance.setValue('redPart', redNum.value);

  47  
  48: buttonGroup1.on('click:2', () => {
  49:   let blueNum2 = utils.math.evaluateLatex(table1.getCell(0, 2).value);
  50:   if (blueNum2.value < 1 || blueNum2.error || blueNum2.value > 50) {
  51:     return;
  52:   }
  53:   let redNum2 = utils.math.evaluateLatex(table1.getCell(1, 2).value);
  54:   if (redNum2.value < 1 || redNum2.error || redNum2.value > 50) {
  55:     return;
  56:   }
  57:   ggb1.instance.setValue('blueParts2', blueNum2.value);
  58    ggb2.instance.setValue('bluePart2', blueNum2.value);

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide3.js:
  38  
  39: buttonGroup1.on('click:1', () => {
  40:   if (ggb1.innerData['time'] == 0) {
  41      ggb1.instance.setAnimating('time', false);

  54  
  55: buttonGroup1.on('click:2', () => {
  56:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  57:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  58:   ggb1.instance.setAnimating('time', false);
  59    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide6.js:
  37  
  38: buttonGroup1.on('click:1', () => {
  39:   if (ggb1.innerData['time'] == 0) {
  40      ggb1.instance.setAnimating('time', false);

  53  
  54: buttonGroup1.on('click:2', () => {
  55:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  56:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  57:   ggb1.instance.setAnimating('time', false);
  58    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide11.js:
  67  
  68: buttonGroup1.on('click:1', () => {
  69:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  70:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  71:   ggb1.instance.setValue('Play', true);
  72    ggb1.instance.setAnimating('time1', false);

  77  
  78: buttonGroup1.on('click:2', () => {
  79:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  80:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  81:   ggb1.instance.setValue('Play', false);
  82    ggb1.instance.setAnimating('time1', false);

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide12.js:
  64  
  65: buttonGroup1.on("click:1", () => {
  66:   ggb1.instance.setValue("song1Beats", oldCell2);
  67    ggb1.instance.setValue("song2Beats", oldCell1);

  76  
  77: buttonGroup1.on("click:2", () => {
  78:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  79:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  80:   ggb1.instance.setValue("Play", false);
  81    ggb1.instance.setAnimating("time1", false);

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide13.js:
  60  
  61: buttonGroup1.on('click:1', () => {
  62:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  63:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  64:   ggb1.instance.setValue('Play', true);
  65    ggb1.instance.setAnimating('time1', false);

  70  
  71: buttonGroup1.on('click:2', () => {
  72:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  73:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  74:   ggb1.instance.setValue('Play', false);
  75    ggb1.instance.setAnimating('time1', false);

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide15.js:
  15  
  16: buttonGroup1.on('click:1', () => {
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  19:   ggb1.instance.setAnimating('time1', false);
  20    ggb1.instance.setValue('time1', 0);

  24  
  25: buttonGroup1.on('click:2', () => {
  26:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  27:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  28:   ggb1.instance.setAnimating('time1', false);
  29    ggb1.instance.setValue('time1', 0);

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide16.js:
  19  
  20: buttonGroup1.on('click:1', () => {
  21:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  22:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  23:   ggb1.instance.setAnimating('time1', false);
  24    ggb1.instance.setValue('time1', 0);

  28  
  29: buttonGroup1.on('click:2', () => {
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  32:   ggb1.instance.setAnimating('time1', false);
  33    ggb1.instance.setValue('time1', 0);

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide18.js:
  39  
  40: buttonGroup1.on('click:1', () => {
  41:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  43:   let num1 = table1.getCell(0, 3).value;
  44:   let num2 = table1.getCell(1, 3).value;
  45:   let num3 = table1.getCell(2, 3).value;
  46:   let num4 = table1.getCell(3, 3).value;
  47:   const min = 0;
  48:   const max = 10000;
  49: undefined
  50:   num1 = boundIt(num1, 0, 3, min, max);
  51:   num2 = boundIt(num2, 1, 3, min, max);
  52:   num3 = boundIt(num3, 2, 3, min, max);
  53:   num4 = boundIt(num4, 3, 3, min, max);
  54: undefined
  55:   ggb1.instance.setAnimating('time1', false);
  56    ggb1.instance.setValue('time1', 0);

  60  
  61: buttonGroup1.on('click:2', () => {
  62:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  63:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  64:   ggb1.instance.setAnimating('time1', false);
  65    ggb1.instance.setValue('time1', 0);

DIDwhiteboard • G6/M1/TD L18 - Comparing Rates/slide20.js:
  37  
  38: buttonGroup1.on('click:1', () => {
  39:   if (ggb1.innerData['time'] == 0) {
  40      ggb1.instance.setAnimating('time', false);

  53  
  54: buttonGroup1.on('click:2', () => {
  55:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  56:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  57:   ggb1.instance.setAnimating('time', false);
  58    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G6/M2/TB L06 - Dividing a Whole Number by a Fraction/slide6.js:
  42  
  43: buttonGroup1.on('click:1', () => {
  44:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  45:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  46:   setEmUp();
  47:   ggb1.instance.setAnimating('timeTip', true);
  48    ggb1.instance.startAnimation();

  50  
  51: buttonGroup1.on('click:2', () => {
  52:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  53:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  54:   setEmUp();
  55: });
  56: undefined
  57: autorun(() => {
  58:   // transition from tipping to starting pour
  59:   if (ggb1.innerData['timeTip'] == 1) {
  60      ggb1.instance.stopAnimation();

DIDwhiteboard • G6/M2/TB L06 - Dividing a Whole Number by a Fraction/slide7.js:
  44  
  45: buttonGroup1.on("click:1", () => {
  46:   //ggb1.instance.evalCommand("UpdateConstruction()");
  47    let num = ggb1.instance.getValue("fakeNumer");

  58  
  59: buttonGroup1.on("click:2", () => {
  60:   resetIt();
  61: });
  62: undefined
  63: function resetIt() {
  64:   ggb1.updateInnerData({ time: 0, end: 0 });
  65    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G6/M2/TB L06 - Dividing a Whole Number by a Fraction/slide8.js:
  44  
  45: buttonGroup1.on("click:1", () => {
  46:   let num = ggb1.innerData["fakeNumer"];
  47    let den = ggb1.innerData["fakeDenom"];

  57  
  58: buttonGroup1.on("click:2", () => {
  59:   resetIt();
  60: });
  61: undefined
  62: function resetIt() {
  63:   ggb1.updateInnerData({ time: 0, end: 0 });
  64    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G6/M2/TB L06 - Dividing a Whole Number by a Fraction/slide9.js:
  32  
  33: buttonGroup1.on("click:1", () => {
  34:   let num = ggb1.innerData["fakeNumer"];
  35    let den = ggb1.innerData["fakeDenom"];

  45  
  46: buttonGroup1.on("click:2", () => {
  47:   resetIt();
  48: });
  49: undefined
  50: function resetIt() {
  51:   ggb1.updateInnerData({ time: 0, end: 0 });
  52    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G6/M2/TB L06 - Dividing a Whole Number by a Fraction/slide10.js:
  30  
  31: buttonGroup1.on("click:1", () => {
  32:   let num = ggb1.innerData["fakeNumer"];
  33    let den = ggb1.innerData["fakeDenom"];

  43  
  44: buttonGroup1.on("click:2", () => {
  45:   resetIt();
  46: });
  47: undefined
  48: function resetIt() {
  49:   ggb1.updateInnerData({ time: 0, end: 0 });
  50    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G6/M2/TB L06 - Dividing a Whole Number by a Fraction/slide11.js:
  32  
  33: buttonGroup1.on("click:1", () => {
  34:   let num = ggb1.innerData["fakeNumer"];
  35    let den = ggb1.innerData["fakeDenom"];

  45  
  46: buttonGroup1.on("click:2", () => {
  47:   resetIt();
  48: });
  49: undefined
  50: function resetIt() {
  51:   ggb1.updateInnerData({ time: 0, end: 0 });
  52    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G6/M2/TB L08 - Demo - Dividing Fractions by Making Common Denominators/slide1.js:
  19  
  20: buttonGroup1.on('click:1', () => {
  21:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  22:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  23:   ggb1.instance.setValue('answerBool', true);
  24  });
  25  
  26: buttonGroup1.on('click:2', () => {
  27:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  28:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  29:   ggb1.instance.setValue('answerBool', false);
  30  });

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/slide13.js:
   6  buttonGroup1.updateSingleButton({ disabled: true }, 3);
   7: buttonGroup1.on('click:1', () => {
   8:   for (i = 1; i < 26; i++) {
   9:     ggb1.instance.setAnimating('q' + i, true);
  10    }

  16  
  17: buttonGroup1.on('click:2', () => {
  18:   for (k = 1; k < 26; k++) {
  19:     ggb1.instance.setAnimating('q' + k, false);
  20    }

  24  
  25: buttonGroup1.on('click:3', () => {
  26:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  27:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  28:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  29: undefined
  30:   for (l = 1; l < 26; l++) {
  31:     ggb1.instance.setAnimating('q' + l, false);
  32    }

DIDwhiteboard • G6/M2/TC L12 - Fraction Operations in a Real-World Situation/origFilesToDeleteWhenReady/slide13Orig.js:
   6  buttonGroup1.updateSingleButton({ disabled: true }, 3);
   7: buttonGroup1.on('click:1', () => {
   8:   for (i = 1; i < 26; i++) {
   9:     ggb1.instance.setAnimating('q' + i, true);
  10    }

  16  
  17: buttonGroup1.on('click:2', () => {
  18:   for (k = 1; k < 26; k++) {
  19:     ggb1.instance.setAnimating('q' + k, false);
  20    }

  24  
  25: buttonGroup1.on('click:3', () => {
  26:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  27:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  28:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  29: undefined
  30:   for (l = 1; l < 26; l++) {
  31:     ggb1.instance.setAnimating('q' + l, false);
  32    }

DIDwhiteboard • G6/M2/TD L14 - Patterns in Multiplying Decimals/slide3.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   ggb1.instance.setValue('k', ggb1.instance.getValue('k') + 1);
  11    buttonGroup1.updateSingleButton({ disabled: false }, 2);

  16  
  17: buttonGroup1.on('click:2', () => {
  18:   ggb1.instance.setValue('k', ggb1.instance.getValue('k') - 1);
  19    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G6/M2/TD L14 - Patterns in Multiplying Decimals/slide8.js:
   53  
   54: buttonGroup1.on('click:1', () => {
   55:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   56:   Count1 += 1;
   57:   countFirst -= 1;
   58:   let countThird = countFirst + countSecond;
   59:   ggb1.instance.setValue('count1', Count1);
   60    ggb1.instance.setValue('count2', Count2);

   74  
   75: buttonGroup1.on('click:2', () => {
   76:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
   77:   Count1 -= 1;
   78:   countFirst += 1;
   79:   let countThird = countFirst + countSecond;
   80:   ggb1.instance.setValue('count1', Count1);
   81    ggb1.instance.setValue('count2', Count2);

   92  
   93: buttonGroup2.on('click:1', () => {
   94:   buttonGroup2.updateSingleButton({ disabled: false }, 2);
   95:   Count2 += 1;
   96:   countSecond -= 1;
   97:   let countThird = countFirst + countSecond;
   98:   ggb1.instance.setValue('count1', Count1);
   99    ggb1.instance.setValue('count2', Count2);

  113  
  114: buttonGroup2.on('click:2', () => {
  115:   buttonGroup2.updateSingleButton({ disabled: false }, 1);
  116:   Count2 -= 1;
  117:   countSecond += 1;
  118:   let countThird = countFirst + countSecond;
  119:   ggb1.instance.setValue('count1', Count1);
  120    ggb1.instance.setValue('count2', Count2);

DIDwhiteboard • G6/M2/TD L14 - Patterns in Multiplying Decimals/slide9.js:
   72  
   73: buttonGroup1.on('click:1', () => {
   74:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   75:   Count1 += 1;
   76:   countFirst -= 1;
   77:   let countThird = countFirst + countSecond;
   78:   ggb1.instance.setValue('count1', Count1);
   79    ggb1.instance.setValue('count2', Count2);

   93  
   94: buttonGroup1.on('click:2', () => {
   95:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
   96:   Count1 -= 1;
   97:   countFirst += 1;
   98:   let countThird = countFirst + countSecond;
   99:   ggb1.instance.setValue('count1', Count1);
  100    ggb1.instance.setValue('count2', Count2);

  111  
  112: buttonGroup2.on('click:1', () => {
  113:   buttonGroup2.updateSingleButton({ disabled: false }, 2);
  114:   Count2 += 1;
  115:   countSecond -= 1;
  116:   let countThird = countFirst + countSecond;
  117:   ggb1.instance.setValue('count1', Count1);
  118    ggb1.instance.setValue('count2', Count2);

  132  
  133: buttonGroup2.on('click:2', () => {
  134:   buttonGroup2.updateSingleButton({ disabled: false }, 1);
  135:   Count2 -= 1;
  136:   countSecond += 1;
  137:   let countThird = countFirst + countSecond;
  138:   ggb1.instance.setValue('count1', Count1);
  139    ggb1.instance.setValue('count2', Count2);

DIDwhiteboard • G6/M2/TD L14 - Patterns in Multiplying Decimals/slide10.js:
   41  
   42: buttonGroup1.on('click:1', () => {
   43:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   44:   Count1 += 1;
   45:   countFirst -= 1;
   46:   let countThird = countFirst + countSecond;
   47:   ggb1.instance.setValue('count1', Count1);
   48    ggb1.instance.setValue('count2', Count2);

   62  
   63: buttonGroup1.on('click:2', () => {
   64:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
   65:   Count1 -= 1;
   66:   countFirst += 1;
   67:   let countThird = countFirst + countSecond;
   68:   ggb1.instance.setValue('count1', Count1);
   69    ggb1.instance.setValue('count2', Count2);

   80  
   81: buttonGroup2.on('click:1', () => {
   82:   buttonGroup2.updateSingleButton({ disabled: false }, 2);
   83:   Count2 += 1;
   84:   countSecond -= 1;
   85:   let countThird = countFirst + countSecond;
   86:   ggb1.instance.setValue('count1', Count1);
   87    ggb1.instance.setValue('count2', Count2);

  101  
  102: buttonGroup2.on('click:2', () => {
  103:   buttonGroup2.updateSingleButton({ disabled: false }, 1);
  104:   Count2 -= 1;
  105:   countSecond += 1;
  106:   let countThird = countFirst + countSecond;
  107:   ggb1.instance.setValue('count1', Count1);
  108    ggb1.instance.setValue('count2', Count2);

DIDwhiteboard • G6/M2/TD L14 - Patterns in Multiplying Decimals/slide11.js:
   41  
   42: buttonGroup1.on('click:1', () => {
   43:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   44:   Count1 += 1;
   45:   countFirst -= 1;
   46:   let countThird = countFirst + countSecond;
   47:   ggb1.instance.setValue('count1', Count1);
   48    ggb1.instance.setValue('count2', Count2);

   62  
   63: buttonGroup1.on('click:2', () => {
   64:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
   65:   Count1 -= 1;
   66:   countFirst += 1;
   67:   let countThird = countFirst + countSecond;
   68:   ggb1.instance.setValue('count1', Count1);
   69    ggb1.instance.setValue('count2', Count2);

   80  
   81: buttonGroup2.on('click:1', () => {
   82:   buttonGroup2.updateSingleButton({ disabled: false }, 2);
   83:   Count2 += 1;
   84:   countSecond -= 1;
   85:   let countThird = countFirst + countSecond;
   86:   ggb1.instance.setValue('count1', Count1);
   87    ggb1.instance.setValue('count2', Count2);

  101  
  102: buttonGroup2.on('click:2', () => {
  103:   buttonGroup2.updateSingleButton({ disabled: false }, 1);
  104:   Count2 -= 1;
  105:   countSecond += 1;
  106:   let countThird = countFirst + countSecond;
  107:   ggb1.instance.setValue('count1', Count1);
  108    ggb1.instance.setValue('count2', Count2);

DIDwhiteboard • G6/M2/TE L17 -Parital Quotients/slide5.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  12:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  13:   table1.updateData({ visible: true });
  14:   image1.updateData({ visible: false });
  15: });
  16: undefined
  17: buttonGroup1.on('click:2', () => {
  18:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  19:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  20:   table1.updateData({ visible: false });
  21:   image1.updateData({ visible: true });
  22: });
  23: undefined
  24: autorun(() => {
  25:   let Number1 = table1.getCell(0, 4).value;
  26:   ggb1.instance.setValue('number1', Number1);
  27    let Number2 = table1.getCell(1, 4).value;

DIDwhiteboard • G6/M2/TE L17 -Parital Quotients/slide7.js:
   21  
   22: buttonGroup1.on('click:1', () => {
   23:   table1.addRow();
   24:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   25: });
   26: undefined
   27: let cell00;
   28: let cell10;
   29: let cell20;
   30: let cell30;
   31: let cell40;
   32: let cell50;
   33: let cell60;
   34: let cell70;
   35: let cell80;
   36: let cell90;
   37: let cell01;
   38: let cell11;
   39: let cell21;
   40: let cell31;
   41: let cell41;
   42: let cell51;
   43: let cell61;
   44: let cell71;
   45: let cell81;
   46: let cell91;
   47: let cell02;
   48: let cell12;
   49: let cell22;
   50: let cell32;
   51: let cell42;
   52: let cell52;
   53: let cell62;
   54: let cell72;
   55: let cell82;
   56: let cell92;
   57: let cell03;
   58: let cell13;
   59: let cell23;
   60: let cell33;
   61: let cell43;
   62: let cell53;
   63: let cell63;
   64: let cell73;
   65: let cell83;
   66: let cell93;
   67: undefined
   68: let coll0 = [
   69:   cell00,
   70:   cell10,
   71:   cell20,
   72:   cell30,
   73:   cell40,
   74:   cell50,
   75:   cell60,
   76:   cell70,
   77:   cell80,
   78:   cell90,
   79: ];
   80: undefined
   81: let coll1 = [
   82:   cell01,
   83:   cell11,
   84:   cell20,
   85:   cell31,
   86:   cell41,
   87:   cell51,
   88:   cell61,
   89:   cell71,
   90:   cell81,
   91:   cell91,
   92: ];
   93: undefined
   94: let coll2 = [
   95:   cell02,
   96:   cell12,
   97:   cell22,
   98:   cell32,
   99:   cell42,
  100:   cell52,
  101:   cell62,
  102:   cell72,
  103:   cell82,
  104:   cell92,
  105: ];
  106: undefined
  107: let coll3 = [
  108:   cell03,
  109:   cell13,
  110:   cell23,
  111:   cell33,
  112:   cell43,
  113:   cell53,
  114:   cell63,
  115:   cell73,
  116:   cell83,
  117:   cell93,
  118: ];
  119: undefined
  120: autorun(() => {
  121:   const rowsContent = table1.data.rows;
  122:   for (let i = 0; i < rowsContent.length; i++) {
  123:     coll0[i] = table1.getCell(i, 0);
  124:     ggb1.instance.setValue('cell' + i + '0', coll0[i].value);
  125    }

  202  
  203: buttonGroup1.on('click:2', () => {
  204:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  205:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  206:   if (
  207:     ggb1.innerData['answer1'] > 0 ||
  208      ggb1.innerData['answer2'] > 0 ||

DIDwhiteboard • G6/M2/TE L17 -Parital Quotients/slide9.js:
   21  
   22: buttonGroup1.on('click:1', () => {
   23:   table1.addRow();
   24:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   25: });
   26: undefined
   27: let cell00;
   28: let cell10;
   29: let cell20;
   30: let cell30;
   31: let cell40;
   32: let cell50;
   33: let cell60;
   34: let cell70;
   35: let cell80;
   36: let cell90;
   37: let cell01;
   38: let cell11;
   39: let cell21;
   40: let cell31;
   41: let cell41;
   42: let cell51;
   43: let cell61;
   44: let cell71;
   45: let cell81;
   46: let cell91;
   47: let cell02;
   48: let cell12;
   49: let cell22;
   50: let cell32;
   51: let cell42;
   52: let cell52;
   53: let cell62;
   54: let cell72;
   55: let cell82;
   56: let cell92;
   57: let cell03;
   58: let cell13;
   59: let cell23;
   60: let cell33;
   61: let cell43;
   62: let cell53;
   63: let cell63;
   64: let cell73;
   65: let cell83;
   66: let cell93;
   67: let cell04;
   68: let cell14;
   69: let cell24;
   70: let cell34;
   71: let cell44;
   72: let cell54;
   73: let cell64;
   74: let cell74;
   75: let cell84;
   76: let cell94;
   77: undefined
   78: let coll0 = [
   79:   cell00,
   80:   cell10,
   81:   cell20,
   82:   cell30,
   83:   cell40,
   84:   cell50,
   85:   cell60,
   86:   cell70,
   87:   cell80,
   88:   cell90,
   89: ];
   90: undefined
   91: let coll1 = [
   92:   cell01,
   93:   cell11,
   94:   cell20,
   95:   cell31,
   96:   cell41,
   97:   cell51,
   98:   cell61,
   99:   cell71,
  100:   cell81,
  101:   cell91,
  102: ];
  103: undefined
  104: let coll2 = [
  105:   cell02,
  106:   cell12,
  107:   cell22,
  108:   cell32,
  109:   cell42,
  110:   cell52,
  111:   cell62,
  112:   cell72,
  113:   cell82,
  114:   cell92,
  115: ];
  116: undefined
  117: let coll3 = [
  118:   cell03,
  119:   cell13,
  120:   cell23,
  121:   cell33,
  122:   cell43,
  123:   cell53,
  124:   cell63,
  125:   cell73,
  126:   cell83,
  127:   cell93,
  128: ];
  129: undefined
  130: let coll4 = [
  131:   cell04,
  132:   cell14,
  133:   cell24,
  134:   cell34,
  135:   cell44,
  136:   cell54,
  137:   cell64,
  138:   cell74,
  139:   cell84,
  140:   cell94,
  141: ];
  142: undefined
  143: autorun(() => {
  144:   const rowsContent = table1.data.rows;
  145:   for (let i = 0; i < rowsContent.length; i++) {
  146:     coll0[i] = table1.getCell(i, 0);
  147:     ggb1.instance.setValue('cell' + i + '0', coll0[i].value);
  148    }

  229  
  230: buttonGroup1.on('click:2', () => {
  231:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  232:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  233:   if (
  234:     ggb1.innerData['answer1'] > 0 ||
  235      ggb1.innerData['answer2'] > 0 ||

DIDwhiteboard • G6/M2/TE L17 -Parital Quotients/slide10.js:
  23  
  24: buttonGroup1.on('click:1', () => {
  25:   ggb1.instance.evalCommand('RunClickScript(button1)');
  26    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  29  
  30: buttonGroup1.on('click:2', () => {
  31:   ggb1.instance.evalCommand('RunClickScript(button2)');
  32    buttonGroup1.updateSingleButton({ disabled: true }, 2);

  35  
  36: buttonGroup1.on('click:3', () => {
  37:   ggb1.instance.evalCommand('RunClickScript(button3)');
  38    buttonGroup1.updateSingleButton({ disabled: true }, 1);

DIDwhiteboard • G6/M3/TA L02 - Integers/slide5.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.evalCommand('RunClickScript(button1)');
  13  });
  14  
  15: buttonGroup1.on('click:2', () => {
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  18:   ggb1.instance.evalCommand('RunClickScript(button1)');
  19  });

DIDwhiteboard • G6/M3/TA L02 - Integers/slide6.js:
  26  
  27: buttonGroup1.on('click:1', () => {
  28:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  29:   ggb1.instance.evalCommand('RunClickScript(checkOpposite)');
  30  });

  81  
  82: buttonGroup1.on('click:2', () => {
  83:   ggb1.instance.setCoords('sliderYPoint', 0, 0, 0);
  84    ggb1.instance.setCoords('sliderXPoint', 0, 0, 0);

DIDwhiteboard • G6/M3/TA L02 - Integers/slide7.js:
  26  
  27: buttonGroup1.on('click:1', () => {
  28:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  29:   ggb1.instance.evalCommand('RunClickScript(checkOpposite)');
  30    text2.updateData({ visible: false });

  82  
  83: buttonGroup1.on('click:2', () => {
  84:   ggb1.instance.setCoords('sliderYPoint', 0, 0, 0);
  85    ggb1.instance.setCoords('sliderXPoint', 0, 0, 0);

DIDwhiteboard • G6/M3/TB L07 - Absolute Value/slide1.js:
  36  
  37: buttonGroup1.on('click:1', () => {
  38:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  39:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  40:   ggb1.instance.setAnimating('time', false);
  41    ggb1.instance.setValue('time', 0);

  47  
  48: buttonGroup1.on('click:2', () => {
  49:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  50:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  51:   ggb1.instance.setAnimating('time', false);
  52    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G6/M3/TB L07 - Absolute Value/slide2.js:
  37  
  38: buttonGroup1.on('click:1', () => {
  39:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  40:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  41:   ggb1.instance.setAnimating('time', false);
  42    ggb1.instance.setValue('time', 0);

  48  
  49: buttonGroup1.on('click:2', () => {
  50:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  51:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  52:   ggb1.instance.setAnimating('time', false);
  53    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G6/M3/TB L07 - Absolute Value/slide3.js:
  41  
  42: buttonGroup1.on('click:1', () => {
  43:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  44:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  45:   ggb1.instance.setAnimating('time', false);
  46    ggb1.instance.setValue('time', 0);

  52  
  53: buttonGroup1.on('click:2', () => {
  54:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  55:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  56:   ggb1.instance.setAnimating('time', false);
  57    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G6/M3/TD L15 - Distance in the Coordinate Plane/slide4.js:
  19  
  20: buttonGroup1.on('click:1', () => {
  21:   ggb1.instance.setValue('c', true);
  22    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  25  
  26: buttonGroup1.on('click:2', () => {
  27:   ggb1.instance.setValue('c', false);
  28    buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • G6/M3/TD L15 - Distance in the Coordinate Plane/slide5.js:
  44  
  45: buttonGroup1.on('click:1', () => {
  46:   ggb1.instance.setValue('c', true);
  47    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  50  
  51: buttonGroup1.on('click:2', () => {
  52:   ggb1.instance.setValue('c', false);
  53    buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • G6/M3/TD L15 - Distance in the Coordinate Plane/slide9.js:
  48  
  49: buttonGroup1.on('click:1', () => {
  50:   ggb1.instance.setValue('c', true);
  51    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  54  
  55: buttonGroup1.on('click:2', () => {
  56:   ggb1.instance.setValue('c', false);
  57    buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • G6/M3/TD L15 - Distance in the Coordinate Plane/slide10.js:
  38  
  39: buttonGroup1.on('click:1', () => {
  40:   ggb1.instance.setValue('c', true);
  41    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  44  
  45: buttonGroup1.on('click:2', () => {
  46:   ggb1.instance.setValue('c', false);
  47    buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • G6/M3/TD L15 - Distance in the Coordinate Plane/slide13.js:
  16  
  17: buttonGroup1.on('click:1', () => {
  18:   ggb1.instance.evalCommand('RunClickScript(button2)');
  19    ggb2.instance.evalCommand('RunClickScript(button2)');

  23  
  24: buttonGroup1.on('click:2', () => {
  25:   ggb1.instance.evalCommand('RunClickScript(button4)');
  26  });

DIDwhiteboard • G6/M3/TD L15 - Distance in the Coordinate Plane/slide14.js:
  16  
  17: buttonGroup1.on('click:1', () => {
  18:   ggb1.instance.evalCommand('RunClickScript(button2)');
  19    ggb2.instance.evalCommand('RunClickScript(button2)');

  23  
  24: buttonGroup1.on('click:2', () => {
  25:   ggb1.instance.evalCommand('RunClickScript(button4)');
  26  });
  27  
  28: buttonGroup1.on('click:3', () => {
  29:   ggb1.instance.evalCommand('RunClickScript(button3)');
  30  });

DIDwhiteboard • G6/M4/TA L03 - Exploring Exponents/slide1.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   ggb1.instance.evalCommand('RunClickScript(button1)');
  12    if (ggb1.instance.getValue('count') == 7) {

  17  
  18: buttonGroup1.on('click:2', () => {
  19:   ggb1.instance.setValue('count', 1);
  20    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G6/M4/TA L03 - Exploring Exponents/slide2.js:
  39  
  40: buttonGroup1.on('click:1', () => {
  41:   ggb1.instance.evalCommand('RunClickScript(button1)');
  42    if (ggb1.instance.getValue('count') == 7) {

  47  
  48: buttonGroup1.on('click:2', () => {
  49:   ggb1.instance.setValue('count', 2);
  50    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G6/M4/TA L03 - Exploring Exponents/slide6.js:
  24  
  25: buttonGroup1.on('click:1', () => {
  26:   ggb1.instance.evalCommand('RunClickScript(button1)');
  27    if (ggb1.instance.getValue('count') == 4) {

  32  
  33: buttonGroup1.on('click:2', () => {
  34:   ggb1.instance.setValue('count', 2);
  35    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G6/M4/TA L03 - Exploring Exponents/slide10.js:
  108  
  109: buttonGroup1.on('click:1', () => {
  110:   ggb1.instance.evalCommand('RunClickScript(button1)');
  111    ggb2.instance.evalCommand('RunClickScript(button1)');

  113  
  114: buttonGroup1.on('click:2', () => {
  115:   ggb1.instance.evalCommand('RunClickScript(button3)');
  116    ggb2.instance.evalCommand('RunClickScript(button3)');

  118  
  119: buttonGroup1.on('click:3', () => {
  120:   ggb1.instance.evalCommand('RunClickScript(button4)');
  121    ggb2.instance.evalCommand('RunClickScript(button4)');

  125  
  126: buttonGroup1.on('click:4', () => {
  127:   ggb1.instance.evalCommand('RunClickScript(button2)');
  128    ggb2.instance.evalCommand('RunClickScript(button2)');

DIDwhiteboard • G6/M4/TE L23 - Graphs of Ratio Relationships/slide13.js:
   43  let num;
   44: buttonGroup1.on("click:1", () => {
   45:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   46:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   47:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
   48:   let num = "table";
   49:   ggb1.updateData({ visible: false });
   50    table1.updateData({ visible: true });

   69  });
   70: buttonGroup1.on("click:2", () => {
   71:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
   72:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
   73:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
   74:   let num = "graph";
   75:   ggb1.instance.setVisible("pic3", false);
   76    ggb1.instance.setVisible("Point1", true);

   96  
   97: buttonGroup1.on("click:3", () => {
   98:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
   99:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  100:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  101:   let num = "equation";
  102:   ggb1.updateData({ visible: true });
  103    table1.updateData({ visible: false });

DIDwhiteboard • G6/M5/TA L01 - The Area of a Parallelogram/slide5.js:
  36  
  37: buttonGroup1.on("click:1", () => {
  38:   ggb1.instance.setVisible("q3'", true);
  39    ggb1.instance.setVisible("q4", true);

  49  
  50: buttonGroup1.on("click:2", () => {
  51:   ggb1.instance.setValue("Slide", 0);
  52    ggb1.instance.setVisible("F", true);

DIDwhiteboard • G6/M5/TA L01 - The Area of a Parallelogram/slide6.js:
  45  
  46: buttonGroup1.on("click:1", () => {
  47:   ggb1.instance.setVisible("q3'", true);
  48    ggb1.instance.setVisible("q4", true);

  58  
  59: buttonGroup1.on("click:2", () => {
  60:   ggb1.instance.setValue("Slide", 0);
  61    ggb1.instance.setVisible("F", true);

DIDwhiteboard • G6/M5/TA L01 - The Area of a Parallelogram/slide8.js:
  27  
  28: buttonGroup1.on("click:1", () => {
  29:   count += 1;
  30:   ggb1.instance.setVisible("q3'", true);
  31    ggb1.instance.setVisible("show2", true);

  55  
  56: buttonGroup1.on("click:2", () => {
  57:   count = 0;
  58:   ggb1.instance.setValue("Slide", 0);
  59    ggb1.instance.setVisible("q3'", false);

DIDwhiteboard • G6/M5/TA L01 - The Area of a Parallelogram/slide9.js:
   8  
   9: buttonGroup1.on("click:1", () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.evalCommand("RunClickScript(button1)");
  13    ggb1.instance.setVisible("eq1", false);

  16  
  17: buttonGroup1.on("click:2", () => {
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  19:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  20:   ggb1.instance.evalCommand("RunClickScript(button2)");
  21    ggb1.instance.setVisible("eq1", true);

DIDwhiteboard • G6/M5/TB L07 - Areas of Trapezoids and Other Polygons/Slide 3.js:
  23  
  24: buttonGroup1.on("click:1", () => {
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  26:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  27:   ggb1.instance.setValue("showBoxes", false);
  28    ggb1.instance.setVisible("K", false);

  31  
  32: buttonGroup1.on("click:2", () => {
  33:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  34:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  35:   ggb1.instance.setValue("showBoxes", true);
  36    ggb1.instance.setVisible("K", true);

DIDwhiteboard • G6/M5/TB L07 - Areas of Trapezoids and Other Polygons/Slide 4.js:
  34  
  35: buttonGroup1.on("click:1", () => {
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  37:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  38:   ggb1.instance.setValue("showBoxes", false);
  39    ggb1.instance.setVisible("I", false);

  46  
  47: buttonGroup1.on("click:2", () => {
  48:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  49:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  50:   ggb1.instance.setValue("showBoxes", true);
  51    ggb1.instance.setVisible("I", true);

DIDwhiteboard • G6/M5/TC L09 - Properties of Solids/slide8.js:
  26  
  27: buttonGroup1.on('click:1', () => {
  28:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  29:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  31:   //buttonGroup1.updateSingleButton({ disabled: false }, 4);
  32:   ggb1.instance.setValue('o', true);
  33    ggb2.instance.setValue('o', true);

  39  
  40: buttonGroup1.on('click:2', () => {
  41:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  43:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  44:   //buttonGroup1.updateSingleButton({ disabled: false }, 4);
  45:   ggb1.instance.setValue('n', true);
  46    ggb2.instance.setValue('n', true);

  52  
  53: buttonGroup1.on('click:3', () => {
  54:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  55:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  56:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  57:   //buttonGroup1.updateSingleButton({ disabled: false }, 4);
  58:   ggb1.instance.setValue('p', true);
  59    ggb2.instance.setValue('p', true);

  65  
  66: /*buttonGroup1.on("click:4", () => {
  67:   ggb1.instance.reset();
  68    ggb1.instance.setValue("n", false);

DIDwhiteboard • G6/M5/TC L09 - Properties of Solids/slide15.js:
  14  
  15: buttonGroup1.on('click:1', () => {
  16:   ggb1.instance.setVisible('q', true);
  17    ggb1.instance.setVisible('angle', true);

  21  
  22: buttonGroup1.on('click:2', () => {
  23:   ggb1.instance.setVisible('q', false);
  24    ggb1.instance.setVisible('angle', false);

DIDwhiteboard • G6/M5/TD L15 - Exploring Volume with Fractional Cubes/slide1.js:
  33  
  34: buttonGroup1.on('click:1', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  37:   ggb2.instance.setAnimating('time', true);
  38    ggb2.instance.startAnimation();

  40  
  41: buttonGroup1.on('click:2', () => {
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  43:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  44:   ggb2.instance.setAnimating('time', false);
  45    ggb2.instance.setValue('time', 0);

DIDwhiteboard • G6/M5/TD L15 - Exploring Volume with Fractional Cubes/slide3.js:
  32  
  33: buttonGroup1.on('click:1', () => {
  34:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  36:   ggb1.instance.setValue('cubeSize', 1);
  37    ggb1.instance.setValue('time2', ggb1.instance.getValue('cubeSize'));

  42  
  43: buttonGroup1.on('click:2', () => {
  44:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  45:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  46:   ggb1.instance.setAnimating('time1', false);
  47    ggb1.instance.setValue('time1', 0);

DIDwhiteboard • G6/M5/TD L15 - Exploring Volume with Fractional Cubes/slide6.js:
   7  
   8: buttonGroup1.on("click:1", () => {
   9:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  10:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  12:   ggb1.instance.setValue("cubeSize", 0.25);
  13    ggb1.instance.evalCommand("RunClickScript(button1)");
  14  });
  15: buttonGroup1.on("click:2", () => {
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  19:   ggb1.instance.setValue("cubeSize", 0.2);
  20    ggb1.instance.evalCommand("RunClickScript(button1)");
  21  });
  22: buttonGroup1.on("click:3", () => {
  23:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  24:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  26:   ggb1.instance.setValue("cubeSize", 1 / 6);
  27    ggb1.instance.evalCommand("RunClickScript(button1)");

DIDwhiteboard • G6/M6/TA L04 - Creating a Histogram/Slide 5.js:
  61  
  62: buttonGroup1.on("click:1", () => {
  63:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  64:   ggb1.instance.setAnimating("time", false);
  65    ggb1.instance.setValue("time", 0);

  69  
  70: buttonGroup1.on("click:2", () => {
  71:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  72:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  73:   ggb1.instance.setAnimating("time", false);
  74    ggb1.instance.setValue("time", 0);

DIDwhiteboard • G6/M6/TA L04 - Creating a Histogram/Slide 12.js:
  24  
  25: buttonGroup1.on("click:1", () => {
  26:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  27:   ggb1.instance.setAnimating("time", false);
  28    ggb1.instance.setValue("time", 0);

  41  
  42: buttonGroup1.on("click:2", () => {
  43:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  44:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  45:   ggb1.instance.setAnimating("time", false);
  46    ggb1.instance.setValue("time", 0);

DIDwhiteboard • G6/M6/TA L04 - Creating a Histogram/Slide 13.js:
   19  
   20: buttonGroup1.on("click:1", () => {
   21:   ggb1.instance.setValue("show2", true);
   22    ggb1.instance.setValue("show10", false);

  134  
  135: buttonGroup1.on("click:2", () => {
  136:   ggb1.instance.setValue("show2", false);
  137    ggb1.instance.setValue("show10", true);

DIDwhiteboard • G6/M6/TB L08 - Mean as Balance Point/slide-0e20736c80a8.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   if (ggb1.instance.getValue('correct')) {
  12      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  28  
  29: buttonGroup1.on('click:2', () => {
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  32:   ggb1.instance.setAnimating('CCangle', false);
  33    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • G6/M6/TB L08 - Mean as Balance Point/slide-2b0b0b152535.js:
  23  
  24: buttonGroup1.on('click:1', () => {
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  26:   cc_sharewithclass_ad4b9f5354e3_textbox1.updateData({ visible: true });
  27:   cc_sharewithclass_ad4b9f5354e3_input1.updateData({ visible: true });
  28:   cc_sharewithclass_ad4b9f5354e3_button1.updateData({ visible: true });
  29:   if (ggb1.instance.getValue('correct')) {
  30      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  46  
  47: buttonGroup1.on('click:2', () => {
  48:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  49:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  50:   ggb1.instance.setAnimating('CCangle', false);
  51    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • G6/M6/TB L08 - Mean as Balance Point/slide-4d9369e88e91.js:
  23  
  24: buttonGroup1.on('click:1', () => {
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  26:   cc_sharewithclass_ad4b9f5354e3_textbox1.updateData({ visible: true });
  27:   cc_sharewithclass_ad4b9f5354e3_input1.updateData({ visible: true });
  28:   cc_sharewithclass_ad4b9f5354e3_button1.updateData({ visible: true });
  29:   if (ggb1.instance.getValue('correct')) {
  30      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  46  
  47: buttonGroup1.on('click:2', () => {
  48:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  49:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  50:   ggb1.instance.setAnimating('CCangle', false);
  51    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • G6/M6/TB L08 - Mean as Balance Point/slide-7e73acfa76ad.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   if (ggb1.instance.getValue('correct')) {
  12      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  28  
  29: buttonGroup1.on('click:2', () => {
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  32:   ggb1.instance.setAnimating('CCangle', false);
  33    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • G6/M6/TB L08 - Mean as Balance Point/slide-648a2e22b646.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  24:   if (ggb1.instance.getValue('same')) {
  25      ggb1.instance.setValue('showText', true);

  57  
  58: buttonGroup1.on('click:2', () => {
  59:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  60:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  61:   ggb1.instance.setAnimating('CCangle', false);
  62    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • G6/M6/TB L08 - Mean as Balance Point/slide-30761a9c70e4.js:
  23  
  24: buttonGroup1.on('click:1', () => {
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  26:   cc_sharewithclass_ad4b9f5354e3_textbox1.updateData({ visible: true });
  27:   cc_sharewithclass_ad4b9f5354e3_input1.updateData({ visible: true });
  28:   cc_sharewithclass_ad4b9f5354e3_button1.updateData({ visible: true });
  29:   if (ggb1.instance.getValue('correct')) {
  30      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  46  
  47: buttonGroup1.on('click:2', () => {
  48:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  49:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  50:   ggb1.instance.setAnimating('CCangle', false);
  51    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • G6/M6/TB L08 - Mean as Balance Point/slide-06316851c609.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   if (ggb1.instance.getValue('correct')) {
  12      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  28  
  29: buttonGroup1.on('click:2', () => {
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  32:   ggb1.instance.setAnimating('CCangle', false);
  33    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • G6/M6/TB L08 - Mean as Balance Point/slide-b7cb9fd7acb1.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   if (ggb1.instance.getValue('same')) {
  12      ggb1.instance.setValue('showText', true);

  40  
  41: buttonGroup1.on('click:2', () => {
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  43:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  44:   ggb1.instance.setAnimating('CCangle', false);
  45    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • G6/M6/TB L08 - Mean as Balance Point/slide-b973b6e9b76d.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   if (ggb1.instance.getValue('correct')) {
  12      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  28  
  29: buttonGroup1.on('click:2', () => {
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  32:   ggb1.instance.setAnimating('CCangle', false);
  33    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • G6/M6/TB L08 - Mean as Balance Point/slide-d0390e9ec159.js:
  23  
  24: buttonGroup1.on('click:1', () => {
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  26:   cc_sharewithclass_ad4b9f5354e3_textbox1.updateData({ visible: true });
  27:   cc_sharewithclass_ad4b9f5354e3_input1.updateData({ visible: true });
  28:   cc_sharewithclass_ad4b9f5354e3_button1.updateData({ visible: true });
  29:   if (ggb1.instance.getValue('correct')) {
  30      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  46  
  47: buttonGroup1.on('click:2', () => {
  48:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  49:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  50:   ggb1.instance.setAnimating('CCangle', false);
  51    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • G6/M6/TC L15 - More Practice with Box Plots/Slide 15.js:
   92  
   93: buttonGroup1.on("click:1", () => {
   94:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   95:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   96:   ggb1.instance.setValue("show", true);
   97    if (ggb1.instance.getValue("correct")) {

  125  
  126: buttonGroup1.on("click:2", () => {
  127:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  128:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  129:   ggb1.instance.setValue("show", false);
  130    text2.updateData({ text: "" });

DIDwhiteboard • G6/M6/TD L20 - Choosing a Measure of Center/slide-3325e68f1f9e.js:
  52  
  53: buttonGroup1.on('click:1', () => {
  54:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  55:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  56:   updateSingleButtonGroup(3, { disabled: false }, buttonGroup1);
  57:   ggb1.instance.setValue('showMM', true);
  58    ggb1.instance.setValue('showMI', false);

  64  
  65: buttonGroup1.on('click:2', () => {
  66:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  67:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  68:   updateSingleButtonGroup(3, { disabled: false }, buttonGroup1);
  69:   ggb1.instance.setValue('showMM', false);
  70    ggb1.instance.setValue('showMI', true);

  76  
  77: buttonGroup1.on('click:3', () => {
  78:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  79:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  80:   updateSingleButtonGroup(3, { disabled: true }, buttonGroup1);
  81:   ggb1.instance.setValue('showMM', true);
  82    ggb1.instance.setValue('showMI', true);

DIDwhiteboard • G6/M6/TD L20 - Choosing a Measure of Center/slide-4600595afde0.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   ggb1.instance.setAnimating('time', false);
  24    ggb1.instance.setValue('time', 0);

  29  
  30: buttonGroup1.on('click:2', () => {
  31:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  32:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  33:   ggb1.instance.setAnimating('time', false);
  34    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G6/M6/TD L20 - Choosing a Measure of Center/slide-c4393d6ad27a.js:
  72  
  73: buttonGroup1.on('click:1', () => {
  74:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  75:   ggb1.instance.setAnimating('time', false);
  76    ggb1.instance.setValue('time', 0);

  81  
  82: buttonGroup1.on('click:2', () => {
  83:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  84:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  85:   ggb1.instance.setAnimating('time', false);
  86    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G6/M6/TD L20 - Choosing a Measure of Center/slide-cf4d202de227.js:
  52  
  53: buttonGroup1.on('click:1', () => {
  54:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  55:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  56:   updateSingleButtonGroup(3, { disabled: false }, buttonGroup1);
  57:   ggb1.instance.setValue('showMM', true);
  58    ggb1.instance.setValue('showMI', false);

  64  
  65: buttonGroup1.on('click:2', () => {
  66:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  67:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  68:   updateSingleButtonGroup(3, { disabled: false }, buttonGroup1);
  69:   ggb1.instance.setValue('showMM', false);
  70    ggb1.instance.setValue('showMI', true);

  76  
  77: buttonGroup1.on('click:3', () => {
  78:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  79:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  80:   updateSingleButtonGroup(3, { disabled: true }, buttonGroup1);
  81:   ggb1.instance.setValue('showMM', true);
  82    ggb1.instance.setValue('showMI', true);

DIDwhiteboard • G6/M6/TD L20 - Choosing a Measure of Center/slide-ea520d4c2001.js:
  52  
  53: buttonGroup1.on('click:1', () => {
  54:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  55:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  56:   updateSingleButtonGroup(3, { disabled: false }, buttonGroup1);
  57:   ggb1.instance.setValue('showMM', true);
  58    ggb1.instance.setValue('showMI', false);

  64  
  65: buttonGroup1.on('click:2', () => {
  66:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  67:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  68:   updateSingleButtonGroup(3, { disabled: false }, buttonGroup1);
  69:   ggb1.instance.setValue('showMM', false);
  70    ggb1.instance.setValue('showMI', true);

  76  
  77: buttonGroup1.on('click:3', () => {
  78:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  79:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  80:   updateSingleButtonGroup(3, { disabled: true }, buttonGroup1);
  81:   ggb1.instance.setValue('showMM', true);
  82    ggb1.instance.setValue('showMI', true);

DIDwhiteboard • G7/G7 M3 TD L18 Slide 26.js:
   35  //first line of buttons
   36: buttonGroup3.on('click:1', () => {
   37:   pointSelected = "S1";
   38:   buttonGroup3.updateSingleButton({ color: "secondary" }, 1);
   39:   ggb1.instance.setValue("shownVal", -3);
   40    buttonClickFunction();
   41  });
   42: buttonGroup3.on('click:2', () => {
   43:   pointSelected = "S2";
   44:   buttonGroup3.updateSingleButton({ color: "secondary" }, 2);
   45:   ggb1.instance.setValue("shownVal", -2);
   46    buttonClickFunction();
   47  });
   48: buttonGroup3.on('click:3', () => {
   49:   pointSelected = "S3";
   50:   buttonGroup3.updateSingleButton({ color: "secondary" }, 3);
   51:   ggb1.instance.setValue("shownVal", -1);
   52    buttonClickFunction();
   53  });
   54: buttonGroup3.on('click:4', () => {
   55:   pointSelected = "S4";
   56:   buttonGroup3.updateSingleButton({ color: "secondary" }, 4);
   57:   ggb1.instance.setValue("shownVal", 0);
   58    buttonClickFunction();

   61  //second line of buttons
   62: buttonGroup4.on('click:1', () => {
   63:   pointSelected = "S5";
   64:   buttonGroup4.updateSingleButton({ color: "secondary" }, 1);
   65:   ggb1.instance.setValue("shownVal", 0.5);
   66    buttonClickFunction();
   67  });
   68: buttonGroup4.on('click:2', () => {
   69:   pointSelected = "S6";
   70:   buttonGroup4.updateSingleButton({ color: "secondary" }, 2);
   71:   ggb1.instance.setValue("shownVal", 0.9);
   72    buttonClickFunction();
   73  });
   74: buttonGroup4.on('click:3', () => {
   75:   pointSelected = "S7";
   76:   buttonGroup4.updateSingleButton({ color: "secondary" }, 3);
   77:   ggb1.instance.setValue("shownVal", 1);
   78    buttonClickFunction();
   79  });
   80: buttonGroup4.on('click:4', () => {
   81:   pointSelected = "S8";
   82:   buttonGroup4.updateSingleButton({ color: "secondary" }, 4);
   83:   ggb1.instance.setValue("shownVal", 1.1);
   84    buttonClickFunction();

   87  //third line of buttons
   88: buttonGroup2.on('click:1', () => {
   89:   pointSelected = "S9";
   90:   buttonGroup2.updateSingleButton({ color: "secondary" }, 1);
   91:   ggb1.instance.setValue("shownVal", 1.5);
   92    buttonClickFunction();
   93  });
   94: buttonGroup2.on('click:2', () => {
   95:   pointSelected = "S10";
   96:   buttonGroup2.updateSingleButton({ color: "secondary" }, 2);
   97:   ggb1.instance.setValue("shownVal", 2);
   98    buttonClickFunction();
   99  });
  100: buttonGroup2.on('click:3', () => {
  101:   pointSelected = "S11";
  102:   buttonGroup2.updateSingleButton({ color: "secondary" }, 3);
  103:   ggb1.instance.setValue("shownVal", 3);
  104    buttonClickFunction();
  105  });
  106: buttonGroup2.on('click:4', () => {
  107:   pointSelected = "S12";
  108:   buttonGroup2.updateSingleButton({ color: "secondary" }, 4);
  109:   ggb1.instance.setValue("shownVal", 4);
  110    buttonClickFunction();

DIDwhiteboard • G7/M1/TA L01 - An Experiment with Ratios and Rates/slide10.js:
  489  //button 1 starts time and makes cells not editable
  490: buttonGroup1.on("click:1", () => {
  491:   ggb1.instance.setAnimating("scrub", true);
  492    ggb1.instance.startAnimation();

  508  //manually change cell editable true/false states according to cells editable by students
  509: buttonGroup1.on("click:2", () => {
  510:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  511:   ggb1.instance.evalCommand("RunClickScript(buttonResetAll)");
  512    table1.updateCell(0, 0, { className: "", editable: false });

DIDwhiteboard • G7/M1/TA L01 - An Experiment with Ratios and Rates/slide11.js:
  489  //button 1 starts time and makes cells not editable
  490: buttonGroup1.on("click:1", () => {
  491:   ggb1.instance.setAnimating("scrub", true);
  492    ggb1.instance.startAnimation();

  508  //manually change cell editable true/false states according to cells editable by students
  509: buttonGroup1.on("click:2", () => {
  510:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  511:   ggb1.instance.evalCommand("RunClickScript(buttonResetAll)");
  512    table1.updateCell(0, 0, { className: "", editable: false });

DIDwhiteboard • G7/M1/TA L01 - An Experiment with Ratios and Rates/slide13.js:
  483  //button 1 starts time and makes cells not editable
  484: buttonGroup1.on("click:1", () => {
  485:   ggb1.instance.setAnimating("scrub", true);
  486    ggb1.instance.startAnimation();

  502  //manually change cell editable true/false states according to cells editable by students
  503: buttonGroup1.on("click:2", () => {
  504:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  505:   ggb1.instance.evalCommand("RunClickScript(buttonResetAll)");
  506    table1.updateCell(0, 0, { className: "", editable: false });

DIDwhiteboard • G7/M1/TA L01 - An Experiment with Ratios and Rates/slide14.js:
  483  //button 1 starts time and makes cells not editable
  484: buttonGroup1.on("click:1", () => {
  485:   ggb1.instance.setAnimating("scrub", true);
  486    ggb1.instance.startAnimation();

  502  //manually change cell editable true/false states according to cells editable by students
  503: buttonGroup1.on("click:2", () => {
  504:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  505:   ggb1.instance.evalCommand("RunClickScript(buttonResetAll)");
  506    table1.updateCell(0, 0, { className: "", editable: false });

DIDwhiteboard • G7/M2/TA L02 - Adding Integers/slide26.js:
  29  
  30: buttonGroup1.on('click:1', () => {
  31:   let clickCount = ggb1.instance.getValue('clickCount');
  32    ggb1.instance.setValue('clickCount', clickCount + 1);

  34  
  35: buttonGroup1.on('click:2', () => {
  36:   let clickCount = ggb1.instance.getValue('clickCount');
  37    ggb1.instance.setValue('clickCount', clickCount + 1);

DIDwhiteboard • G7/M2/TB L09 - Demo - Subtracting Negative Values/slide1.js:
  17  
  18: buttonGroup1.on('click:1', () => {
  19:   let clickCounterPlus1 = ggb1.instance.getValue('clickCounter') + 1;
  20    ggb1.instance.stopAnimation();

  30  
  31: buttonGroup1.on('click:2', () => {
  32:   ggb1.instance.stopAnimation();
  33    ggb1.instance.setValue('time', 1);

DIDwhiteboard • G7/M2/TC L13 - Understanding Multiples of Negative Numbers/slide25.js:
  45  
  46: buttonGroup1.on("click:1", () => {
  47:   ggb1.instance.evalCommand("RunClickScript(opposite)");
  48    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  51  
  52: buttonGroup1.on("click:2", () => {
  53:   ggb1.instance.setValue("numOfGroups", 2);
  54    ggb1.instance.setValue("sizeOfGroup", 4);

DIDwhiteboard • G7/M2/TC L13 - Understanding Multiples of Negative Numbers/slide26.js:
  22  
  23: buttonGroup1.on("click:1", () => {
  24:   ggb1.instance.evalCommand("RunClickScript(opposite)");
  25    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  28  
  29: buttonGroup1.on("click:2", () => {
  30:   ggb1.instance.setValue("numOfGroups", 0);
  31    ggb1.instance.setValue("sizeOfGroup", 0);

DIDwhiteboard • G7/M2/TC L13 - Understanding Multiples of Negative Numbers/slide27.js:
  22  
  23: buttonGroup1.on("click:1", () => {
  24:   ggb1.instance.evalCommand("RunClickScript(opposite)");
  25    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  28  
  29: buttonGroup1.on("click:2", () => {
  30:   ggb1.instance.setValue("numOfGroups", 0);
  31    ggb1.instance.setValue("sizeOfGroup", 0);

DIDwhiteboard • G7/M3/TA L02 - The Distributive Property and the Tabular Model/slide10.js:
  33  
  34: buttonGroup1.on('click:1', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  37:   ggb1.instance.setAnimating('time', true);
  38    ggb1.instance.startAnimation();

  40  
  41: buttonGroup1.on('click:2', () => {
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  43:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  44:   ggb1.instance.setValue('time', 0);
  45    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide3.js:
  21  
  22: buttonGroup1.on('click:1', () => {
  23:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  24:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  25:   button2.updateData({ visible: true });
  26:   text2.updateData({ visible: true });
  27:   input2.updateData({ visible: true });
  28:   ggb1.instance.setValue('locked', true);
  29  });
  30  
  31: buttonGroup1.on('click:2', () => {
  32:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  33:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  34:   ggb1.instance.setValue('locked', false);
  35  });

DIDwhiteboard • G7/M3/TB L08 - Strategies to Determine Unknown Angle Measures/slide10.js:
  23  
  24: buttonGroup1.on('click:1', () => {
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  26:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  27:   button2.updateData({ visible: true });
  28:   text2.updateData({ visible: true });
  29:   input2.updateData({ visible: true });
  30:   ggb1.instance.setValue('locked', true);
  31  });
  32  
  33: buttonGroup1.on('click:2', () => {
  34:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  35:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  36:   ggb1.instance.setValue('locked', false);
  37  });

DIDwhiteboard • G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide1 PA.js:
  39  //click through to pump button
  40: buttonGroup1.on("click:1", () => {
  41: 	if (ggb2.instance.getValue("pumpChoice") != 0) {
  42  		ggb2.instance.setFixed("pumpChoice", true, false);

  62  //click through to new balloon button
  63: buttonGroup1.on("click:2", () => {
  64: 	ggb2.instance.setFixed("pumpChoice", true, true);
  65  	ggb1.instance.evalCommand("RunClickScript(button2)");

DIDwhiteboard • G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide1.js:
  20  //click through to pump button
  21: buttonGroup1.on("click:1", () => {
  22:   ggb1.instance.evalCommand("RunClickScript(button1)");
  23    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  26  //click through to new balloon button
  27: buttonGroup1.on("click:2", () => {
  28:   let pumpNumbers = [...ggb1.data.pumpNumbers];
  29    pumpNumbers.push(ggb1.instance.getValue("pumpCount"));

DIDwhiteboard • G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide26.js:
   76  //first line of buttons
   77: buttonGroup1.on("click:1", () => {
   78:   pointSelected = "S1";
   79:   setButtonColor();
   80:   buttonGroup1.updateSingleButton({ color: "warning" }, 1);
   81:   ggb1.instance.setValue("shownVal", -3);
   82    buttonClickFunction();
   83  });
   84: buttonGroup1.on("click:2", () => {
   85:   pointSelected = "S2";
   86:   setButtonColor();
   87:   buttonGroup1.updateSingleButton({ color: "warning" }, 2);
   88:   ggb1.instance.setValue("shownVal", -2);
   89    buttonClickFunction();
   90  });
   91: buttonGroup1.on("click:3", () => {
   92:   pointSelected = "S3";
   93:   setButtonColor();
   94:   buttonGroup1.updateSingleButton({ color: "warning" }, 3);
   95:   ggb1.instance.setValue("shownVal", -1);
   96    buttonClickFunction();
   97  });
   98: buttonGroup1.on("click:4", () => {
   99:   pointSelected = "S4";
  100:   setButtonColor();
  101:   buttonGroup1.updateSingleButton({ color: "warning" }, 4);
  102:   ggb1.instance.setValue("shownVal", 0);
  103    buttonClickFunction();

  106  //second line of buttons
  107: buttonGroup2.on("click:1", () => {
  108:   pointSelected = "S5";
  109:   setButtonColor();
  110:   buttonGroup2.updateSingleButton({ color: "warning" }, 1);
  111:   ggb1.instance.setValue("shownVal", 0.5);
  112    buttonClickFunction();
  113  });
  114: buttonGroup2.on("click:2", () => {
  115:   pointSelected = "S6";
  116:   setButtonColor();
  117:   buttonGroup2.updateSingleButton({ color: "warning" }, 2);
  118:   ggb1.instance.setValue("shownVal", 0.9);
  119    buttonClickFunction();
  120  });
  121: buttonGroup2.on("click:3", () => {
  122:   pointSelected = "S7";
  123:   setButtonColor();
  124:   buttonGroup2.updateSingleButton({ color: "warning" }, 3);
  125:   ggb1.instance.setValue("shownVal", 1);
  126    buttonClickFunction();
  127  });
  128: buttonGroup2.on("click:4", () => {
  129:   pointSelected = "S8";
  130:   setButtonColor();
  131:   buttonGroup2.updateSingleButton({ color: "warning" }, 4);
  132:   ggb1.instance.setValue("shownVal", 1.1);
  133    buttonClickFunction();

  136  //third line of buttons
  137: buttonGroup3.on("click:1", () => {
  138:   pointSelected = "S9";
  139:   setButtonColor();
  140:   buttonGroup3.updateSingleButton({ color: "warning" }, 1);
  141:   ggb1.instance.setValue("shownVal", 1.5);
  142    buttonClickFunction();
  143  });
  144: buttonGroup3.on("click:2", () => {
  145:   pointSelected = "S10";
  146:   setButtonColor();
  147:   buttonGroup3.updateSingleButton({ color: "warning" }, 2);
  148:   ggb1.instance.setValue("shownVal", 2);
  149    buttonClickFunction();
  150  });
  151: buttonGroup3.on("click:3", () => {
  152:   pointSelected = "S11";
  153:   setButtonColor();
  154:   buttonGroup3.updateSingleButton({ color: "warning" }, 3);
  155:   ggb1.instance.setValue("shownVal", 3);
  156    buttonClickFunction();
  157  });
  158: buttonGroup3.on("click:4", () => {
  159:   pointSelected = "S12";
  160:   setButtonColor();
  161:   buttonGroup3.updateSingleButton({ color: "warning" }, 4);
  162:   ggb1.instance.setValue("shownVal", 4);
  163    buttonClickFunction();

DIDwhiteboard • G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide27.js:
   74  //first line of buttons
   75: buttonGroup1.on("click:1", () => {
   76:   pointSelected = "S1";
   77:   setButtonColor();
   78:   buttonGroup1.updateSingleButton({ color: "warning" }, 1);
   79:   ggb1.instance.setValue("shownVal", -4);
   80    buttonClickFunction();
   81  });
   82: buttonGroup1.on("click:2", () => {
   83:   pointSelected = "S2";
   84:   setButtonColor();
   85:   buttonGroup1.updateSingleButton({ color: "warning" }, 2);
   86:   ggb1.instance.setValue("shownVal", -2);
   87    buttonClickFunction();
   88  });
   89: buttonGroup1.on("click:3", () => {
   90:   pointSelected = "S3";
   91:   setButtonColor();
   92:   buttonGroup1.updateSingleButton({ color: "warning" }, 3);
   93:   ggb1.instance.setValue("shownVal", 0);
   94    buttonClickFunction();
   95  });
   96: buttonGroup1.on("click:4", () => {
   97:   pointSelected = "S4";
   98:   setButtonColor();
   99:   buttonGroup1.updateSingleButton({ color: "warning" }, 4);
  100:   ggb1.instance.setValue("shownVal", 3);
  101    buttonClickFunction();

  104  //second line of buttons
  105: buttonGroup2.on("click:1", () => {
  106:   pointSelected = "S5";
  107:   setButtonColor();
  108:   buttonGroup2.updateSingleButton({ color: "warning" }, 1);
  109:   ggb1.instance.setValue("shownVal", 7.5);
  110    buttonClickFunction();
  111  });
  112: buttonGroup2.on("click:2", () => {
  113:   pointSelected = "S6";
  114:   setButtonColor();
  115:   buttonGroup2.updateSingleButton({ color: "warning" }, 2);
  116:   ggb1.instance.setValue("shownVal", 7.9);
  117    buttonClickFunction();
  118  });
  119: buttonGroup2.on("click:3", () => {
  120:   pointSelected = "S7";
  121:   setButtonColor();
  122:   buttonGroup2.updateSingleButton({ color: "warning" }, 3);
  123:   ggb1.instance.setValue("shownVal", 8);
  124    buttonClickFunction();
  125  });
  126: buttonGroup2.on("click:4", () => {
  127:   pointSelected = "S8";
  128:   setButtonColor();
  129:   buttonGroup2.updateSingleButton({ color: "warning" }, 4);
  130:   ggb1.instance.setValue("shownVal", 8.1);
  131    buttonClickFunction();

  134  //third line of buttons
  135: buttonGroup3.on("click:1", () => {
  136:   pointSelected = "S9";
  137:   setButtonColor();
  138:   buttonGroup3.updateSingleButton({ color: "warning" }, 1);
  139:   ggb1.instance.setValue("shownVal", 8.5);
  140    buttonClickFunction();
  141  });
  142: buttonGroup3.on("click:2", () => {
  143:   pointSelected = "S10";
  144:   setButtonColor();
  145:   buttonGroup3.updateSingleButton({ color: "warning" }, 2);
  146:   ggb1.instance.setValue("shownVal", 9);
  147    buttonClickFunction();
  148  });
  149: buttonGroup3.on("click:3", () => {
  150:   pointSelected = "S11";
  151:   setButtonColor();
  152:   buttonGroup3.updateSingleButton({ color: "warning" }, 3);
  153:   ggb1.instance.setValue("shownVal", 10);
  154    buttonClickFunction();
  155  });
  156: buttonGroup3.on("click:4", () => {
  157:   pointSelected = "S12";
  158:   setButtonColor();
  159:   buttonGroup3.updateSingleButton({ color: "warning" }, 4);
  160:   ggb1.instance.setValue("shownVal", 12);
  161    buttonClickFunction();

DIDwhiteboard • G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide28.js:
   73  //first line of buttons
   74: buttonGroup1.on("click:1", () => {
   75:   pointSelected = "S1";
   76:   setButtonColor();
   77:   buttonGroup1.updateSingleButton({ color: "warning" }, 1);
   78:   ggb1.instance.setValue("shownVal", -9);
   79    buttonClickFunction();
   80  });
   81: buttonGroup1.on("click:2", () => {
   82:   pointSelected = "S2";
   83:   setButtonColor();
   84:   buttonGroup1.updateSingleButton({ color: "warning" }, 2);
   85:   ggb1.instance.setValue("shownVal", -6);
   86    buttonClickFunction();
   87  });
   88: buttonGroup1.on("click:3", () => {
   89:   pointSelected = "S3";
   90:   setButtonColor();
   91:   buttonGroup1.updateSingleButton({ color: "warning" }, 3);
   92:   ggb1.instance.setValue("shownVal", -4);
   93    buttonClickFunction();
   94  });
   95: buttonGroup1.on("click:4", () => {
   96:   pointSelected = "S4";
   97:   setButtonColor();
   98:   buttonGroup1.updateSingleButton({ color: "warning" }, 4);
   99:   ggb1.instance.setValue("shownVal", -3.5);
  100    buttonClickFunction();

  103  //second line of buttons
  104: buttonGroup2.on("click:1", () => {
  105:   pointSelected = "S5";
  106:   setButtonColor();
  107:   buttonGroup2.updateSingleButton({ color: "warning" }, 1);
  108:   ggb1.instance.setValue("shownVal", -3.1);
  109    buttonClickFunction();
  110  });
  111: buttonGroup2.on("click:2", () => {
  112:   pointSelected = "S6";
  113:   setButtonColor();
  114:   buttonGroup2.updateSingleButton({ color: "warning" }, 2);
  115:   ggb1.instance.setValue("shownVal", -3);
  116    buttonClickFunction();
  117  });
  118: buttonGroup2.on("click:3", () => {
  119:   pointSelected = "S7";
  120:   setButtonColor();
  121:   buttonGroup2.updateSingleButton({ color: "warning" }, 3);
  122:   ggb1.instance.setValue("shownVal", -2.9);
  123    buttonClickFunction();
  124  });
  125: buttonGroup2.on("click:4", () => {
  126:   pointSelected = "S8";
  127:   setButtonColor();
  128:   buttonGroup2.updateSingleButton({ color: "warning" }, 4);
  129:   ggb1.instance.setValue("shownVal", -2.5);
  130    buttonClickFunction();

  133  //third line of buttons
  134: buttonGroup3.on("click:1", () => {
  135:   pointSelected = "S9";
  136:   setButtonColor();
  137:   buttonGroup3.updateSingleButton({ color: "warning" }, 1);
  138:   ggb1.instance.setValue("shownVal", -2);
  139    buttonClickFunction();
  140  });
  141: buttonGroup3.on("click:2", () => {
  142:   pointSelected = "S10";
  143:   setButtonColor();
  144:   buttonGroup3.updateSingleButton({ color: "warning" }, 2);
  145:   ggb1.instance.setValue("shownVal", 0);
  146    buttonClickFunction();
  147  });
  148: buttonGroup3.on("click:3", () => {
  149:   pointSelected = "S11";
  150:   setButtonColor();
  151:   buttonGroup3.updateSingleButton({ color: "warning" }, 3);
  152:   ggb1.instance.setValue("shownVal", 3);
  153    buttonClickFunction();
  154  });
  155: buttonGroup3.on("click:4", () => {
  156:   pointSelected = "S12";
  157:   setButtonColor();
  158:   buttonGroup3.updateSingleButton({ color: "warning" }, 4);
  159:   ggb1.instance.setValue("shownVal", 6);
  160    buttonClickFunction();

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide3.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide6.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide9.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide13.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide16.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide20.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide23.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide26.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide30.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide31.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TA L05 - Constructing Quadrilaterals and Triangles/slide32.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TB L08 - Two Sides and One Angle/slide3.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TB L08 - Two Sides and One Angle/slide6.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TB L08 - Two Sides and One Angle/slide9.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TB L08 - Two Sides and One Angle/slide13.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TB L08 - Two Sides and One Angle/slide16.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.updateInnerData({ time1: 0, time2: 0, time3: 0 });

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   ggb1.instance.stopAnimation();
  41    ggb1.updateInnerData({ time2: 0, time3: 0 });

  47  
  48: buttonGroup1.on("click:3", () => {
  49:   ggb1.instance.stopAnimation();
  50    tagFlips();

DIDwhiteboard • G7/M4/TC L11 - The Inside of a Circle/Slide 1.js:
  21  
  22: buttonGroup1.on('click:1', () => {
  23:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  24:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  25:   components.cc_sharewithclass_a60a548a2a9f_button1.updateData({
  26:     visible: true,
  27:   });
  28:   components.cc_sharewithclass_a60a548a2a9f_textbox1.updateData({
  29:     visible: true,
  30:   });
  31:   components.cc_sharewithclass_a60a548a2a9f_input1.updateData({
  32:     visible: true,
  33:   });
  34:   ggb1.instance.setVisible('B1', false);
  35    ggb1.instance.setVisible('eq1', false);

  37  
  38: buttonGroup1.on('click:2', () => {
  39:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  40:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  41:   ggb1.instance.setVisible('B1', true);
  42    ggb1.instance.setVisible('eq1', true);

DIDwhiteboard • G7/M4/TC L11 - The Inside of a Circle/Slide 2.js:
  64  
  65: buttonGroup1.on("click:1", () => {
  66:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  67:   if (ggb1.instance.getValue("y(B)") == 0) {
  68      text2.updateData({ text: "Hmm... your figure has no height." });

  89  
  90: buttonGroup1.on("click:2", () => {
  91:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  92:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  93:   //set all values back to initial state
  94:   ggb1.instance.stopAnimation();
  95    ggb1.instance.setValue("time", 0);

DIDwhiteboard • G7/M4/TC L11 - The Inside of a Circle/Slide 3.js:
  64  
  65: buttonGroup1.on("click:1", () => {
  66:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  67:   if (ggb1.instance.getValue("y(B)") == 0) {
  68      text2.updateData({ text: "Hmm... your figure has no height." });

  80  
  81: buttonGroup1.on("click:2", () => {
  82:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  83:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  84:   //set all values back to initial state
  85:   ggb1.instance.stopAnimation();
  86    ggb1.instance.setValue("time", 0);

DIDwhiteboard • G7/M4/TC L11 - The Inside of a Circle/Slide 8.js:
  18  
  19: buttonGroup1.on('click:1', () => {
  20:   if (ggb1.innerData['unitValue'] == 1) {
  21      ggb1.instance.setVisible('pic1Grid', false);

  51  
  52: buttonGroup1.on('click:2', () => {
  53:   if (ggb1.innerData['unitValue'] == 0.5) {
  54      ggb1.instance.setVisible('pic1Grid', true);

DIDwhiteboard • G7/M4/TC L11 - The Inside of a Circle/Slide 14.js:
  55  
  56: buttonGroup1.on("click:1", () => {
  57:   ggb1.instance.setValue("a", ggb1.instance.getValue("a") - 0.1);
  58    if (Math.round(ggb1.instance.getValue("a") * 10) / 10 == 0.1) {

  76  
  77: buttonGroup1.on("click:2", () => {
  78:   if (ggb1.instance.getValue("a") < 1) {
  79      ggb1.instance.setValue("a", ggb1.instance.getValue("a") + 0.1);

DIDwhiteboard • G7/M4/TC L15 - Watering a Lawn/slide3.js:
  43  
  44: buttonGroup1.on("click:1", () => {
  45:   // keep it
  46:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  47:   ggb1.updateData({ string64: ggb1.instance.getBase64() });
  48  });
  49  
  50: buttonGroup1.on("click:2", () => {
  51:   // adjust it
  52:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  53:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  54:   button4.updateData({ visible: true });
  55:   ggb1.updateInnerData({ time1: 0, time2: 0 });
  56    ggb1.updateData({ init: true });

  62  
  63: buttonGroup1.on("click:3", () => {
  64:   // start over
  65:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  66:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  67:   button4.updateData({ visible: true });
  68:   ggb1.instance.setBase64(ggb1.data.initialState);
  69    ggb1.updateData({ init: true });

DIDwhiteboard • G7/M4/TC L15 - Watering a Lawn/slide8.js:
  53  
  54: buttonGroup1.on("click:1", () => {
  55:   // keep it
  56:   ggb1.updateData({ string64: ggb1.instance.getBase64() });
  57    updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);

  62  
  63: buttonGroup1.on("click:2", () => {
  64:   // adjust it
  65:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  66:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  67:   button4.updateData({ visible: true });
  68:   ggb1.updateInnerData({ time1: 0, time2: 0 });
  69    ggb1.updateData({ init: true });

  75  
  76: buttonGroup1.on("click:3", () => {
  77:   // start over
  78:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  79:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  80:   button4.updateData({ visible: true });
  81:   ggb1.instance.setBase64(ggb1.data.initialState);
  82    ggb1.updateData({ init: true });

DIDwhiteboard • G7/M4/TE L23 - Cross Section Scavenger Hunt/OLD-slide19.js:
  28  
  29: buttonGroup1.on('click:1', () => {
  30:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  32:   ggb1.instance.setValue('showPrismPyramidBool', true);
  33    ggb2.instance.setValue('showPrismPyramidBool', true);

  35  
  36: buttonGroup1.on('click:2', () => {
  37:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  38:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  39:   ggb1.instance.setValue('showPrismPyramidBool', false);
  40    ggb2.instance.setValue('showPrismPyramidBool', false);

DIDwhiteboard • G7/M4/TE L23 - Cross Section Scavenger Hunt/slide19.js:
  37  
  38: buttonGroup1.on('click:1', () => {
  39:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  40:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  41:   ggb1.instance.setValue('showPrismPyramidBool', true);
  42    ggb2.instance.setValue('showPrismPyramidBool', true);

  44  
  45: buttonGroup1.on('click:2', () => {
  46:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  47:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  48:   ggb1.instance.setValue('showPrismPyramidBool', false);
  49    ggb2.instance.setValue('showPrismPyramidBool', false);

DIDwhiteboard • G7/M5/TA L02 - Racing for Percents/slide3.js:
  31  
  32: buttonGroup1.on('click:1', () => {
  33:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  34:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  35:   ggb1.instance.setAnimating('time', true);
  36    ggb1.instance.startAnimation();

  39  
  40: buttonGroup1.on('click:2', () => {
  41:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  43:   ggb1.instance.stopAnimation();
  44  });
  45  
  46: buttonGroup1.on('click:3', () => {
  47:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  48:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  49:   ggb1.instance.setAnimating('time', true);
  50    ggb1.instance.startAnimation();

  52  
  53: buttonGroup1.on('click:4', () => {
  54:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  55:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  56:   ggb1.instance.setAnimating('time', false);
  57    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G7/M5/TA L02 - Racing for Percents/slide4.js:
  44  
  45: buttonGroup1.on('click:1', () => {
  46:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  47:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  48:   ggb1.instance.setAnimating('time', true);
  49    ggb1.instance.startAnimation();

  55  
  56: buttonGroup1.on('click:2', () => {
  57:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  58:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  59:   ggb1.instance.stopAnimation();
  60  });
  61  
  62: buttonGroup1.on('click:3', () => {
  63:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  64:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  65:   ggb1.instance.setAnimating('time', true);
  66    ggb1.instance.startAnimation();

  68  
  69: buttonGroup1.on('click:4', () => {
  70:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  71:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  72:   ggb1.instance.setAnimating('time', false);
  73    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G7/M5/TA L02 - Racing for Percents/slide6.js:
   94  
   95: buttonGroup1.on('click:1', () => {
   96:   shareText1.updateData({ visible: true });
   97:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   98:   //table fill
   99:   ggb1.instance.setAnimating('time', false);
  100    ggb1.instance.setValue('time', 0);

  106  
  107: buttonGroup1.on('click:2', () => {
  108:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  109:   // check unit rates
  110:   if (
  111:     Math.round(
  112:       utils.math.evaluateLatex(
  113:         table1.getCell(0, 2).value.replace('\\%', '*0.01')
  114:       ).value * 1000000
  115:     ) /
  116:       1000000 !=
  117:     ggb1.instance.getValue('myPercent')
  118    ) {

DIDwhiteboard • G7/M5/TA L02 - Racing for Percents/slide9.js:
  45  
  46: buttonGroup1.on('click:1', () => {
  47:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  48:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  49:   ggb1.instance.setAnimating('time', true);
  50    ggb1.instance.startAnimation();

  56  
  57: buttonGroup1.on('click:2', () => {
  58:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  59:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  60:   ggb1.instance.stopAnimation();
  61  });
  62  
  63: buttonGroup1.on('click:3', () => {
  64:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  65:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  66:   ggb1.instance.setAnimating('time', true);
  67    ggb1.instance.startAnimation();

  69  
  70: buttonGroup1.on('click:4', () => {
  71:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  72:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  73:   ggb1.instance.setAnimating('time', false);
  74    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G7/M5/TA L02 - Racing for Percents/slide11.js:
   90  
   91: buttonGroup1.on('click:1', () => {
   92:   shareText1.updateData({ visible: true });
   93:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   94:   //table fill
   95:   ggb1.instance.setAnimating('time', false);
   96    ggb1.instance.setValue('time', 0);

  102  
  103: buttonGroup1.on('click:2', () => {
  104:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  105:   // check unit rates
  106:   if (
  107:     Math.round(
  108:       utils.math.evaluateLatex(
  109:         table1.getCell(0, 2).value.replace('\\%', '*0.01')
  110:       ).value * 1000000
  111:     ) /
  112:       1000000 !=
  113:     ggb1.instance.getValue('myPercent')
  114    ) {

DIDwhiteboard • G7/M5/TD L19 - Applying Percent Error/slide4.js:
   34  
   35: buttongroup1.on("click:1", () => {
   36:   ggb1.instance.setVisible("h", false);
   37    ggb1.instance.setValue("time", 0);

  131  
  132: buttongroup1.on("click:2", () => {
  133:   if (ggb1.instance.getValue("count") == 0) {
  134      let num = utils.math.evaluateLatex(table1.getCell(0, 2).value);

DIDwhiteboard • G7/M6/TB L07 - Relative Frequency Graph (Demo)/slide1.js:
  31  
  32: buttonGroup1.on('click:1', () => {
  33:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  34:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  35:   ggb1.instance.evalCommand('RunClickScript(pull)');
  36  });
  37  
  38: buttonGroup1.on('click:2', () => {
  39:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  40:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  41:   ggb1.instance.evalCommand('RunClickScript(reset)');
  42    ggb1.instance.setValue('count', 2);

DIDwhiteboard • G7/M6/TB L08 - Picking Blue/Slide 5.js:
  31  
  32: buttonGroup1.on("click:1", () => {
  33:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  34:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  35:   ggb1.instance.evalCommand("SetValue(blueChipX,RandomBetween(-2,2))");
  36    ggb2.instance.setVisible("q", true);

  45  
  46: buttonGroup1.on("click:2", () => {
  47:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  48:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  49:   ggb1.instance.setAnimating("time", false);
  50    ggb1.instance.setValue("time", 0);

DIDwhiteboard • G7/M6/TB L08 - Picking Blue/Slide 7.js:
  31  
  32: buttonGroup1.on("click:1", () => {
  33:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  34:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  35:   ggb1.instance.evalCommand("SetValue(blueChipX,RandomBetween(-2,2))");
  36    ggb2.instance.setVisible("q", true);

  45  
  46: buttonGroup1.on("click:2", () => {
  47:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  48:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  49:   ggb1.instance.setAnimating("time", false);
  50    ggb1.instance.setValue("time", 0);

DIDwhiteboard • G7/M6/TB L08 - Picking Blue/Slide 14.js:
  45  
  46: buttonGroup1.on("click:1", () => {
  47:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  48:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  49:   ggb1.instance.evalCommand("SetValue(blueChipX,RandomBetween(-2,2))");
  50    ggb2.instance.setVisible("q", true);

  60  
  61: buttonGroup1.on("click:2", () => {
  62:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  63:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  64:   ggb1.instance.setAnimating("time", false);
  65    ggb1.instance.setValue("time", 0);

DIDwhiteboard • G7/M6/TD L19 - Memory Games/Slide 3.js:
  19  
  20: buttonGroup1.on('click:1', () => {
  21:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  22:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  23:   text2.updateData({ visible: true });
  24:   input1.updateData({ visible: true });
  25:   button2.updateData({ visible: true });
  26:   ggb1.instance.setValue('show', true);
  27    ggb1.instance.setFixed('DragPoint', false, false);

  30  
  31: buttonGroup1.on('click:2', () => {
  32:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  33:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  34:   ggb1.instance.setValue('show', false);
  35    ggb1.instance.setFixed('DragPoint', false, true);

DIDwhiteboard • G7/M6/TD L19 - Memory Games/Slide 5.js:
  20  
  21: buttonGroup1.on('click:1', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  23:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  24:   text2.updateData({ visible: true });
  25:   input1.updateData({ visible: true });
  26:   button2.updateData({ visible: true });
  27:   ggb1.instance.setValue('show', true);
  28    ggb1.instance.setFixed('DragPoint', false, false);

  31  
  32: buttonGroup1.on('click:2', () => {
  33:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  34:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  35:   ggb1.instance.setValue('show', false);
  36    ggb1.instance.setFixed('DragPoint', false, true);

DIDwhiteboard • G8/M1/TA L01 - Large and Small Positive Numbers/slide1.js:
  39  
  40: buttonGroup1.on("click:1", () => {
  41:   ggb2.instance.evalCommand(
  42      "SetValue(fakeOptions, SelectedIndex(fakeOptions) - 1)"

  47  
  48: buttonGroup1.on("click:2", () => {
  49:   ggb2.instance.evalCommand(
  50      "SetValue(fakeOptions, SelectedIndex(fakeOptions) + 1)"

DIDwhiteboard • G8/M1/TB L06 - More Properties of Exponents/slide14.js:
   6  
   7: buttonGroup1.on('click:1', () => {
   8:   ggb1.instance.evalCommand('RunClickScript(button1)');
   9  });
  10  
  11: buttonGroup1.on('click:2', () => {
  12:   ggb1.instance.evalCommand('RunClickScript(button2)');
  13  });

DIDwhiteboard • G8/M1/TC L11 - Small Positive Numbers in Scientific Notation/slide1.js:
  39  
  40: buttonGroup1.on("click:1", () => {
  41:   ggb2.instance.evalCommand(
  42      "SetValue(fakeOptions, SelectedIndex(fakeOptions) - 1)"

  47  
  48: buttonGroup1.on("click:2", () => {
  49:   ggb2.instance.evalCommand(
  50      "SetValue(fakeOptions, SelectedIndex(fakeOptions) + 1)"

DIDwhiteboard • G8/M1/TC L13 - Applications with Numbers in Scientific Notation/slide2.js:
  29  
  30: buttonGroup1.on("click:1", () => {
  31:   ggb1.instance.stopAnimation();
  32    ggb1.instance.setAnimating("time", true);

DIDwhiteboard • G8/M1/TC L13 - Applications with Numbers in Scientific Notation/slide3.js:
  4  
  5: buttonGroup1.on("click:1", () => {
  6:   ggb1.instance.stopAnimation();
  7    ggb1.instance.setAnimating("time", true);

DIDwhiteboard • G8/M1/TC L13 - Applications with Numbers in Scientific Notation/slide10.js:
   9  
  10: buttonGroup1.on("click:1", () => {
  11:   ggb1.instance.setValue(
  12      "numDollars",

DIDwhiteboard • G8/M1/TC L13 - Applications with Numbers in Scientific Notation/slide11.js:
  10  
  11: buttonGroup1.on("click:1", () => {
  12:   ggb1.instance.setValue(
  13      "numDollars",

DIDwhiteboard • G8/M1/TC L13 - Applications with Numbers in Scientific Notation/slide12.js:
  11  
  12: buttonGroup1.on("click:1", () => {
  13:   ggb1.instance.setValue(
  14      "numDollars",

DIDwhiteboard • G8/M1/TC L13 - Applications with Numbers in Scientific Notation/slide14.js:
  47  
  48: buttonGroup1.on("click:1", () => {
  49:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  50:   const quants = table1.data.rows.map((row) => row[2].value);
  51:   if (!quants.every(isWhole)) {
  52:     text2.updateData({ text: "Make sure to use whole numbers!" });
  53:     return;
  54:   }
  55:   const quantsNum = quants.map(
  56:     (numStr) => utils.math.evaluateLatex(numStr).value
  57:   );
  58:   if (!quantsNum.every((quantity) => quantity < 6)) {
  59:     text2.updateData({
  60:       text: "Make sure to use no more than $5$ of each planet!",
  61:     });
  62:     return;
  63:   }
  64:   if (quantsNum.reduce((acc, quantity) => acc + (!!quantity ? 1 : 0)) < 3) {
  65:     text2.updateData({
  66:       text: "Make sure to use at least $3$ different planets!",
  67:     });
  68:     return;
  69:   }
  70:   text2.updateData({ text: "" });
  71:   const numNames = [
  72:     "numMerc",
  73:     "numVen",
  74:     "numEarth",
  75:     "numMars",
  76:     "numJup",
  77:     "numSat",
  78:     "numUra",
  79:     "numNep",
  80:   ];
  81:   for (let i = 0, L = numNames.length; i < L; i++) {
  82:     ggb1.instance.setValue(numNames[i], quantsNum[i]);
  83      // console.log(numNames[i], quantsNum[i]);

DIDwhiteboard • G8/M1/TD L20 - Spiral of Theodorus Demo/slide1.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setValue('w', true);
  13  });
  14  
  15: buttonGroup1.on('click:2', () => {
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  18:   ggb1.instance.setValue('w', false);
  19  });

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide2.js:
  18  
  19: buttonGroup1.on("click:1", () => {
  20:   ggb1.instance.stopAnimation();
  21    ggb1.instance.setAnimating("time2", true);

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide4.js:
   51  
   52: buttonGroup1.on("click:1", () => {
   53:   const low = round(ggb1.instance.getValue("lowEnd"), safeRound);
   54    const high = round(ggb1.instance.getValue("highEnd"), safeRound);

   70  
   71: buttonGroup2.on("click:1", () => {
   72:   // first time through
   73:   if (buttonGroup2.data.buttons[0].text == "Lock it in") {
   74:     ggb1.instance.stopAnimation();
   75      ggb1.instance.setValue("zoom", 0);

  118  
  119: buttonGroup2.on("click:2", () => {
  120:   buttonGroup2.updateData({ visible: false });
  121:   text3.updateData({ text: "" });
  122:   ggb1.instance.setValue("showDragger", true);
  123    ggb1.instance.setValue("time2", 0);

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide7.js:
   52  
   53: buttonGroup1.on("click:1", () => {
   54:   const low = round(ggb1.instance.getValue("lowEnd"), safeRound);
   55    const high = round(ggb1.instance.getValue("highEnd"), safeRound);

   71  
   72: buttonGroup2.on("click:1", () => {
   73:   // first time through
   74:   if (buttonGroup2.data.buttons[0].text == "Lock it in") {
   75:     ggb1.instance.stopAnimation();
   76      ggb1.instance.setValue("zoom", 0);

  119  
  120: buttonGroup2.on("click:2", () => {
  121:   buttonGroup2.updateData({ visible: false });
  122:   text3.updateData({ text: "" });
  123:   ggb1.instance.setValue("showDragger", true);
  124    ggb1.instance.setValue("time2", 0);

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide11.js:
   43  
   44: buttonGroup1.on("click:1", () => {
   45:   const low = round(ggb1.instance.getValue("lowEnd"), safeRound);
   46    const high = round(ggb1.instance.getValue("highEnd"), safeRound);

   62  
   63: buttonGroup2.on("click:1", () => {
   64:   // first time through
   65:   if (buttonGroup2.data.buttons[0].text == "Lock it in") {
   66:     ggb1.instance.stopAnimation();
   67      ggb1.instance.setValue("zoom", 0);

  110  
  111: buttonGroup2.on("click:2", () => {
  112:   buttonGroup2.updateData({ visible: false });
  113:   text3.updateData({ text: "" });
  114:   ggb1.instance.setValue("showDragger", true);
  115    ggb1.instance.setValue("time2", 0);

DIDwhiteboard • G8/M1/TE L21 - Approximate Values of Roots and π²/slide16.js:
   43  
   44: buttonGroup1.on("click:1", () => {
   45:   const low = round(ggb1.instance.getValue("lowEnd"), safeRound);
   46    const high = round(ggb1.instance.getValue("highEnd"), safeRound);

   57  
   58: buttonGroup2.on("click:1", () => {
   59:   // first time through
   60:   if (buttonGroup2.data.buttons[0].text == "Lock it in") {
   61:     ggb1.instance.stopAnimation();
   62      ggb1.instance.setValue("zoom", 0);

  105  
  106: buttonGroup2.on("click:2", () => {
  107:   buttonGroup2.updateData({ visible: false });
  108:   text3.updateData({ text: "" });
  109:   ggb1.instance.setValue("showDragger", true);
  110    ggb1.instance.setValue("time2", 0);

DIDwhiteboard • G8/M2/TA L02 - Demo/slide1.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   if (ggb1.instance.getValue('animate') < 1) {
  13      ggb1.instance.setAnimating('animate', true);

  20  
  21: buttonGroup1.on('click:2', () => {
  22:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  23:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  24:   ggb1.instance.setAnimating('animate', false);
  25    ggb1.instance.setAnimating('timer', false);

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide1.js:
  50  
  51: buttonGroup1.on('click:1', () => {
  52:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  53:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  54:   ggb1.instance.stopAnimation();
  55    ggb1.instance.setAnimating('timeMove', true);

  61  
  62: buttonGroup1.on('click:2', () => {
  63:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  64:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  65:   ggb1.instance.stopAnimation();
  66  });

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide2.js:
  52  
  53: buttonGroup1.on('click:1', () => {
  54:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  55:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  56:   text2.updateData({ visible: true });
  57:   input1.updateData({ visible: true });
  58:   button2.updateData({ visible: true });
  59:   ggb1.instance.stopAnimation();
  60    ggb1.instance.setAnimating('timeMove', true);

  72  
  73: buttonGroup1.on('click:2', () => {
  74:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  75:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  76:   ggb1.instance.stopAnimation();
  77    ggb1.instance.setAnimating('timeMove', false);

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide5.js:
  33  
  34: buttonGroup1.on('click:1', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  37:   ggb1.instance.setVisible('dragPointHalo', false);
  38    ggb1.instance.setFixed('DragPoint', false, false);

  42  
  43: buttonGroup1.on('click:2', () => {
  44:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  45:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  46:   ggb1.instance.setVisible('dragPointHalo', true);
  47    ggb1.instance.setFixed('DragPoint', false, true);

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide6.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  12:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  13:   ggb1.instance.setVisible('ab', true);
  14    ggb1.instance.setVisible('bc', true);

  32  
  33: buttonGroup1.on('click:2', () => {
  34:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  35:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  36:   ggb1.instance.setVisible('ab', false);
  37    ggb1.instance.setVisible('bc', false);

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide7.js:
  25  
  26: buttonGroup1.on('click:1', () => {
  27:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  28:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  29:   text2.updateData({ visible: true });
  30:   input1.updateData({ visible: true });
  31:   button1.updateData({ visible: true });
  32:   ggb1.instance.setAnimating('time', false);
  33    ggb1.instance.setValue('time', 0);

  40  
  41: buttonGroup1.on('click:2', () => {
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  43:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  44:   ggb1.instance.stopAnimation();
  45    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide8.js:
  32  
  33: buttonGroup1.on('click:1', () => {
  34:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  36:   ggb1.instance.setColor('StudentAIG', 218, 41, 28);
  37    ggb1.instance.setFixed('StudentAIG', false, false);

  50  
  51: buttonGroup1.on('click:2', () => {
  52:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  53:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  54:   ggb1.instance.setColor('StudentAIG', 0, 0, 0);
  55    ggb1.instance.setFixed('StudentAIG', false, true);

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide10.js:
  13  
  14: buttonGroup1.on('click:1', () => {
  15:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  17:   ggb1.instance.setAnimating('time', false);
  18    ggb1.instance.setValue('time', 0);

  22  
  23: buttonGroup1.on('click:2', () => {
  24:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  26:   ggb1.instance.stopAnimation();
  27    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide11.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  12:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  13:   ggb1.instance.setVisible('studentImage', true);
  14    ggb1.instance.setVisible('StudentAHalo', false);

  28  
  29: buttonGroup1.on('click:2', () => {
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  32:   ggb1.instance.setVisible('studentImage', false);
  33    ggb1.instance.setVisible('StudentAHalo', true);

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide14.js:
  71  
  72: buttonGroup1.on('click:1', () => {
  73:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  74:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  75:   text2.updateData({ visible: true });
  76:   ggb1.instance.evalCommand('SelectObjects()');
  77    ggb1.instance.setAnimating('time', false);

  82  
  83: buttonGroup1.on('click:2', () => {
  84:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  85:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  86:   ggb1.instance.stopAnimation();
  87    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide15.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  12:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  13:   ggb1.instance.setVisible('studentImage', true);
  14    ggb1.instance.setVisible('StudentAHalo', false);

  28  
  29: buttonGroup1.on('click:2', () => {
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  32:   ggb1.instance.setVisible('studentImage', false);
  33    ggb1.instance.setVisible('StudentAHalo', true);

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide16.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  12:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  13:   ggb1.instance.setValue('horizontal', fib1.data.values[0].text);
  14    ggb1.instance.setValue('vertical', fib1.data.values[1].text);

  22  
  23: buttonGroup1.on('click:2', () => {
  24:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  26:   ggb1.instance.stopAnimation();
  27    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • G8/M2/TA L04 - Translations and Reflections on the Coordinate Plane/slide19.js:
  16  
  17: buttonGroup1.on('click:1', () => {
  18:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  19:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  20:   ggb1.instance.stopAnimation();
  21    ggb1.instance.setAnimating('timeMove', true);

  29  
  30: buttonGroup1.on('click:2', () => {
  31:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  32:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  33:   ggb1.instance.stopAnimation();
  34  });

DIDwhiteboard • G8/M2/TB L08 - Sequencing The Rigid Motions/slide2.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   ggb1.instance.evalCommand('RunClickScript(check)');
  12  });
  13  
  14: buttonGroup1.on('click:2', () => {
  15:   ggb1.instance.evalCommand('RunClickScript(reset)');
  16    buttonGroup1.updateData({ visible: false });

DIDwhiteboard • G8/M2/TB L08 - Sequencing The Rigid Motions/slide3.js:
   9  
  10: buttonGroup1.on("click:1", () => {
  11:   ggb1.instance.evalCommand("RunClickScript(check)");
  12  });
  13  
  14: buttonGroup1.on("click:2", () => {
  15:   ggb1.instance.evalCommand("RunClickScript(reset)");
  16    buttonGroup1.updateData({ visible: false });

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide1.js:
  25  
  26: buttongroup1.on("click:1", () => {
  27:   buttongroup1.updateSingleButton({ disabled: false }, 2);
  28:   buttongroup1.updateSingleButton({ disabled: true }, 1);
  29:   table1.updateData({ visible: true });
  30:   ggb1.instance.setValue("step", ggb1.instance.getValue("step") + 1);
  31    ggb1.instance.setValue("count", ggb1.instance.getValue("count") + 1);

  70  }
  71: buttongroup1.on("click:2", () => {
  72:   alert("button2 clicked!");
  73:   ggb1.instance.setValue("step", 2);
  74    table1.updateCell(0, 1, { value: "" });

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide2.js:
  32  
  33: buttongroup1.on('click:1', () => {
  34:   alert('button1 clicked!');
  35:   ggb1.instance.evalCommand('RunClickScript(split)');
  36    buttongroup1.updateSingleButton({ disabled: true }, 1);

  39  
  40: buttongroup1.on('click:2', () => {
  41:   alert('button2 clicked!');
  42:   ggb1.instance.evalCommand('RunClickScript(button1)');
  43    buttongroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide3.js:
  36  
  37: buttongroup1.on('click:1', () => {
  38:   ggb1.instance.evalCommand('RunClickScript(button3)');
  39    buttongroup1.updateSingleButton({ disabled: true }, 1);

  41  });
  42: buttongroup1.on('click:2', () => {
  43:   ggb1.instance.evalCommand('RunClickScript(button2)');
  44    buttongroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide4.js:
  38  
  39: buttongroup1.on('click:1', () => {
  40:   ggb1.instance.setValue('count', ggb1.instance.getValue('count') + 1);
  41    /*if(ggb1.instance.getValue("count")==1){

  47  });
  48: buttongroup1.on('click:2', () => {
  49:   ggb1.instance.evalCommand('RunClickScript(button2)');
  50    buttongroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide5.js:
  36  
  37: buttongroup1.on('click:1', () => {
  38:   ggb1.instance.evalCommand('RunClickScript(button3)');
  39    buttongroup1.updateSingleButton({ disabled: true }, 1);

  41  });
  42: buttongroup1.on('click:2', () => {
  43:   ggb1.instance.evalCommand('RunClickScript(button2)');
  44    buttongroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide6.js:
  26  
  27: buttongroup1.on("click:1", () => {
  28:   ggb1.instance.evalCommand("RunClickScript(button3)");
  29    buttongroup1.updateSingleButton({ disabled: true }, 1);
  30  });
  31: buttongroup1.on("click:2", () => {
  32:   ggb1.instance.evalCommand("RunClickScript(button2)");
  33    buttongroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide7.js:
  15  
  16: /*buttongroup1.on('click:1', () => {
  17: ggb1.instance.evalCommand("RunClickScript(markIt)");
  18  buttongroup1.updateSingleButton({ disabled: false }, 2);

  20  
  21: buttongroup1.on("click:1", () => {
  22:   ggb1.instance.setXML(getData("initXML"));
  23  });

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide10.js:
  32  
  33: buttongroup1.on('click:1', () => {
  34:   buttongroup1.updateSingleButton({ disabled: true }, 1);
  35:   buttongroup1.updateSingleButton({ disabled: false }, 2);
  36:   ggb1.instance.setVisible('γ', false);
  37    ggb1.instance.setValue('time', 0);

  41  
  42: buttongroup1.on('click:2', () => {
  43:   buttongroup1.updateSingleButton({ disabled: false }, 1);
  44:   buttongroup1.updateSingleButton({ disabled: true }, 2);
  45:   ggb1.instance.setVisible('γ', false);
  46    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide11.js:
  41  
  42: buttongroup1.on('click:1', () => {
  43:   buttongroup1.updateSingleButton({ disabled: true }, 1);
  44:   buttongroup1.updateSingleButton({ disabled: false }, 2);
  45:   ggb1.instance.setVisible('γ', false);
  46    ggb1.instance.setValue('time', 0);

  50  
  51: buttongroup1.on('click:2', () => {
  52:   buttongroup1.updateSingleButton({ disabled: false }, 1);
  53:   buttongroup1.updateSingleButton({ disabled: true }, 2);
  54:   ggb1.instance.setVisible('γ', false);
  55    ggb1.instance.setValue('time', 0);

DIDwhiteboard • G8/M2/TC L13 - Angle Sum of a Triangle/slide12.js:
  13  
  14: buttongroup1.on('click:1', () => {
  15:   buttongroup1.updateSingleButton({ disabled: false }, 2);
  16:   text4.updateData({ visible: true });
  17:   table1.updateData({ visible: true });
  18:   buttongroup1.updateSingleButton({ disabled: true }, 1);
  19:   ggb1.instance.setValue('step', ggb1.instance.getValue('step') + 1);
  20    ggb1.instance.setValue('count', ggb1.instance.getValue('count') + 1);

  85  
  86: buttongroup1.on('click:2', () => {
  87:   ggb1.instance.setValue('step', 2);
  88    table1.updateCell(0, 0, { value: '' });

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide16.js:
  56  
  57: buttonGroup1.on("click:1", () => {
  58:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  59:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  60:   ggb1.instance.setValue("colorBool", true);
  61  });
  62  
  63: buttonGroup1.on("click:2", () => {
  64:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  65:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  66:   ggb1.instance.setValue("colorBool", false);
  67  });

DIDwhiteboard • G8/M2/TD L17 - Proving the Pythagorean Theorem/slide24.js:
   76  
   77: buttonGroup1.on("click:1", () => {
   78:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   79:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   80:   ggb1.instance.setValue("step", 7);
   81    ggb1.instance.setValue("time1a", Math.PI / 2);

   98  
   99: /*buttonGroup1.on('click:2', () => {
  100:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  101:   ggb1.instance.setValue('enableButton', false);
  102  });*/

DIDwhiteboard • G8/M2/TD L18 - Proving the Converse of the Pythagorean Theorem/slide1.js:
  36  
  37: buttonGroup1.on('click:1', () => {
  38:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  39:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  40:   ggb1.instance.setAnimating('time', true);
  41    ggb1.instance.startAnimation();

  44  
  45: buttonGroup1.on('click:2', () => {
  46:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  47:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  48:   ggb1.instance.stopAnimation();
  49    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • G8/M2/TD L18 - Proving the Converse of the Pythagorean Theorem/slide10.js:
  44  
  45: buttonGroup1.on('click:1', () => {
  46:   ggb1.instance.setAnimating('time', false);
  47    ggb1.instance.setValue('time', 0);

  51  
  52: buttonGroup1.on('click:2', () => {
  53:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  54:   ggb1.instance.setAnimating('rewind', false);
  55    ggb1.instance.setValue('rewind', 0);

DIDwhiteboard • G8/M2/TD L18 - Proving the Converse of the Pythagorean Theorem/slide12.js:
  86  
  87: buttonGroup1.on("click:1", () => {
  88:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  89:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  90:   ggb1.instance.setAnimating("time", true);
  91    ggb1.instance.startAnimation();

  93  
  94: buttonGroup1.on("click:2", () => {
  95:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  96:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  97:   ggb1.instance.stopAnimation();
  98    ggb1.instance.setValue("time", 0);

DIDwhiteboard • G8/M3/TA L01 - Exploring Dilations/slide1.js:
  58  
  59: buttonGroup1.on('click:1', () => {
  60:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  61:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  62:   ggb1.instance.stopAnimation();
  63    ggb1.instance.setAnimating('timeMove', true);

  69  
  70: buttonGroup1.on('click:2', () => {
  71:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  72:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  73:   ggb1.instance.stopAnimation();
  74  });

DIDwhiteboard • G8/M3/TA L01 - Exploring Dilations/slide3.js:
  44  
  45: buttonGroup1.on('click:1', () => {
  46:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  47:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  48:   ggb1.instance.stopAnimation();
  49    ggb1.instance.setAnimating('timeMove', true);

  55  
  56: buttonGroup1.on('click:2', () => {
  57:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  58:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  59:   ggb1.instance.stopAnimation();
  60  });

DIDwhiteboard • G8/M3/TA L01 - Exploring Dilations/slide8.js:
  15  
  16: buttonGroup1.on('click:1', () => {
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  19:   ggb1.instance.stopAnimation();
  20    ggb1.instance.setAnimating('timeMove', true);

  26  
  27: buttonGroup1.on('click:2', () => {
  28:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  29:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  30:   ggb1.instance.stopAnimation();
  31  });

DIDwhiteboard • G8/M3/TA L01 - Exploring Dilations/slide9.js:
  15  
  16: buttonGroup1.on('click:1', () => {
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  19:   ggb1.instance.stopAnimation();
  20    ggb1.instance.setAnimating('timeMove', true);

  26  
  27: buttonGroup1.on('click:2', () => {
  28:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  29:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  30:   ggb1.instance.stopAnimation();
  31  });

DIDwhiteboard • G8/M3/TC L09 - Describing Dilations/slide1.js:
  17  
  18: buttonGroup1.on("click:1", () => {
  19:   shareText1.updateData({ visible: true });
  20:   shareInput1.updateData({ visible: true });
  21:   shareButton1.updateData({ visible: true });
  22:   let rand = ggb1.instance.getValue("RandomBetween(0.02 50,50 rMax)/50");
  23    let newPoly = ggb1.instance.evalCommandGetLabels(

  31  
  32: buttonGroup1.on("click:2", () => {
  33:   const randos = ggb1.instance
  34      .getAllObjectNames()

DIDwhiteboard • G8/M3/TC L09 - Describing Dilations/slide13.js:
  54  
  55: buttonGroup1.on("click:1", () => {
  56:   const result = utils.math.evaluateLatex(input1.data.text);
  57:   if (result.error) {
  58:     return;
  59:   }
  60:   stopRightThere();
  61:   ggb1.instance.setValue("rInput1", result.value);
  62    ggb1.instance.setAnimating("time", true);

  69  
  70: buttonGroup1.on("click:2", () => {
  71:   stopRightThere();
  72:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  73: });
  74: undefined
  75: autorun(() => {
  76:   let currentO = ggb1.innerData["O"];
  77    if (

DIDwhiteboard • G8/M3/TC L09 - Describing Dilations/slide14.js:
  54  
  55: buttonGroup1.on("click:1", () => {
  56:   const result = utils.math.evaluateLatex(input1.data.text);
  57:   if (result.error) {
  58:     return;
  59:   }
  60:   stopRightThere();
  61:   ggb1.instance.setValue("rInput2", result.value); // SLIDE SPECIFIC
  62    ggb1.instance.setAnimating("time", true);

  69  
  70: buttonGroup1.on("click:2", () => {
  71:   stopRightThere();
  72:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  73: });
  74: undefined
  75: autorun(() => {
  76:   let currentO = ggb1.innerData["O"];
  77    if (

DIDwhiteboard • G8/M3/TC L09 - Describing Dilations/slide15.js:
  65  
  66: buttonGroup1.on("click:1", () => {
  67:   const result = utils.math.evaluateLatex(input1.data.text);
  68:   if (result.error) {
  69:     return;
  70:   }
  71:   stopRightThere();
  72:   ggb1.instance.setValue("rInput3", result.value); // SLIDE SPECIFIC
  73    ggb1.instance.setAnimating("time", true);

  80  
  81: buttonGroup1.on("click:2", () => {
  82:   stopRightThere();
  83:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  84: });
  85: undefined
  86: autorun(() => {
  87:   let currentO = ggb1.innerData["O"];
  88    if (

DIDwhiteboard • G8/M3/TC L09 - Describing Dilations/slide16.js:
  65  
  66: buttonGroup1.on("click:1", () => {
  67:   const result = utils.math.evaluateLatex(input1.data.text);
  68:   if (result.error) {
  69:     return;
  70:   }
  71:   stopRightThere();
  72:   ggb1.instance.setValue("rInput3", result.value); // SLIDE SPECIFIC
  73    ggb1.instance.setAnimating("time", true);

  80  
  81: buttonGroup1.on("click:2", () => {
  82:   stopRightThere();
  83:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  84: });
  85: undefined
  86: autorun(() => {
  87:   let currentO = ggb1.innerData["O"];
  88    if (

DIDwhiteboard • G8/M3/TD L17 - Similar Triangles on a Line/slide5.js:
  11  
  12: buttonGroup1.on('click:1', () => {
  13:   ggb1.instance.evalCommand('RunClickScript(button1)');
  14    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  17  
  18: buttonGroup1.on('click:2', () => {
  19:   ggb1.instance.evalCommand('RunClickScript(button2)');
  20    buttonGroup1.updateSingleButton({ disabled: true }, 2);

  23  
  24: buttonGroup1.on('click:3', () => {
  25:   ggb1.instance.evalCommand('RunClickScript(button3)');
  26    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • G8/M3/TD L17 - Similar Triangles on a Line/slide9.js:
  10  
  11: buttonGroup1.on('click:1', () => {
  12:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  13:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  14:   ggb1.instance.evalCommand('RunClickScript(button1)');
  15  });
  16  
  17: buttonGroup1.on('click:2', () => {
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  19:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  20:   ggb1.instance.evalCommand('RunClickScript(button2)');
  21  });

DIDwhiteboard • G8/M4/TC L12 - Solutions to Linear Equations in Two Variables/Slide 1.js:
  44  
  45: buttonGroup1.on('click:1', () => {
  46:   ggb1.instance.setValue('show2', 1);
  47    ggb1.instance.setValue('show3', 0);

  50  
  51: buttonGroup1.on('click:2', () => {
  52:   ggb1.instance.setValue('show2', 0);
  53    ggb1.instance.setValue('show3', 1);

  56  
  57: buttonGroup1.on('click:3', () => {
  58:   ggb1.instance.setValue('score', 0);
  59    ggb1.instance.setValue('twoShots', 0);

DIDwhiteboard • G8/M4/TF L24 - The Patterns the Pops and The Pastries/slide1.js:
  10  
  11: buttonGroup1.on('click:1', () => {
  12:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  13:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  14:   ggb1.instance.evalCommand('RunClickScript(tryIt)');
  15  });
  16  
  17: buttonGroup1.on('click:2', () => {
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  19:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  20:   ggb1.instance.evalCommand('RunClickScript(reset)');
  21  });

DIDwhiteboard • G8/M6/TA L01 - Motion and Speed/slide1.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  12:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  13:   let clickCount = ggb1.instance.getValue('clickCount');
  14    ggb1.instance.setValue('clickCount', clickCount + 1);

  18  
  19: buttonGroup1.on('click:2', () => {
  20:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  21:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  22:   let clickCount = ggb1.instance.getValue('clickCount');
  23    ggb1.instance.setValue('clickCount', clickCount + 1);

DIDwhiteboard • G8/M6/TA L01 - Motion and Speed/slide2.js:
  45  
  46: buttonGroup1.on('click:1', () => {
  47:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  48:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  49:   let clickCount = ggb1.instance.getValue('clickCount');
  50    ggb1.instance.setValue('clickCount', clickCount + 1);

  54  
  55: buttonGroup1.on('click:2', () => {
  56:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  57:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  58:   let clickCount = ggb1.instance.getValue('clickCount');
  59    ggb1.instance.setValue('clickCount', clickCount + 1);

DIDwhiteboard • G8/M6/TA L01 - Motion and Speed/slide3.js:
  15  
  16: buttonGroup1.on('click:1', () => {
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  19:   let clickCount = ggb1.instance.getValue('clickCount');
  20    ggb1.instance.setValue('clickCount', clickCount + 1);

  24  
  25: buttonGroup1.on('click:2', () => {
  26:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  27:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  28:   let clickCount = ggb1.instance.getValue('clickCount');
  29    ggb1.instance.setValue('clickCount', clickCount + 1);

DIDwhiteboard • G8/M6/TA L01 - Motion and Speed/slide4.js:
  66  
  67: buttonGroup1.on('click:1', () => {
  68:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  69:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  70:   let clickCount = ggb1.instance.getValue('clickCount');
  71    ggb1.instance.setValue('clickCount', clickCount + 1);

  75  
  76: buttonGroup1.on('click:2', () => {
  77:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  78:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  79:   let clickCount = ggb1.instance.getValue('clickCount');
  80    ggb1.instance.setValue('clickCount', clickCount + 1);

DIDwhiteboard • G8/M6/TA L01 - Motion and Speed/slide8.js:
  39  
  40: buttonGroup1.on('click:1', () => {
  41:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  43:   let clickCount = ggb1.instance.getValue('clickCount');
  44    ggb1.instance.setValue('clickCount', clickCount + 1);

  48  
  49: buttonGroup1.on('click:2', () => {
  50:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  51:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  52:   let clickCount = ggb1.instance.getValue('clickCount');
  53    ggb1.instance.setValue('clickCount', clickCount + 1);

DIDwhiteboard • G8/M6/TA L01 - Motion and Speed/slide12.js:
  40  
  41: buttonGroup1.on('click:1', () => {
  42:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  43:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  44:   let clickCount = ggb1.instance.getValue('clickCount');
  45    ggb1.instance.setValue('clickCount', clickCount + 1);

  49  
  50: buttonGroup1.on('click:2', () => {
  51:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  52:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  53:   let clickCount = ggb1.instance.getValue('clickCount');
  54    ggb1.instance.setValue('clickCount', clickCount + 1);

DIDwhiteboard • G8/M6/TA L01 - Motion and Speed/slide13.js:
  11  
  12: buttonGroup1.on('click:1', () => {
  13:   let clickCount = ggb1.instance.getValue('clickCount');
  14    ggb1.instance.setValue('clickCount', clickCount + 1);

  21  
  22: buttonGroup1.on('click:2', () => {
  23:   let clickCount = ggb1.instance.getValue('clickCount');
  24    ggb1.instance.setValue('clickCount', clickCount + 1);

  31  
  32: buttonGroup1.on('click:3', () => {
  33:   ggb1.instance.setValue('time', 0);
  34    ggb1.instance.setValue('clickCount', 0);

DIDwhiteboard • G8/M6/TB L09 - Increasing and Decreasing Functions/slide1.js:
  110  
  111: buttonGroup1.on("click:1", () => {
  112:   if (ggb2.instance.getValue("scrub") == 1) {
  113      ggb2.instance.setCoords("Scrubber", 0, -4);

  120  
  121: buttonGroup1.on("click:2", () => {
  122:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  123:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  124:   ggb2.instance.stopAnimation();
  125  });
  126  
  127: buttonGroup1.on("click:3", () => {
  128:   ggb2.instance.stopAnimation();
  129    ggb2.instance.setCoords("Scrubber", 0, -4);

DIDwhiteboard • G8/M6/TC L11 - Maya's Shirt Shop/slide-b1210e61aa96.js:
  192  
  193: buttonGroup1.on('click:1', () => {
  194:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  195:   text2.updateData({ visible: true });
  196:   ggb1.instance.setValue('showHalos', false);
  197    ggb1.instance.setVisible('customerText', false);

  215  
  216: buttonGroup1.on('click:2', () => {
  217:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  218:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  219:   text2.updateData({ text: `$0$ days` });
  220:   ggb1.instance.setValue('selection', 0);
  221    ggb1.instance.setValue('show', false);

DIDwhiteboard • G8/M6/TE L21 - Prism & Pyramid Definitions/slide2.js:
  67  
  68: buttonGroup1.on("click:1", () => {
  69:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  70:   ggb1.instance.setVisible("apexLabel", true);
  71    ggb1.instance.setAnimating("faceTime", false);

  82  
  83: buttonGroup1.on("click:2", () => {
  84:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  85:   ggb1.instance.setAnimating("heightTime", false);
  86    ggb1.instance.setValue("heightTime", 0);

DIDwhiteboard • G8/M6/TE L22 - Volume of Cylinders/slide2.js:
  71  
  72: buttonGroup1.on('click:1', () => {
  73:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  74:   ggb1.instance.setValue('time1', 0);
  75    ggb1.instance.setAnimating('time1', true);

  78  
  79: buttonGroup1.on('click:2', () => {
  80:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  81:   ggb1.instance.setValue('time2', 0);
  82    ggb1.instance.setAnimating('time2', true);

DIDwhiteboard • G8/M6/TE L22 - Volume of Cylinders/slide9.js:
  61  
  62: buttonGroup1.on("click:1", () => {
  63:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  64:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  65:   let clickCount = ggb1.instance.getValue("clickCount");
  66    ggb1.instance.setValue("clickCount", clickCount + 1);

  81  
  82: buttonGroup1.on("click:2", () => {
  83:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  84:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  85:   let clickCount = ggb1.instance.getValue("clickCount");
  86    ggb1.instance.setValue("clickCount", clickCount + 1);

DIDwhiteboard • G8/M6/TE L22 - Volume of Cylinders/slide13.js:
  74  
  75: buttonGroup1.on('click:1', () => {
  76:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  77:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  78:   let clickCount = ggb1.instance.getValue('clickCount');
  79    ggb1.instance.setValue('clickCount', clickCount + 1);

  92  
  93: buttonGroup1.on('click:2', () => {
  94:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  95:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  96:   let clickCount = ggb1.instance.getValue('clickCount');
  97    ggb1.instance.setValue('clickCount', clickCount + 1);

DIDwhiteboard • Geometry/Brainstorming/M1 TD L19/slide1.js:
  27  
  28: buttonGroup1.on('click:1', () => {
  29:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  31:   ggb1.instance.setAnimating('time', false);
  32    ggb1.instance.setValue('time', 0);

  41  
  42: buttonGroup1.on('click:2', () => {
  43:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  44:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  45:   ggb1.instance.stopAnimation();
  46    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Geometry/M1/TA L05 - Lines Crossed by a Transversal/slide1.js:
  24  
  25: buttonGroup1.on('click:1', () => {
  26:   select1.setDisabled(true);
  27:   select2.setDisabled(true);
  28:   ggb1.instance.setAnimating('time', false);
  29    ggb1.instance.setValue('time', 0);

  35  
  36: buttonGroup1.on('click:2', () => {
  37:   select1.setDisabled(false);
  38:   select2.setDisabled(false);
  39:   ggb1.instance.stopAnimation();
  40    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Geometry/M1/TA L05 - Lines Crossed by a Transversal/slide2.js:
  24  
  25: buttonGroup1.on('click:1', () => {
  26:   select1.setDisabled(true);
  27:   select2.setDisabled(true);
  28:   ggb1.instance.setAnimating('time', false);
  29    ggb1.instance.setValue('time', 0);

  35  
  36: buttonGroup1.on('click:2', () => {
  37:   select1.setDisabled(false);
  38:   select2.setDisabled(false);
  39:   ggb1.instance.stopAnimation();
  40    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Geometry/M1/TA L05 - Lines Crossed by a Transversal/slide3.js:
  24  
  25: buttonGroup1.on('click:1', () => {
  26:   select1.setDisabled(true);
  27:   select2.setDisabled(true);
  28:   ggb1.instance.setAnimating('time', false);
  29    ggb1.instance.setValue('time', 0);

  35  
  36: buttonGroup1.on('click:2', () => {
  37:   select1.setDisabled(false);
  38:   select2.setDisabled(false);
  39:   ggb1.instance.stopAnimation();
  40    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Geometry/M1/TA L05 - Lines Crossed by a Transversal/slide4.js:
  46  
  47: buttonGroup1.on('click:1', () => {
  48:   select1.setDisabled(true);
  49:   select2.setDisabled(true);
  50:   ggb1.instance.setAnimating('time', false);
  51    ggb1.instance.setValue('time', 0);

  57  
  58: buttonGroup1.on('click:2', () => {
  59:   select1.setDisabled(false);
  60:   select2.setDisabled(false);
  61:   ggb1.instance.stopAnimation();
  62    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Geometry/M1/TA L05 - Lines Crossed by a Transversal/slide10.js:
  22  
  23: buttonGroup1.on('click:1', () => {
  24:   select1.setDisabled(true);
  25:   select2.setDisabled(true);
  26:   ggb1.instance.setAnimating('time', false);
  27    ggb1.instance.setValue('time', 0);

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   select1.setDisabled(false);
  36:   select2.setDisabled(false);
  37:   ggb1.instance.stopAnimation();
  38    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Geometry/M1/TA L05 - Lines Crossed by a Transversal/slide11.js:
  27  
  28: buttonGroup1.on('click:1', () => {
  29:   let num = fib1.data.values[0].text;
  30:   let num2 = fib1.data.values[1].text;
  31:   if (parseInt(num) == parseFloat(num) && parseInt(num2) == parseFloat(num2)) {
  32:     ggb1.instance.setValue('angle1Val', fib1.data.values[0].text);
  33      ggb1.instance.setValue('angle2Val', fib1.data.values[1].text);

  40  
  41: buttonGroup2.on('click:1', () => {
  42:   let num3 = fib2.data.values[0].text;
  43:   let num4 = fib2.data.values[1].text;
  44:   if (
  45:     parseInt(num3) == parseFloat(num3) &&
  46:     parseInt(num4) == parseFloat(num4)
  47:   ) {
  48:     ggb1.instance.setValue('angle1Val', fib2.data.values[0].text);
  49      ggb1.instance.setValue('angle2Val', fib2.data.values[1].text);

DIDwhiteboard • Geometry/M1/TA L05 - Lines Crossed by a Transversal/slide13.js:
  117  
  118: buttonGroup1.on('click:1', () => {
  119:   ggb1.instance.stopAnimation();
  120    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  123  
  124: buttonGroup1.on('click:2', () => {
  125:   ggb1.instance.startAnimation();
  126    buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • Geometry/M1/TA L05 - Lines Crossed by a Transversal/slide14.js:
  61  
  62: buttonGroup1.on('click:1', () => {
  63:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  64:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  65:   ggb1.instance.setValue('showLines', true);
  66    text2.updateData({ visible: true });

  70  
  71: buttonGroup1.on('click:2', () => {
  72:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  73:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  74:   ggb1.instance.setValue('showLines', false);
  75    buttonGroup2.updateSingleButton({ disabled: true }, 1);

  78  
  79: buttonGroup2.on('click:1', () => {
  80:   buttonGroup2.updateSingleButton({ disabled: true }, 1);
  81:   buttonGroup2.updateSingleButton({ disabled: false }, 2);
  82:   ggb1.instance.setAnimating('time', false);
  83    ggb1.instance.setValue('time', 0);

  87  
  88: buttonGroup2.on('click:2', () => {
  89:   buttonGroup2.updateSingleButton({ disabled: false }, 1);
  90:   buttonGroup2.updateSingleButton({ disabled: true }, 2);
  91:   ggb1.instance.stopAnimation();
  92    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Geometry/M1/TB L07 - Transformations/slide4.js:
   93  
   94: buttonGroup1.on('click:1', () => {
   95:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   96:   if (ggb1.instance.getValue('enablePauseButton')) {
   97      buttonGroup1.updateSingleButton({ disabled: false }, 2);

  105  
  106: buttonGroup1.on('click:2', () => {
  107:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  108:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  109:   ggb1.instance.stopAnimation();
  110  });
  111  
  112: buttonGroup1.on('click:3', () => {
  113:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  114:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  115:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  116:   ggb1.instance.stopAnimation();
  117    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Geometry/M1/TB L07 - Transformations/slide5.js:
  73  
  74: buttonGroup1.on('click:1', () => {
  75:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  76:   if (ggb1.instance.getValue('enablePauseButton')) {
  77      buttonGroup1.updateSingleButton({ disabled: false }, 2);

  85  
  86: buttonGroup1.on('click:2', () => {
  87:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  88:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  89:   ggb1.instance.stopAnimation();
  90  });
  91  
  92: buttonGroup1.on('click:3', () => {
  93:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  94:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  95:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  96:   ggb1.instance.stopAnimation();
  97    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Geometry/M1/TB L07 - Transformations/slide6.js:
  341  
  342: buttonGroup1.on('click:1', () => {
  343:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  344:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  345:   ggb1.instance.setValue('time', 1);
  346    ggb1.instance.setValue('Htime', 1);

  349  
  350: buttonGroup1.on('click:2', () => {
  351:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  352:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  353:   ggb1.instance.setValue('time', 0);
  354    ggb1.instance.setValue('Htime', 0);

DIDwhiteboard • Geometry/M1/TB L07 - Transformations/slide7.js:
  228  
  229: buttonGroup1.on('click:1', () => {
  230:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  231:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  232:   ggb1.instance.setValue('time', 1);
  233    ggb1.instance.setValue('Htime', 1);

  236  
  237: buttonGroup1.on('click:2', () => {
  238:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  239:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  240:   ggb1.instance.setValue('time', 0);
  241    ggb1.instance.setValue('Htime', 0);

DIDwhiteboard • Geometry/M1/TB L07 - Transformations/slide8.js:
  28  
  29: buttonGroup1.on('click:1', () => {
  30:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  32:   ggb1.instance.setValue('time', 1);
  33  });
  34  
  35: buttonGroup1.on('click:2', () => {
  36:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  37:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  38:   ggb1.instance.setValue('time', 0);
  39    ggb1.instance.setValue('randCount', 0);

DIDwhiteboard • Geometry/M1/TB L07 - Transformations/slide10.js:
  52  
  53: buttonGroup1.on('click:1', () => {
  54:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  55:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  56:   restartAnimation();
  57: });
  58: undefined
  59: buttonGroup1.on('click:2', () => {
  60:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  61:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  62:   ggb1.instance.stopAnimation();
  63    ggb1.instance.setAnimating('beginPause', false);

DIDwhiteboard • Geometry/M1/TB L07 - Transformations/slide11.js:
  79  
  80: buttonGroup1.on('click:1', () => {
  81:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  82:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  83:   ggb1.instance.registerObjectUpdateListener('beginPause', startTime);
  84    ggb1.instance.registerObjectUpdateListener('time', startPause);

  87  
  88: buttonGroup1.on('click:2', () => {
  89:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  90:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  91:   ggb1.instance.stopAnimation();
  92    ggb1.instance.setAnimating('beginPause', false);

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-2b267925b202.js:
   31  //rotate button
   32: buttonGroup1.on('click:1', () => {
   33:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   34:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
   35:   if (ggb1.instance.getValue('count') == 0) {
   36      ggb1.instance.setValue('showInitialRotation', true);

  106  //translate button
  107: buttonGroup1.on('click:2', () => {
  108:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  109:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  110:   if (ggb1.instance.getValue('count') == 0) {
  111      ggb1.instance.setValue('showInitialTranslation', true);

  181  //reflect button
  182: buttonGroup1.on('click:3', () => {
  183:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  184:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  185:   if (ggb1.instance.getValue('count') == 0) {
  186      ggb1.instance.setValue('showInitialReflection', true);

  255  
  256: buttonGroup1.on('click:4', () => {
  257:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  258:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  259:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  260:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  261:   ggb1.instance.setValue('count', 0);
  262    for (let i = 0, J = routeArray.length; i < J; i++) {

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-116b709c2663.js:
  183  
  184: buttonGroup1.on('click:1', () => {
  185:   polyArray = getData('polyArray');
  186:   pointsArray = getData('pointsArray');
  187:   reflectionLinesArray = getData('reflectionLinesArray');
  188:   currentRotationCenter = getData('currentRotationCenter');
  189:   currentReflectionLine = getData('currentReflectionLine');
  190:   currentVectorPoint1 = getData('currentVectorPoint1');
  191:   currentVectorPoint2 = getData('currentVectorPoint2');
  192:   translationPointsArray = getData('translationPointsArray');
  193:   translationVectorsArray = getData('translationVectorsArray');
  194:   textAString = getData('textAString');
  195:   resultA = getData('resultA');
  196:   textBString = getData('textBString');
  197:   resultB = getData('resultB');
  198:   textCString = getData('textCString');
  199:   resultC = getData('resultC');
  200:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  201:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  202:   select1.setDisabled(true);
  203:   table1.addRow(ggb1.instance.getValue('count') + 1, {
  204      isHeader: false,

  302  
  303: buttonGroup1.on('click:2', () => {
  304:   polyArray = getData('polyArray');
  305:   pointsArray = getData('pointsArray');
  306:   reflectionLinesArray = getData('reflectionLinesArray');
  307:   rotationPointsArray = getData('rotationPointsArray');
  308:   translationPointsArray = getData('translationPointsArray');
  309:   translationVectorsArray = getData('translationVectorsArray');
  310:   textAString = getData('textAString');
  311:   textBString = getData('textBString');
  312:   textCString = getData('textCString');
  313:   select1.setDisabled(false);
  314:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  315:   if (ggb1.instance.getValue('count') == 1) {
  316      textAString = '';

  421  
  422: buttonGroup1.on('click:3', () => {
  423:   buttonGroup1.updateData({ visible: false });
  424:   select1.setDisabled(false);
  425:   select1.unselectAll();
  426:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  427:   resetTime();
  428:   sendHome();
  429: });
  430: undefined
  431: buttonGroup1.on('click:4', () => {
  432:   polyArray = getData('polyArray');
  433:   pointsArray = getData('pointsArray');
  434:   reflectionLinesArray = getData('reflectionLinesArray');
  435:   rotationPointsArray = getData('rotationPointsArray');
  436:   translationPointsArray = getData('translationPointsArray');
  437:   translationVectorsArray = getData('translationVectorsArray');
  438:   currentReflectionSegs = getData('currentReflectionSegs');
  439:   currentAnimatedPoints = getData('currentAnimatedPoints');
  440:   textAString = getData('textAString');
  441:   textBString = getData('textBString');
  442:   textCString = getData('textCString');
  443:   buttonGroup1.updateData({ visible: false });
  444:   select1.setDisabled(false);
  445:   select1.unselectAll();
  446:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  447:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  448:   for (let i = 1, L = ggb1.instance.getValue('count') + 1; i < L; i++) {
  449      table1.deleteRow(i);

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-819bb8233abb.js:
  171  
  172: buttonGroup1.on('click:1', () => {
  173:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  174:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  175:   select2.setDisabled(true);
  176:   ggb1.instance.setAnimating('time', false);
  177    ggb1.instance.setValue('time', 0);

  181  
  182: buttonGroup1.on('click:2', () => {
  183:   select2.setDisabled(false);
  184:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  185:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  186:   ggb1.instance.stopAnimation();
  187    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-0944b3252f20.js:
  11  
  12: buttonGroup1.on('click:1', () => {
  13:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  14:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  15:   if (ggb1.instance.getValue('count') == 0) {
  16      ggb1.instance.setValue('showInitialReflection', true);

  31  
  32: buttonGroup1.on('click:3', () => {
  33:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  34:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  35:   if (ggb1.instance.getValue('count') == 0) {
  36      ggb1.instance.setValue('showInitialTranslation', true);

  50  
  51: buttonGroup1.on('click:4', () => {
  52:   table1.setVisible(false);
  53:   table1.deleteRow(2);
  54:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  55:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  56:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  57:   ggb1.instance.setValue('count', 0);
  58    ggb1.instance.setValue('showInitialReflection', false);

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-afc73b15c011.js:
  146  
  147: buttonGroup1.on('click:1', () => {
  148:   polyArray = getData('polyArray');
  149:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  150:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  151:   select1.setDisabled(true);
  152:   if (ggb1.instance.getValue('showReflection')) {
  153      reflect();

  167  
  168: buttonGroup1.on('click:2', () => {
  169:   polyArray = getData('polyArray');
  170:   pointsArray = getData('pointsArray');
  171:   select1.setDisabled(false);
  172:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  173:   for (let i = pointsArray.length - 6, L = i + 6; i < L; i++) {
  174:     ggb1.instance.deleteObject(pointsArray[i]);
  175      pointsArray.pop(polyArray[i]);

  190  
  191: buttonGroup1.on('click:3', () => {
  192:   buttonGroup1.updateData({ visible: false });
  193:   select1.setDisabled(false);
  194:   select1.unselectAll();
  195:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  196:   resetTime();
  197:   sendHome();
  198: });
  199: undefined
  200: buttonGroup1.on('click:4', () => {
  201:   polyArray = getData('polyArray');
  202:   pointsArray = getData('pointsArray');
  203:   currentReflectionSegs = getData('currentReflectionSegs');
  204:   currentAnimatedPoints = getData('currentAnimatedPoints');
  205:   buttonGroup1.updateData({ visible: false });
  206:   select1.setDisabled(false);
  207:   select1.unselectAll();
  208:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  209:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  210:   ggb1.instance.setValue('count', 0);
  211    resetTime();

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-b06c39658d94.js:
   420  
   421: buttonGroup1.on('click:1', () => {
   422:   polyArray = getData('polyArray');
   423:   pointsArray = getData('pointsArray');
   424:   reflectionLinesArray = getData('reflectionLinesArray');
   425:   currentRotationCenter = getData('currentRotationCenter');
   426:   currentReflectionLine = getData('currentReflectionLine');
   427:   currentVectorPoint1 = getData('currentVectorPoint1');
   428:   currentVectorPoint2 = getData('currentVectorPoint2');
   429:   translationPointsArray = getData('translationPointsArray');
   430:   translationVectorsArray = getData('translationVectorsArray');
   431:   textAString = getData('textAString');
   432:   resultA = getData('resultA');
   433:   textBString = getData('textBString');
   434:   resultB = getData('resultB');
   435:   textCString = getData('textCString');
   436:   resultC = getData('resultC');
   437:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   438:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
   439:   select1.setDisabled(true);
   440:   table1.addRow(ggb1.instance.getValue('count') + 1, {
   441      isHeader: false,

   539  
   540: buttonGroup2.on('click:1', () => {
   541:   polyArray2 = getData('polyArray2');
   542:   pointsArray2 = getData('pointsArray2');
   543:   reflectionLinesArray2 = getData('reflectionLinesArray2');
   544:   currentRotationCenter2 = getData('currentRotationCenter2');
   545:   currentReflectionLine2 = getData('currentReflectionLine2');
   546:   currentVectorPoint12 = getData('currentVectorPoint12');
   547:   currentVectorPoint22 = getData('currentVectorPoint22');
   548:   translationPointsArray2 = getData('translationPointsArray2');
   549:   translationVectorsArray2 = getData('translationVectorsArray2');
   550:   textAString2 = getData('textAString2');
   551:   resultA2 = getData('resultA2');
   552:   textBString2 = getData('textBString2');
   553:   resultB2 = getData('resultB2');
   554:   textCString2 = getData('textCString2');
   555:   resultC2 = getData('resultC2');
   556:   buttonGroup2.updateSingleButton({ disabled: true }, 1);
   557:   buttonGroup2.updateSingleButton({ disabled: false }, 4);
   558:   select3.setDisabled(true);
   559:   table2.addRow(ggb2.instance.getValue('count') + 1, {
   560      isHeader: false,

   663  
   664: buttonGroup1.on('click:2', () => {
   665:   polyArray = getData('polyArray');
   666:   pointsArray = getData('pointsArray');
   667:   reflectionLinesArray = getData('reflectionLinesArray');
   668:   rotationPointsArray = getData('rotationPointsArray');
   669:   translationPointsArray = getData('translationPointsArray');
   670:   translationVectorsArray = getData('translationVectorsArray');
   671:   textAString = getData('textAString');
   672:   textBString = getData('textBString');
   673:   textCString = getData('textCString');
   674:   select1.setDisabled(false);
   675:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
   676:   if (ggb1.instance.getValue('count') == 1) {
   677      textAString = '';

   782  
   783: buttonGroup2.on('click:2', () => {
   784:   polyArray2 = getData('polyArray2');
   785:   pointsArray2 = getData('pointsArray2');
   786:   reflectionLinesArray2 = getData('reflectionLinesArray2');
   787:   rotationPointsArray2 = getData('rotationPointsArray2');
   788:   translationPointsArray2 = getData('translationPointsArray2');
   789:   translationVectorsArray2 = getData('translationVectorsArray2');
   790:   textAString2 = getData('textAString2');
   791:   textBString2 = getData('textBString2');
   792:   textCString2 = getData('textCString2');
   793:   select3.setDisabled(false);
   794:   buttonGroup2.updateSingleButton({ disabled: false }, 1);
   795:   if (ggb2.instance.getValue('count') == 1) {
   796      textAString2 = '';

   901  
   902: buttonGroup1.on('click:3', () => {
   903:   buttonGroup1.updateData({ visible: false });
   904:   select1.setDisabled(false);
   905:   select1.unselectAll();
   906:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
   907:   resetTime();
   908:   sendHome();
   909: });
   910: undefined
   911: buttonGroup2.on('click:3', () => {
   912:   buttonGroup2.updateData({ visible: false });
   913:   select3.setDisabled(false);
   914:   select3.unselectAll();
   915:   buttonGroup2.updateSingleButton({ disabled: false }, 1);
   916:   resetTime2();
   917:   sendHome2();
   918: });
   919: undefined
   920: buttonGroup1.on('click:4', () => {
   921:   polyArray = getData('polyArray');
   922:   pointsArray = getData('pointsArray');
   923:   reflectionLinesArray = getData('reflectionLinesArray');
   924:   rotationPointsArray = getData('rotationPointsArray');
   925:   translationPointsArray = getData('translationPointsArray');
   926:   translationVectorsArray = getData('translationVectorsArray');
   927:   currentReflectionSegs = getData('currentReflectionSegs');
   928:   currentAnimatedPoints = getData('currentAnimatedPoints');
   929:   textAString = getData('textAString');
   930:   textBString = getData('textBString');
   931:   textCString = getData('textCString');
   932:   buttonGroup1.updateData({ visible: false });
   933:   select1.setDisabled(false);
   934:   select1.unselectAll();
   935:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
   936:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
   937:   for (let i = 1, L = ggb1.instance.getValue('count') + 1; i < L; i++) {
   938      table1.deleteRow(i);

   991  
   992: buttonGroup2.on('click:4', () => {
   993:   polyArray2 = getData('polyArray2');
   994:   pointsArray2 = getData('pointsArray2');
   995:   reflectionLinesArray2 = getData('reflectionLinesArray2');
   996:   rotationPointsArray2 = getData('rotationPointsArray2');
   997:   translationPointsArray2 = getData('translationPointsArray2');
   998:   translationVectorsArray2 = getData('translationVectorsArray2');
   999:   currentReflectionSegs2 = getData('currentReflectionSegs2');
  1000:   currentAnimatedPoints2 = getData('currentAnimatedPoints2');
  1001:   textAString2 = getData('textAString2');
  1002:   textBString2 = getData('textBString2');
  1003:   textCString2 = getData('textCString2');
  1004:   buttonGroup2.updateData({ visible: false });
  1005:   select3.setDisabled(false);
  1006:   select3.unselectAll();
  1007:   buttonGroup2.updateSingleButton({ disabled: false }, 1);
  1008:   buttonGroup2.updateSingleButton({ disabled: true }, 4);
  1009:   for (let i = 1, L = ggb2.instance.getValue('count') + 1; i < L; i++) {
  1010      table2.deleteRow(i);

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-bc0631516022.js:
  146  
  147: buttonGroup1.on('click:1', () => {
  148:   polyArray = getData('polyArray');
  149:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  150:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  151:   select1.setDisabled(true);
  152:   if (ggb1.instance.getValue('showReflection')) {
  153      reflect();

  167  
  168: buttonGroup1.on('click:2', () => {
  169:   polyArray = getData('polyArray');
  170:   pointsArray = getData('pointsArray');
  171:   select1.setDisabled(false);
  172:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  173:   for (let i = pointsArray.length - 6, L = i + 6; i < L; i++) {
  174:     ggb1.instance.deleteObject(pointsArray[i]);
  175      pointsArray.pop(polyArray[i]);

  190  
  191: buttonGroup1.on('click:3', () => {
  192:   buttonGroup1.updateData({ visible: false });
  193:   select1.setDisabled(false);
  194:   select1.unselectAll();
  195:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  196:   resetTime();
  197:   sendHome();
  198: });
  199: undefined
  200: buttonGroup1.on('click:4', () => {
  201:   polyArray = getData('polyArray');
  202:   pointsArray = getData('pointsArray');
  203:   currentReflectionSegs = getData('currentReflectionSegs');
  204:   currentAnimatedPoints = getData('currentAnimatedPoints');
  205:   buttonGroup1.updateData({ visible: false });
  206:   select1.setDisabled(false);
  207:   select1.unselectAll();
  208:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  209:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  210:   ggb1.instance.setValue('count', 0);
  211    resetTime();

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-bdee68af1acc.js:
  183  
  184: buttonGroup1.on('click:1', () => {
  185:   polyArray = getData('polyArray');
  186:   pointsArray = getData('pointsArray');
  187:   reflectionLinesArray = getData('reflectionLinesArray');
  188:   currentRotationCenter = getData('currentRotationCenter');
  189:   currentReflectionLine = getData('currentReflectionLine');
  190:   currentVectorPoint1 = getData('currentVectorPoint1');
  191:   currentVectorPoint2 = getData('currentVectorPoint2');
  192:   translationPointsArray = getData('translationPointsArray');
  193:   translationVectorsArray = getData('translationVectorsArray');
  194:   textAString = getData('textAString');
  195:   resultA = getData('resultA');
  196:   textBString = getData('textBString');
  197:   resultB = getData('resultB');
  198:   textCString = getData('textCString');
  199:   resultC = getData('resultC');
  200:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  201:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  202:   select1.setDisabled(true);
  203:   table1.addRow(ggb1.instance.getValue('count') + 1, {
  204      isHeader: false,

  317  
  318: buttonGroup1.on('click:2', () => {
  319:   polyArray = getData('polyArray');
  320:   pointsArray = getData('pointsArray');
  321:   reflectionLinesArray = getData('reflectionLinesArray');
  322:   rotationPointsArray = getData('rotationPointsArray');
  323:   translationPointsArray = getData('translationPointsArray');
  324:   translationVectorsArray = getData('translationVectorsArray');
  325:   textAString = getData('textAString');
  326:   textBString = getData('textBString');
  327:   textCString = getData('textCString');
  328:   select1.setDisabled(false);
  329:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  330:   if (ggb1.instance.getValue('count') == 1) {
  331      textAString = '';

  436  
  437: buttonGroup1.on('click:3', () => {
  438:   buttonGroup1.updateData({ visible: false });
  439:   select1.setDisabled(false);
  440:   select1.unselectAll();
  441:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  442:   resetTime();
  443:   sendHome();
  444: });
  445: undefined
  446: buttonGroup1.on('click:4', () => {
  447:   polyArray = getData('polyArray');
  448:   pointsArray = getData('pointsArray');
  449:   reflectionLinesArray = getData('reflectionLinesArray');
  450:   rotationPointsArray = getData('rotationPointsArray');
  451:   translationPointsArray = getData('translationPointsArray');
  452:   translationVectorsArray = getData('translationVectorsArray');
  453:   currentReflectionSegs = getData('currentReflectionSegs');
  454:   currentAnimatedPoints = getData('currentAnimatedPoints');
  455:   textAString = getData('textAString');
  456:   textBString = getData('textBString');
  457:   textCString = getData('textCString');
  458:   buttonGroup1.updateData({ visible: false });
  459:   select1.setDisabled(false);
  460:   select1.unselectAll();
  461:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  462:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  463:   for (let i = 1, L = ggb1.instance.getValue('count') + 1; i < L; i++) {
  464      table1.deleteRow(i);

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-c2f41e0f5aee.js:
  17  
  18: buttonGroup1.on('click:1', () => {
  19:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  20:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  21:   if (ggb1.instance.getValue('count') == 0) {
  22      ggb1.instance.setValue('showInitialReflection', true);

  27  
  28: buttonGroup1.on('click:2', () => {
  29:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  31:   if (ggb1.instance.getValue('count') == 0) {
  32      ggb1.instance.setValue('showInitialRotation', true);

  41  
  42: buttonGroup1.on('click:3', () => {
  43:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  44:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  45:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  46:   ggb1.instance.setValue('count', 0);
  47    ggb1.instance.setValue('showInitialReflection', false);

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-cb35dc7a2ea3.js:
  146  
  147: buttonGroup1.on('click:1', () => {
  148:   polyArray = getData('polyArray');
  149:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  150:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  151:   select1.setDisabled(true);
  152:   if (ggb1.instance.getValue('showReflection')) {
  153      reflect();

  167  
  168: buttonGroup1.on('click:2', () => {
  169:   polyArray = getData('polyArray');
  170:   pointsArray = getData('pointsArray');
  171:   select1.setDisabled(false);
  172:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  173:   for (let i = pointsArray.length - 6, L = i + 6; i < L; i++) {
  174:     ggb1.instance.deleteObject(pointsArray[i]);
  175      pointsArray.pop(polyArray[i]);

  190  
  191: buttonGroup1.on('click:3', () => {
  192:   buttonGroup1.updateData({ visible: false });
  193:   select1.setDisabled(false);
  194:   select1.unselectAll();
  195:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  196:   resetTime();
  197:   sendHome();
  198: });
  199: undefined
  200: buttonGroup1.on('click:4', () => {
  201:   polyArray = getData('polyArray');
  202:   pointsArray = getData('pointsArray');
  203:   currentReflectionSegs = getData('currentReflectionSegs');
  204:   currentAnimatedPoints = getData('currentAnimatedPoints');
  205:   buttonGroup1.updateData({ visible: false });
  206:   select1.setDisabled(false);
  207:   select1.unselectAll();
  208:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  209:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  210:   ggb1.instance.setValue('count', 0);
  211    resetTime();

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-ddae121a6b92.js:
  274  
  275: buttonGroup1.on('click:1', () => {
  276:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  277:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  278:   ggb1.instance.startAnimation();
  279  });
  280  
  281: buttonGroup1.on('click:2', () => {
  282:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  283:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  284:   ggb1.instance.stopAnimation();
  285  });

DIDwhiteboard • Geometry/M1/TC L14 - Sequences of Basic Rigid Motions/slide-f587cb003bb0.js:
  23  
  24: buttonGroup1.on('click:1', () => {
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  26:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  27:   if (ggb1.instance.getValue('count') == 0) {
  28      ggb1.instance.setValue('showInitialReflection', true);

  35  
  36: buttonGroup1.on('click:2', () => {
  37:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  38:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  39:   if (ggb1.instance.getValue('count') == 0) {
  40      ggb1.instance.setValue('showInitialTranslation', true);

  45  
  46: buttonGroup1.on('click:3', () => {
  47:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  48:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  49:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  50:   ggb1.instance.setValue('count', 0);
  51    ggb1.instance.setValue('showInitialReflection', false);

DIDwhiteboard • Geometry/M1/TC L15 - Demo/slide1.js:
  89  
  90: buttonGroup1.on('click:1', () => {
  91:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  92:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  93:   runGGB2Animation();
  94  });

DIDwhiteboard • Geometry/M1/TC L16 - Demo/slide1.js:
  29  
  30: buttonGroup1.on('click:1', () => {
  31:   reset();
  32:   for (let i = 0, L = pointList.length; i < L; i++) {
  33:     ggb1.instance.setFixed(pointList[i], false, false);
  34      ggb1.instance.setPointSize(pointList[i], 1);

  43  
  44: buttonGroup1.on('click:2', () => {
  45:   reset();
  46:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  47:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  48:   for (let i = 0, L = pointList.length; i < L; i++) {
  49:     ggb1.instance.setFixed(pointList[i], false, true);
  50      ggb1.instance.setPointSize(pointList[i], 6);

DIDwhiteboard • Geometry/M1/TC L16 - Demo/slide2.js:
  29  
  30: buttonGroup1.on('click:1', () => {
  31:   reset();
  32:   for (let i = 0, L = pointList.length; i < L; i++) {
  33:     ggb1.instance.setFixed(pointList[i], false, false);
  34      ggb1.instance.setPointSize(pointList[i], 1);

  43  
  44: buttonGroup1.on('click:2', () => {
  45:   reset();
  46:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  47:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  48:   for (let i = 0, L = pointList.length; i < L; i++) {
  49:     ggb1.instance.setFixed(pointList[i], false, true);
  50      ggb1.instance.setPointSize(pointList[i], 6);

DIDwhiteboard • Geometry/M1/TC L16 - Demo/slide3.js:
  10  
  11: buttonGroup1.on('click:1', () => {
  12:   for (let i = 0, L = pointList.length; i < L; i++) {
  13:     ggb1.instance.setFixed(pointList[i], false, false);
  14      ggb1.instance.setPointSize(pointList[i], 1);

  23  
  24: buttonGroup1.on('click:2', () => {
  25:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  26:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  27:   ggb1.instance.stopAnimation();
  28    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Geometry/M1/TC L16 - Demo/slide4.js:
  46  
  47: buttonGroup1.on('click:1', () => {
  48:   reset();
  49:   for (let i = 0, L = pointList.length; i < L; i++) {
  50:     ggb1.instance.setFixed(pointList[i], false, false);
  51      ggb1.instance.setPointSize(pointList[i], 1);

  61  
  62: buttonGroup1.on('click:2', () => {
  63:   reset();
  64:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  65:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  66:   for (let i = 0, L = pointList.length; i < L; i++) {
  67:     ggb1.instance.setFixed(pointList[i], false, true);
  68      ggb1.instance.setPointSize(pointList[i], 6);

DIDwhiteboard • Geometry/M1/TD L21 - AAA and SSS/slide-1fec871fc06c.js:
   92  
   93: buttonGroup1.on('click:1', () => {
   94:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   95:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   96:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
   97:   if (ggb1.instance.getValue('time') == 0) {
   98      playAnimation();

  103  
  104: buttonGroup1.on('click:2', () => {
  105:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  106:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  107:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  108:   ggb1.instance.stopAnimation();
  109  });
  110  
  111: buttonGroup1.on('click:3', () => {
  112:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  113:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  114:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  115:   ggb1.instance.setAnimating('time', false);
  116    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Geometry/M1/TD L21 - AAA and SSS/slide-9a143f0bbe42.js:
  54  
  55: buttonGroup1.on('click:1', () => {
  56:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  57:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  58:   playAnimation();
  59: });
  60: undefined
  61: buttonGroup1.on('click:2', () => {
  62:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  63:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  64:   ggb1.instance.setAnimating('time', false);
  65    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Geometry/M1/TD L21 - AAA and SSS/slide-58658fc9a3ce.js:
  34  
  35: buttonGroup1.on('click:1', () => {
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  37:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  38:   playAnimation();
  39: });
  40: undefined
  41: buttonGroup1.on('click:2', () => {
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  43:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  44:   ggb1.instance.setAnimating('time', false);
  45    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Geometry/M1/TD L21 - AAA and SSS/slide-909754c5d796.js:
  36  
  37: buttonGroup1.on('click:1', () => {
  38:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  39:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  40:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  41:   ggb1.instance.setAnimating('time', false);
  42    ggb1.instance.setValue('time', 0);

  46  
  47: buttonGroup1.on('click:2', () => {
  48:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  49:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  50:   ggb1.instance.setAnimating('time', false);
  51    ggb1.instance.setValue('time', 1);

  57  
  58: buttonGroup1.on('click:3', () => {
  59:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  60:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  61:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  62:   ggb1.instance.setAnimating('time', false);
  63    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Geometry/M1/TD L21 - AAA and SSS/slide-b611f9a88882.js:
  19  
  20: buttonGroup1.on('click:1', () => {
  21:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  22:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  23:   ggb1.instance.setAnimating('time', false);
  24    ggb1.instance.setValue('time', 0);

  28  
  29: buttonGroup1.on('click:2', () => {
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  32:   ggb1.instance.setAnimating('time', false);
  33    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Geometry/M1/TE L24 - The Structure of Theorems/slide1.js:
  19  
  20: buttonGroup1.on('click:1', () => {
  21:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  22:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  23:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  24:   ggb1.instance.setAnimating('time', false);
  25    ggb1.instance.setValue('time', 0);

  29  
  30: buttonGroup1.on('click:2', () => {
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  32:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  33:   ggb1.instance.stopAnimation();
  34  });
  35  
  36: buttonGroup1.on('click:3', () => {
  37:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  38:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  39:   ggb1.instance.startAnimation();
  40  });
  41  
  42: buttonGroup1.on('click:4', () => {
  43:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  44:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  45:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  46:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  47:   ggb1.instance.stopAnimation();
  48    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • GK/GKM2TBL6 - Open Sort.js:
   2  
   3: buttonGroup1.on("click:1", () => {
   4: 	ggb1.instance.setValue("currentindex", 0);
   5  	console.log(ggb1.instance.getValue("currentindex"));
   6  });
   7: buttonGroup1.on("click:2", () => {
   8: 	ggb1.instance.setValue("currentindex", 1);
   9  	console.log(ggb1.instance.getValue("currentindex"));

  11  });
  12: buttonGroup1.on("click:3", () => {
  13: 	ggb1.instance.setValue("currentindex", 2);
  14  	console.log(ggb1.instance.getValue("currentindex"));

DIDwhiteboard • GK/GKM5TBL12 - Bowling Game.js:
  32  //roll the ball
  33: buttonGroup1.on("click:1", () => {
  34: 	ggb1.instance.setVisible("M", false);
  35  	ggb1.instance.setVisible("MHalo", false);

  43  //reset
  44: buttonGroup1.on("click:2", () => {
  45: 	ggb1.instance.setVisible("BowlingBall", true);
  46  	buttonGroup1.updateSingleButton({ disabled: true }, 1);

DIDwhiteboard • GK/GKM5TDL26 - Robot Rule.js:
  23  //Try It button
  24: buttonGroup1.on("click:1", () => {
  25: 	numberIn = input1.data.text;
  26: 	ggb1.instance.setValue("Input", numberIn);
  27  	numberOut = ggb1.instance.getValue("Input+Rule");

  84  //New Rule button
  85: buttonGroup1.on("click:2", () => {
  86: 	ggb1.instance.evalCommand("UpdateConstruction()");
  87  	input1.updateData({ text: "" });

DIDwhiteboard • IM1/M1/TA L02/slide-4a7c141d23aa.js:
   27  //choose blossom
   28: buttonGroup1.on("click:1", () => {
   29:   ggb1.updateData({ visible: true });
   30    ggb2.updateData({ visible: false });

   39  //choose unwrap
   40: buttonGroup1.on("click:2", () => {
   41:   ggb1.updateData({ visible: false });
   42    ggb2.updateData({ visible: true });

   51  //animate slicing and petals
   52: buttonGroup2.on("click:1", () => {
   53:   ggb1.instance.evalCommand("RunClickScript(button2)");
   54    ggb1.instance.evalCommand("RunClickScript(button1)");

   63  //close petals
   64: buttonGroup2.on("click:2", () => {
   65:   ggb1.instance.evalCommand("RunClickScript(button3)");
   66    buttonGroup2.updateSingleButton({ disabled: false }, 1);

   74  //resets back to applet open
   75: buttonGroup2.on("click:3", () => {
   76:   ggb1.instance.stopAnimation();
   77    ggb1.instance.evalCommand("RunClickScript(button2)");

   87  //animate unwrap
   88: buttonGroup3.on("click:1", () => {
   89:   // ggb2.instance.evalCommand("RunClickScript(button2)");
   90    ggb2.instance.evalCommand("RunClickScript(button1)");

   99  //re-wrap
  100: buttonGroup3.on("click:2", () => {
  101:   ggb2.instance.evalCommand("RunClickScript(button3)");
  102    buttonGroup3.updateSingleButton({ disabled: false }, 1);

  110  //resets back to applet open
  111: buttonGroup3.on("click:3", () => {
  112:   ggb2.instance.stopAnimation();
  113    ggb2.instance.evalCommand("RunClickScript(button2)");

DIDwhiteboard • IM1/M1/TA L02/slide-4d88f789ed1a.js:
  14  //set time to zero, start time slider
  15: buttonGroup1.on("click:1", () => {
  16:   ggb1.instance.evalCommand("RunClickScript(button1)");
  17    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  27  //stop time slider, set time to zero
  28: buttonGroup1.on("click:2", () => {
  29:   ggb1.instance.evalCommand("RunClickScript(button1)");
  30    ggb1.instance.stopAnimation();

DIDwhiteboard • IM1/M1/TA L02/slide-091124be5927.js:
  14  //set time to zero, start time slider
  15: buttonGroup1.on("click:1", () => {
  16:   ggb1.instance.evalCommand("RunClickScript(button1)");
  17    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  27  //stop time slider, set time to zero
  28: buttonGroup1.on("click:2", () => {
  29:   ggb1.instance.evalCommand("RunClickScript(button2)");
  30    buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • IM1/M1/TA L02/slide-f58967ab7a5b.js:
  14  //set time to zero, start time slider
  15: buttonGroup1.on("click:1", () => {
  16:   ggb1.instance.evalCommand("RunClickScript(button1)");
  17    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  27  //stop time slider, set time to zero
  28: buttonGroup1.on("click:2", () => {
  29:   ggb1.instance.evalCommand("RunClickScript(button2)");
  30    ggb1.instance.stopAnimation();

DIDwhiteboard • IM1/M1/TB L09 - Writing and Solving Equations in One Variable/slide11.js:
   8  
   9: buttonGroup1.on("click:1", () => {
  10:   ggb1.instance.setAnimating("time", true);
  11    ggb1.instance.startAnimation("time", true);

  15  
  16: buttonGroup1.on("click:2", () => {
  17:   ggb1.instance.setAnimating("time", false);
  18    ggb1.instance.stopAnimation("time", true);

DIDwhiteboard • IM1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/slide11 slide-102b2e9edb49.js:
  30  
  31: buttonGroup1.on("click:1", () => {
  32:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  33:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  34:   text3.updateData({ visible: true });
  35:   input1.updateData({ visible: true });
  36:   text4.updateData({ visible: true });
  37:   button2.updateData({ visible: true });
  38:   ggb1.instance.setVisible("halo", false);
  39    ggb1.instance.setFixed("DragPoint", false, false);

  42  
  43: buttonGroup1.on("click:2", () => {
  44:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  45:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  46:   ggb1.instance.setVisible("halo", true);
  47    ggb1.instance.setFixed("DragPoint", false, true);

DIDwhiteboard • IM1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/slide15 slide-fd85e50c42c6.js:
  30  
  31: buttonGroup1.on("click:1", () => {
  32:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  33:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  34:   text3.updateData({ visible: true });
  35:   input1.updateData({ visible: true });
  36:   text4.updateData({ visible: true });
  37:   button2.updateData({ visible: true });
  38:   ggb1.instance.setVisible("halo", false);
  39    ggb1.instance.setFixed("DragPoint", false, false);

  42  
  43: buttonGroup1.on("click:2", () => {
  44:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  45:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  46:   ggb1.instance.setVisible("halo", true);
  47    ggb1.instance.setFixed("DragPoint", false, true);

DIDwhiteboard • IM1/M2/TA L01 - Solution Sets of Linear Equations in Two Variables/slide19 slide-be0d33a7b382.js:
  80  
  81: buttonGroup1.on("click:1", () => {
  82:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  83:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  84:   ggb1.instance.setVisible("C1", true);
  85    text1.updateData({ text: "$25$ kilometers" });

  91  
  92: buttonGroup1.on("click:2", () => {
  93:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  94:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  95:   text1.updateData({ text: "$25$ songs" });
  96:   ggb2.instance.setVisible("C2", true);
  97    ggb1.updateData({ visible: false });

DIDwhiteboard • IM1/M2/TC L16 - Solution Sets of Systems of Linear Inequalities/slide4.js:
   75  
   76: buttonGroup1.on("click:1", () => {
   77:   ggb1.instance.setValue("showLine1Points", false);
   78    ggb1.instance.setValue("allowLineControls", false);

  113  
  114: buttonGroup1.on("click:2", () => {
  115:   ggb1.instance.setValue("showLine1Points", true);
  116    ggb1.instance.setValue("allowLineControls", true);

DIDwhiteboard • IM1/M2/TC L16 - Solution Sets of Systems of Linear Inequalities/slide5.js:
   75  
   76: buttonGroup1.on("click:1", () => {
   77:   ggb1.instance.setValue("showLine2Points", false);
   78    ggb1.instance.setValue("allowLineControls", false);

  113  
  114: buttonGroup1.on("click:2", () => {
  115:   ggb1.instance.setValue("showLine2Points", true);
  116    ggb1.instance.setValue("allowLineControls", true);

DIDwhiteboard • IM1/M2/TC L16 - Solution Sets of Systems of Linear Inequalities/slide8.js:
   45  
   46: buttonGroup1.on("click:1", () => {
   47:   ggb1.instance.setValue("showLine1Points", false);
   48    ggb1.instance.setValue("showLine2Points", false);

   72  
   73: buttonGroup1.on("click:2", () => {
   74:   ggb1.instance.setValue("showLine1Points", true);
   75    ggb1.instance.setValue("showLine2Points", true);

   90  
   91: buttonGroup2.on("click:1", () => {
   92:   ggb1.instance.setFixed("solutionSetText", true, false);
   93    buttonGroup2.updateSingleButton(

  106  
  107: buttonGroup2.on("click:2", () => {
  108:   ggb1.instance.setFixed("solutionSetText", false, true);
  109    buttonGroup2.updateSingleButton(

DIDwhiteboard • IM1/M2/TD L19 - The Distance Formula/slide11.js:
  44  
  45: buttonGroup1.on("click:1", () => {
  46:   const step = getData("step");
  47:   startNextAnimation(step);
  48:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  49: });
  50: undefined
  51: buttonGroup1.on("click:2", () => {
  52:   ggb1.instance.stopAnimation();
  53    const times = ["time1", "time2", "time3", "time4"];

DIDwhiteboard • IM1/M2/TD L19 - The Distance Formula/slide13.js:
  128  
  129: buttonGroup1.on("click:1", () => {
  130:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  131:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  132: });
  133: undefined
  134: buttonGroup1.on("click:2", () => {
  135:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  136:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  137:   ggb1.instance.setValue("time", 0);
  138  });

DIDwhiteboard • IM1/M2/TD L19 - The Distance Formula/slide16.js:
  128  
  129: buttonGroup1.on("click:1", () => {
  130:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  131:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  132: });
  133: undefined
  134: buttonGroup1.on("click:2", () => {
  135:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  136:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  137:   ggb1.instance.setValue("time", 0);
  138  });

DIDwhiteboard • OMO/G1/M2/TC/L10/Version1/slide1.js:
  116  
  117: buttonGroup1.on("click:1", () => {
  118: 	buttonGroup1.updateSingleButton({ disabled: true, text: "Submitted" }, 1);
  119: 	media1.play();
  120: 	ggb1.updateData({ disabled: true });
  121  });
  122: buttonGroup1.on("click:2", () => {
  123: 	let safeArray = [
  124: 		"A",
  125: 		"B",
  126: 		"BLbin",
  127: 		"C",
  128: 		"D",
  129: 		"DragPoint",
  130: 		"DragPointGreen",
  131: 		"E",
  132: 		"F",
  133: 		"G",
  134: 		"H",
  135: 		"corner",
  136: 	];
  137: 	buttonGroup1.updateSingleButton({ disabled: true, text: "Submit" }, 1);
  138: 	buttonGroup1.updateSingleButton({ disabled: true }, 2);
  139: 	let pointArray = ggb1.instance.getAllObjectNames("point");
  140  	pointArray.forEach((element) => {

DIDwhiteboard • OMO/G1/M2/TC/L10/Version1/slide2.js:
  11  	});
  12: 	buttonGroup1.on("click:1", () => {
  13:         if (fib1.getInput('0').text=="3") {media1.play();}
  14: 	});
  15: 	vid.bind("end", controls.next);
  16: });
  17: undefined
  18: slide.on("firstload", () => {
  19: 	ggb1.instance.setValue("showCubes", true);
  20  	saveData({

  28  
  29: buttonGroup1.on("click:1", () => {
  30: 	buttonGroup1.updateSingleButton({ disabled: true, text: "Submitted" }, 1);
  31: 	media1.play();
  32: 	ggb1.updateData({ disabled: true });
  33  });
  34: buttonGroup1.on("click:2", () => {
  35: 	ggb1.instance.setXML(getData("ggbXML"));
  36  	saveData({ count: 1, holdnum: -1 });

DIDwhiteboard • OMO/G1/M2/TC/L10/Version1/slide3.js:
  33  
  34: buttonGroup1.on("click:1", () => {
  35:     buttonGroup1.updateSingleButton({disabled: true, text: "Submitted"}, 1);
  36:     if (fib1.getInput('0').text == "5") {
  37:         media1.play();
  38:     }
  39: });
  40: undefined
  41: buttonGroup1.on("click:2", () => {
  42: 	select1.selectOption("0");
  43: 	ggb1.instance.setXML(getData("ggbXML"));
  44  	saveData({ count: 1, holdnum: -1 });

DIDwhiteboard • OMO/G1/M2/TC/L10/Version1/slide4.js:
  108  
  109: buttonGroup1.on("click:1", () => {
  110: 	buttonGroup1.updateSingleButton({ disabled: true, text: "Submitted" }, 1);
  111: 	select2.setVisible(true);
  112: });
  113: undefined
  114: buttonGroup1.on("click:2", () => {
  115: 	ggb2.instance.setXML(getData("ggbXML"));
  116  	saveData({ count: 1, holdnum: -1 });

DIDwhiteboard • OMO/G1/M2/TC/L10/Version2/slide1.js:
  234  //submit
  235: buttonGroup1.on("click:1", () => {
  236: 	console.log(fib2.getInput("0").text);
  237: 	if (fib2.getInput("0").text == 3 && getData("thirdSubmitActivated")) {
  238: 		media12.updateData({ visible: false });
  239: 		media11.updateData({ visible: false });
  240: 		media13.updateData({ visible: true });
  241: 	}
  242: 	if (fib2.getInput("0").text != 3 && getData("thirdSubmitActivated")) {
  243: 		media13.updateData({ visible: false });
  244: 		media12.updateData({ visible: true });
  245: 		media11.updateData({ visible: false });
  246: 	}
  247: 	if (
  248: 		ggb1.instance.getValue("currentValue") == 14 &&
  249  		getData("secondSubmitActivated") &&

  291  //reset
  292: buttonGroup1.on("click:2", () => {
  293: 	ggb1.instance.setXML(getData("ggbXML"));
  294  	saveData({ count: 1, holdnum: -1 });

DIDwhiteboard • OMO/G1/M2/TC/L10/Version2/slide2.js:
  73  //submit
  74: buttonGroup1.on("click:1", () => {
  75: 	buttonGroup1.updateSingleButton({ disabled: true, text: "Submitted" }, 1);
  76: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  77: 	if (fib1.getInput("0").text == "5") {
  78: 		media2.updateData({ visible: true });
  79: 	}
  80: });
  81: undefined
  82: //reset
  83: buttonGroup1.on("click:2", () => {
  84: 	ggb1.instance.setXML(getData("ggbXML"));
  85  	saveData({ count: 1, holdnum: -1 });

DIDwhiteboard • OMO/G1/M2/TC/L10/Version2/slide3.js:
  71  //submit
  72: buttonGroup1.on("click:1", () => {
  73: 	buttonGroup1.updateSingleButton({ disabled: true, text: "Submitted" }, 1);
  74: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  75: 	if (fib1.getInput("0").text == 9) {
  76: 		media1.updateData({ visible: true });
  77: 	}
  78: });
  79: //reset
  80: buttonGroup1.on("click:2", () => {
  81: 	ggb1.instance.setXML(getData("ggbXML"));
  82  	saveData({ count: 1, holdnum: -1 });

DIDwhiteboard • OMO/G1/M2/TC/L10/Version3/slide1.js:
  46  //submit
  47: buttonGroup1.on('click:1', () => {
  48:   buttonGroup1.updateSingleButton({ disabled: true, text: 'Submitted' }, 1);
  49:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  50:   controls.next();
  51: });
  52: undefined
  53: //reset
  54: buttonGroup1.on('click:2', () => {
  55:   for (let i = 0, L = blankNumList1.length; i < L; i++) {
  56:     ggb1.instance.setVisible(blankNumList1[i], false);
  57    }

DIDwhiteboard • OMO/G1/M2/TC/L10/Version3/slide3.js:
  35  //submit
  36: buttonGroup1.on('click:1', () => {
  37:   buttonGroup1.updateSingleButton({ disabled: true, text: 'Submitted' }, 1);
  38:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  39:   controls.next();
  40: });
  41: undefined
  42: //reset
  43: buttonGroup1.on('click:2', () => {
  44:   for (let i = 0, L = blankNumList1.length; i < L; i++) {
  45:     ggb1.instance.setVisible(blankNumList1[i], false);
  46    }

DIDwhiteboard • OMO/G1/M2/TC/L10/Version3/slide4.js:
  36  //submit
  37: buttonGroup1.on('click:1', () => {
  38:   buttonGroup1.updateSingleButton({ disabled: true, text: 'Submitted' }, 1);
  39:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  40:   controls.next();
  41: });
  42: undefined
  43: //reset
  44: buttonGroup1.on('click:2', () => {
  45:   for (let i = 0, L = blankNumList1.length; i < L; i++) {
  46:     ggb1.instance.setVisible(blankNumList1[i], false);
  47    }

  64  //reset
  65: buttonGroup1.on('click:3', () => {
  66:   for (let i = 0, L = blankNumList1.length; i < L; i++) {
  67:     ggb1.instance.setVisible(blankNumList1[i], false);
  68    }

DIDwhiteboard • OMO/G1/M2/TC/L10/Version3/slide6.js:
  44  //submit
  45: buttonGroup1.on('click:1', () => {
  46:   let lastClickedGreaterNum = getData('lastClickedGreaterNum');
  47:   console.log(lastClickedGreaterNum);
  48:   switch (lastClickedGreaterNum) {
  49:     case correctNum3:
  50:       //submitted correct equation
  51:       buttonGroup1.updateSingleButton({ disabled: true, text: 'Submitted' }, 1);
  52:       buttonGroup1.updateSingleButton({ disabled: false }, 2);
  53:       controls.next();
  54:       break;
  55:     default:
  56:       //submits incorrect equation
  57:       ggb1.instance.stopAnimation();
  58        ggb1.instance.setValue('jiggleTime', 0);

  69  //reset
  70: buttonGroup1.on('click:2', () => {
  71:   for (let i = 0, L = blankNumList2.length; i < L; i++) {
  72:     ggb1.instance.setVisible(blankNumList2[i], false);
  73    }

DIDwhiteboard • OMO/G1/M2/TC/L10/Version3/slide8.js:
  48  //submit
  49: buttonGroup1.on('click:1', () => {
  50:   ggb1.instance.setVisible('greenCheck', false);
  51    let inputVal = ggb1.instance.getValue('blank2Num');

  77  //reset
  78: buttonGroup1.on('click:2', () => {
  79:   ggb1.instance.setVisible('greenCheck', false);
  80    ggb1.instance.setValue('blank2Num', '?');

DIDwhiteboard • OMO/G1/M2/TC/L10/Version3/slide8alt1.js:
  48  //submit
  49: buttonGroup1.on('click:1', () => {
  50:   ggb1.instance.setVisible('greenCheck', false);
  51    let inputVal = ggb1.instance.getValue('blank2Num');

  77  //reset
  78: buttonGroup1.on('click:2', () => {
  79:   ggb1.instance.setVisible('greenCheck', false);
  80    ggb1.instance.setValue('blank2Num', '?');

DIDwhiteboard • OMO/G1/M2/TC/L10/Version3/slide8alt2.js:
  47  //submit
  48: buttonGroup1.on('click:1', () => {
  49:   ggb1.instance.setVisible('greenCheck', false);
  50    ggb1.instance.setValue('circleBlank1Time', 0);

  79  //reset
  80: buttonGroup1.on('click:2', () => {
  81:   ggb1.instance.setVisible('greenCheck', false);
  82    ggb1.instance.setValue('blank2Num', '?');

DIDwhiteboard • OMO/G1/M2/TC/L10/Version3/slide8alt3.js:
   47  //submit
   48: buttonGroup1.on('click:1', () => {
   49:   ggb1.instance.setVisible('greenCheck', false);
   50    ggb1.instance.setVisible('CubeXWrongEnd', false);

  107  //reset
  108: buttonGroup1.on('click:2', () => {
  109:   ggb1.instance.setVisible('greenCheck', false);
  110    ggb1.instance.setVisible('CubeXWrongEnd', false);

DIDwhiteboard • OMO/G1/M2/TC/L10/Version3/slide8alt4.js:
  47  //submit
  48: buttonGroup1.on('click:1', () => {
  49:   ggb1.instance.setVisible('greenCheck', false);
  50    ggb1.instance.setVisible('CubeXWrongEnd', false);

  94  //reset
  95: buttonGroup1.on('click:2', () => {
  96:   ggb1.instance.setVisible('greenCheck', false);
  97    ggb1.instance.setVisible('CubeXWrongEnd', false);

DIDwhiteboard • OMO/G1/M2/TC/L10/Version3/slide8new.js:
  125  //submit
  126: buttonGroup1.on("click:1", () => {
  127:   ggb1.instance.setVisible("greenCheck", false);
  128    ggb1.instance.setVisible("CubeXWrongEnd", false);

  189  //reset
  190: buttonGroup1.on("click:2", () => {
  191:   // ggb1.instance.setVisible('greenCheck', false);
  192    // ggb1.instance.setVisible('CubeXWrongEnd', false);

DIDwhiteboard • OMO/G1/M2/TC/L10/Version4/slide1.js:
  59  
  60: buttonGroup1.on("click:1", () => {
  61: 	let studentInput = ggb1.instance.getValueString("answer");
  62  	console.log(

DIDwhiteboard • OMO/G1/M2/TC/L10/Version4/slide2.js:
  539  //submit
  540: buttonGroup1.on("click:1", () => {
  541: 	ggb1.instance.evalCommand("SetVisibleInView(Follow,1,false)");
  542  	saveData(

  605  //reset
  606: buttonGroup1.on("click:2", () => {
  607: 	ggb1.instance.setXML(getData("ggbXML", "ggb1"));
  608  	ggb3.instance.setXML(getData("ggbXML3", "ggb1"));

  651  //submit
  652: buttonGroup2.on("click:1", () => {
  653: 	ggb1.instance.evalCommand("SetVisibleInView(Follow,1,false)");
  654  	console.log(ggb1.instance.getValue("currentValue"));

  709  //reset
  710: buttonGroup2.on("click:2", () => {
  711: 	ggb1.instance.setXML(getData("ggbXML", "ggb1"));
  712  	saveData(

DIDwhiteboard • OMO/G1/M2/TC/L10/Version4/slide4.js:
  298  //submit
  299: buttonGroup1.on("click:1", () => {
  300: 	buttonGroup1.updateSingleButton({ disabled: true, text: "Submitted" }, 1);
  301: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  302: 	if (ggb1.instance.getValue("currentValue") == 11) {
  303  		ggb1.instance.evalCommand("SetVisibleInView(Follow,1,false)");

  339  //reset
  340: buttonGroup1.on("click:2", () => {
  341: 	ggb1.instance.setXML(getData("ggbXML", "ggb1"));
  342  	ggb3.instance.setXML(getData("ggbXML3", "ggb1"));

DIDwhiteboard • OMO/G1/M2/TC/L10/Version4/slide5.js:
  51  //submit
  52: buttonGroup1.on("click:1", () => {
  53: 	buttonGroup1.updateSingleButton({ disabled: true, text: "Submitted" }, 1);
  54: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
  55: 	saveData(
  56: 		{ problem4Attempts: getData("problem4Attempts", "ggb1") + 1 },
  57  		"ggb1"

  85  //reset
  86: buttonGroup1.on("click:2", () => {
  87: 	ggb2.instance.setTextValue("answer", "");
  88  	buttonGroup1.updateSingleButton({ disabled: false, text: "Submit" }, 1);

DIDwhiteboard • OMO/G4/M2/TB/L7/V1/newSlide4.js:
  39  	});
  40: 	buttonGroup2.on("click:1", () => {
  41: 		vid.play();
  42: 		ggb1.updateData({disabled: true});
  43  		ggb2.updateData({disabled: true});

  72  
  73: buttonGroup2.on("click:1", () => {
  74: 	ggb1.instance.evalCommand("RunClickScript(button3)");
  75  	grid = false;

  78  });
  79: buttonGroup2.on("click:2", () => {
  80: 	ggb1.instance.evalCommand("RunClickScript(button4)");
  81  	grid = true;

DIDwhiteboard • OMO/G4/M2/TB/L7/V1/newSlide7.js:
  87  
  88: buttonGroup2.on("click:1", () => {
  89: 	ggb1.instance.evalCommand("RunClickScript(button3)");
  90  	grid = false;

  93  });
  94: buttonGroup2.on("click:2", () => {
  95: 	ggb1.instance.evalCommand("RunClickScript(button4)");
  96  	grid = true;

DIDwhiteboard • OMO/G4/M2/TB/L7/V1/newSlide8.js:
  110  
  111: buttonGroup1.on("click:1", () => {
  112: 	let currentCount = ggb1.data.count;
  113  	buttonGroup1.updateSingleButton({ disabled: true }, 1);

DIDwhiteboard • OMO/G4/M2/TB/L7/V1/newSlide9.js:
  84  
  85: buttonGroup1.on("click:1", () => {
  86: 	let currentCount = ggb1.data.count;
  87  	switch (currentCount) {

DIDwhiteboard • OMO/G4/M2/TB/L7/V1/pseudo.js:
  109  
  110: buttonGroup1.on("click:1", () => {
  111: 	let currentCount = ggb1.data.count;
  112  	buttonGroup1.updateSingleButton({ disabled: true }, 1);

DIDwhiteboard • OMO/G4/M2/TB/L7/V1/slide1.js:
  113  
  114: buttonGroup1.on("click:1", () => {
  115: 	ggb1.instance.evalCommand("RunClickScript(button1)");
  116  	separated = true;
  117  });
  118: buttonGroup1.on("click:2", () => {
  119: 	ggb1.instance.evalCommand("RunClickScript(button1)");
  120  	separated = false;

  122  
  123: buttonGroup2.on("click:1", () => {
  124: 	ggb1.instance.evalCommand("RunClickScript(button3)");
  125  	grid = false;

  128  });
  129: buttonGroup2.on("click:2", () => {
  130: 	ggb1.instance.evalCommand("RunClickScript(button4)");
  131  	grid = true;

DIDwhiteboard • OMO/G4/M2/TB/L7/V1/slide2.js:
  58  
  59: buttonGroup1.on("click:1", () => {
  60: 	ggb1.instance.evalCommand("RunClickScript(button1)");
  61  	separated = true;
  62  });
  63: buttonGroup1.on("click:2", () => {
  64: 	ggb1.instance.evalCommand("RunClickScript(button1)");
  65  	separated = false;

  67  
  68: buttonGroup2.on("click:1", () => {
  69: 	ggb1.instance.evalCommand("RunClickScript(button3)");
  70  	grid = false;

  73  });
  74: buttonGroup2.on("click:2", () => {
  75: 	ggb1.instance.evalCommand("RunClickScript(button4)");
  76  	grid = true;

DIDwhiteboard • OMO/G4/M2/TB/L7/V1/slide3.js:
  36  
  37: buttonGroup1.on("click:1", () => {
  38: 	let currentCount = ggb1.data.count;
  39  	console.log(currentCount);

DIDwhiteboard • OMO/G4/M2/TB/L7/V1/slide4.js:
  34  
  35: buttonGroup1.on("click:1", () => {
  36: 	let currentCount = ggb1.data.count;
  37  	switch (currentCount) {

DIDwhiteboard • OMO/G4/M2/TB/L7/V2/slide4.js:
   91    });
   92:   buttonGroup2.on("click:1", () => {
   93:     if (!getData("step3Complete")) {
   94:       vid.play();
   95:       saveData({ step3Complete: true });
   96:     }
   97:     ggb1.updateData({ disabled: true });
   98      ggb2.updateData({ disabled: true });

  147  
  148: buttonGroup2.on("click:1", () => {
  149:   ggb1.instance.evalCommand("RunClickScript(button3)");
  150    saveData({ grid: false });

  153  
  154: buttonGroup2.on("click:2", () => {
  155:   ggb1.instance.evalCommand("RunClickScript(button4)");
  156    saveData({ grid: true });

DIDwhiteboard • OMO/G4/M2/TB/L7/V2/slide7.js:
   95  
   96: buttonGroup2.on("click:1", () => {
   97:   ggb1.instance.evalCommand("RunClickScript(button3)");
   98    grid = false;

  101  });
  102: buttonGroup2.on("click:2", () => {
  103:   ggb1.instance.evalCommand("RunClickScript(button4)");
  104    grid = true;

DIDwhiteboard • OMO/G4/M2/TB/L7/V2/slide8.js:
  130  
  131: buttonGroup1.on("click:1", () => {
  132:   let currentCount = ggb1.data.count;
  133    buttonGroup1.updateSingleButton({ disabled: true }, 1);

DIDwhiteboard • OMO/G4/M2/TB/L7/V2/slide9.js:
  84  
  85: buttonGroup1.on("click:1", () => {
  86:   let currentCount = ggb1.data.count;
  87    recordAttempt(1, {

DIDwhiteboard • OMO/G6/slide4.js:
  35  //submit bg1
  36: buttonGroup1.on("click:1", () => {
  37: 	ggb1.instance.evalCommand("SelectObjects()");
  38  	buttonGroup1.updateSingleButton({ disabled: true, text: "Submitted" }, 1);

  81  //reset bg1
  82: buttonGroup1.on("click:2", () => {
  83: 	ggb1.instance.setXML(getData("resetXML", "ggb1"));
  84  	ggb1.instance.evalCommand("SetVisibleInView(SideHandle,1,false)");

DIDwhiteboard • OMO/G6/slide5.js:
  67  //submit bg1
  68: buttonGroup1.on("click:1", () => {
  69: 	buttonGroup1.updateSingleButton({disabled: true, text: "Submitted"}, 1);
  70: 	ggb1.instance.evalCommand("SelectObjects()");
  71  	saveData({ggbXML: ggb1.instance.getXML()}, "ggb1");

  90  //reset bg1
  91: buttonGroup1.on("click:2", () => {
  92: 	ggb1.instance.setXML(getData("resetXML", "ggb1"));
  93  	ggb1.instance.registerObjectUpdateListener("TopHandle", makeRects);

DIDwhiteboard • OMO/G9/M2/TA/L2/Slide1.js:
  36  //graphs line
  37: buttonGroup1.on("click:1", () => {
  38: 	firstTime = false;
  39: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  40: 	ggb1.instance.setAnimating("time", true);
  41  	ggb1.instance.startAnimation();

DIDwhiteboard • OMO/G9/M2/TA/L2/Slide4.js:
  42  //graphs line
  43: buttonGroup1.on("click:1", () => {
  44: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  45: 	text1.updateData({ text:`You plotted an $x$-intercept point of $(${ggb1.instance.getXcoord("A")},${ggb1.instance.getYcoord("A")})$ and a $y$-intercept point of $(${ggb1.instance.getXcoord("B")},${ggb1.instance.getYcoord("B")})$. \n\n The $x$-intercept point is $(2,0)$ and the $y$-intercept point is $(0,4)$.` });
  46  	ggb1.instance.setValue("showCheck",false);

DIDwhiteboard • OMO/G9/M2/TA/L2/Slide6.js:
  44  //graphs line
  45: buttonGroup1.on("click:1", () => {
  46: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  47: 	text2.updateData({ visible: false });
  48: 	ggb1.instance.setValue("showCheck", false);
  49  	ggb1.instance.setAnimating("time", true);

DIDwhiteboard • OMO/G9/M2/TA/L2/Slide8.js:
  87  //graphs line
  88: buttonGroup1.on("click:1", () => {
  89: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  90: 	text3.updateData({ visible: false });
  91: 	ggb1.instance.setValue("showCheck", false);
  92  	ggb1.instance.setAnimating("time", true);

DIDwhiteboard • OMO/G9/M2/TA/L2/Slide10.js:
  79  //graphs line
  80: buttonGroup1.on("click:1", () => {
  81: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  82: 	text3.updateData({ visible: false });
  83: 	ggb1.instance.setValue("showCheck", false);
  84  	ggb1.instance.setAnimating("time", true);

DIDwhiteboard • OMO/G9/M2/TA/L2/Slide12.js:
  36  //graphs line
  37: buttonGroup1.on("click:1", () => {
  38: 	firstTime = false;
  39: 	buttonGroup1.updateSingleButton({ disabled: true }, 1);
  40: 	ggb1.instance.setAnimating("time", true);
  41  	ggb1.instance.startAnimation();

DIDwhiteboard • Other/Onboarding/Learning Task 1/slide1.js:
  49  
  50: buttonGroup1.on('click:1', () => {
  51:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  52:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  53:   ggb1.instance.setAnimating('pause', false);
  54    ggb1.instance.setValue('pause', 0);

  60  
  61: buttonGroup1.on('click:2', () => {
  62:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  63:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  64:   ggb1.instance.stopAnimation();
  65  });

DIDwhiteboard • Other/Onboarding/Learning Task 1/slide2.js:
  48  
  49: buttonGroup1.on('click:1', () => {
  50:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  51:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  52:   shareText1.updateData({ visible: true });
  53:   shareInput1.updateData({ visible: true });
  54:   shareButton1.updateData({ visible: true });
  55:   ggb1.instance.setAnimating('pause', false);
  56    ggb1.instance.setValue('pause', 0);

  63  
  64: buttonGroup1.on('click:2', () => {
  65:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  66:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  67:   ggb1.instance.stopAnimation();
  68    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • PKTK/PKM1TAL4 - Sorting.js:
   2  
   3: buttonGroup1.on("click:1", () => {
   4: 	ggb1.instance.setValue("currentindex", 0);
   5  	console.log(ggb1.instance.getValue("currentindex"));
   6  });
   7: buttonGroup1.on("click:2", () => {
   8: 	ggb1.instance.setValue("currentindex", 1);
   9  	console.log(ggb1.instance.getValue("currentindex"));

  11  });
  12: buttonGroup1.on("click:3", () => {
  13: 	ggb1.instance.setValue("currentindex", 2);
  14  	console.log(ggb1.instance.getValue("currentindex"));

DIDwhiteboard • PKTK/PKM1TCL14 - I Can Count to 5.js:
   4  ggb1.instance.setValue("maxNumber", 5);
   5: buttonGroup1.on("click:1", () => {
   6: 	buttonGroup1.updateSingleButton({ disabled: false }, 2);
   7: 	ggb1.instance.evalCommand("RunClickScript(button1)");
   8  	if (ggb1.instance.getValue("click") == 5) {

  11  });
  12: buttonGroup1.on("click:2", () => {
  13: 	ggb1.instance.setValue("click", 0);
  14  	buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • PKTK/PKM1TFL25 - I Can Count to 10.js:
   3  ggb1.instance.setValue("click", 10);
   4: buttonGroup1.on("click:1", () => {
   5: 	ggb1.instance.evalCommand("RunClickScript(button1)");
   6  	buttonGroup1.updateSingleButton({ disabled: false }, 2);

  11  
  12: buttonGroup1.on("click:2", () => {
  13: 	ggb1.instance.setValue("click", 0);
  14  	buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • PKTK/PKM3TCL13 - Clothesline Math 1-10.js:
  37  
  38: buttonGroup1.on("click:1", () => {
  39: 	//moves cards to be used to visible space and sets them visible
  40: 	let randomCardSpots = shuffle(cardSpots);
  41: 	console.log(randomCardSpots);
  42: 	for (var i = 0; i < ggb1.instance.getValue("TotalCards"); i++) {
  43  		if (i < 4 && i>0) {

DIDwhiteboard • Print Alt/A1/M2/TA L1/slide3.js:
  24  
  25: buttonGroup1.on("click:1", () => {
  26:   showPoints(1, 6);
  27:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  28:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  29:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  30: });
  31: undefined
  32: function showPoints(start, end, vis = true) {
  33:   for (let i = start - 1, L = end; i < L; i++) {
  34:     ggb1.instance.setVisible(`Point${i + 1}`, vis);
  35    }

  37  
  38: /* buttonGroup1.on("click:2", () => {
  39:   ggb1.instance.evalCommand("RunClickScript(button2)");
  40  });
  41  
  42: buttonGroup1.on("click:3", () => {
  43:   ggb1.instance.evalCommand("RunClickScript(button1)");
  44  }); */

DIDwhiteboard • Print Alt/A1/M2/TA L1/slide4.js:
  22  
  23: buttonGroup1.on("click:1", () => {
  24:   showPoints(1, 24);
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  26: });
  27: undefined
  28: function showPoints(start, end, vis = true) {
  29:   for (let i = start - 1, L = end; i < L; i++) {
  30:     ggb1.instance.setVisible(`Point${i + 1}`, vis);
  31    }

DIDwhiteboard • Print Alt/A1/M2/TA L1/slide5.js:
  22  
  23: buttonGroup1.on("click:1", () => {
  24:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  25:   ggb1.instance.setAnimating("time", false);
  26    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/A1/M2/TA L4/slide5.js:
   87  });
   88: buttonGroup1.on("click:1", () => {
   89:   if (table1.data.rows.length > 0) {
   90:     buttonGroup1.updateSingleButton({ disabled: false }, 2);
   91:   }
   92:   table1.addRow();
   93:   table1.updateCell(table1.data.rows.length - 1, 0, {
   94:     editable: true,
   95:     math: true,
   96:   });
   97:   table1.updateCell(table1.data.rows.length - 1, 1, {
   98:     editable: true,
   99:     math: true,
  100:   });
  101:   console.log(table1.data.rows.length);
  102: });
  103: undefined
  104: buttonGroup1.on("click:2", () => {
  105:   ggb1.instance.deleteObject(`Point${table1.data.rows.length - 1}`);
  106  

DIDwhiteboard • Print Alt/A1/M2/TA L4/slide6.js:
  2  ggb1.instance.setErrorDialogsActive(false);
  3: buttonGroup1.on("click:1", () => {
  4:   ggb1.instance.setValue("points", true);
  5  });
  6: buttonGroup1.on("click:2", () => {
  7:   ggb1.instance.setValue("points", false);
  8  });

DIDwhiteboard • Print Alt/A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide5.js:
  18  
  19: buttonGroup1.on('click:1', () => {
  20:   ggb1.instance.setAnimating('time', true);
  21    ggb1.instance.startAnimation('time');

  35  
  36: buttonGroup1.on('click:2', () => {
  37:   ggb1.instance.setAnimating('time', false);
  38    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Print Alt/A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide6.js:
   78  
   79: buttonGroup1.on('click:1', () => {
   80:   buttonGroup1.updateSingleButton(
   81:     {
   82:       disabled: true,
   83:     },
   84:     1
   85:   );
   86:   buttonGroup1.updateSingleButton(
   87:     {
   88:       disabled: false,
   89:     },
   90:     2
   91:   );
   92:   ggb1.instance.setValue('counter', ggb1.instance.getValue('counter') + 1);
   93    if (

  103  
  104: buttonGroup1.on('click:2', () => {
  105:   let counterPlus = ggb1.instance.getValue('counter') + 1;
  106    buttonGroup1.updateSingleButton(

  207  
  208: buttonGroup1.on('click:3', () => {
  209:   text5.updateData({ text: '' });
  210:   ggb1.instance.setValue('counter', 1);
  211    ggb1.instance.setVisible('QuizPoint1', false);

DIDwhiteboard • Print Alt/A1/M2/TB L12 - Solution Sets of Systems of Linear Inequalities/slide8.js:
   95  
   96: buttonGroup1.on('click:1', () => {
   97:   buttonGroup1.updateSingleButton(
   98:     {
   99:       disabled: true,
  100:     },
  101:     1
  102:   );
  103: undefined
  104:   finalAnswer1 = formatInput(input1.data.text);
  105:   finalAnswer2 = formatInput(input2.data.text);
  106: undefined
  107:   convertedEquation1 = convertToEquation(finalAnswer1);
  108:   convertedEquation2 = convertToEquation(finalAnswer2);
  109: undefined
  110:   let includesInequality1 =
  111:     finalAnswer1.includes('>') || finalAnswer1.includes('<');
  112:   let includesInequality2 =
  113:     finalAnswer2.includes('>') || finalAnswer2.includes('<');
  114: undefined
  115:   ggb1.instance.evalCommand(`equationTest1: ${convertedEquation1}`);
  116    ggb1.instance.evalCommand(`equationTest2: ${convertedEquation2}`);

DIDwhiteboard • Print Alt/A1/M2/TC L15/slide3:
   33  
   34: buttonGroup1.on("click:1", () => {
   35:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
   36:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
   37:   ggb1.instance.setAnimating("time", false);
   38    ggb1.instance.setValue("time", 0);

   98  
   99: buttonGroup1.on("click:2", () => {
  100:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  101:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  102:   ggb1.instance.setVisible("picAlabama", true);
  103    ggb1.instance.setVisible("picArizona", true);

DIDwhiteboard • Print Alt/A1/M2/TC L15/slide5.js:
  27  
  28: buttonGroup1.on("click:1", () => {
  29:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  30:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  31:   ggb1.updateData({ visible: true });
  32    ggb2.updateData({ visible: false });

  34  
  35: buttonGroup1.on("click:2", () => {
  36:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  37:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  38:   ggb1.updateData({ visible: false });
  39    ggb2.updateData({ visible: true });

DIDwhiteboard • Print Alt/A1/M2/TC L15/slide6.js:
  27  
  28: buttonGroup1.on("click:1", () => {
  29:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  30:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  31:   ggb1.updateData({ visible: true });
  32    ggb2.updateData({ visible: false });

  34  
  35: buttonGroup1.on("click:2", () => {
  36:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  37:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  38:   ggb1.updateData({ visible: false });
  39    ggb2.updateData({ visible: true });

DIDwhiteboard • Print Alt/A1/M2/TC L15/slide7.js:
  31  
  32: buttonGroup1.on("click:1", () => {
  33:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  34:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  35:   updateSingleButtonGroup(3, { disabled: false }, buttonGroup1);
  36:   ggb1.updateData({ visible: true });
  37    ggb2.updateData({ visible: false });

  40  
  41: buttonGroup1.on("click:2", () => {
  42:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  43:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  44:   updateSingleButtonGroup(3, { disabled: false }, buttonGroup1);
  45:   ggb1.updateData({ visible: false });
  46    ggb2.updateData({ visible: true });

  49  
  50: buttonGroup1.on("click:3", () => {
  51:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  52:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  53:   updateSingleButtonGroup(3, { disabled: true }, buttonGroup1);
  54:   ggb1.updateData({ visible: false });
  55    ggb2.updateData({ visible: false });

DIDwhiteboard • Print Alt/A1/M2/TC L15/slide8.js:
  27  
  28: buttonGroup1.on("click:1", () => {
  29:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  30:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  31:   ggb1.updateData({ visible: true });
  32    ggb2.updateData({ visible: false });

  34  
  35: buttonGroup1.on("click:2", () => {
  36:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  37:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  38:   ggb1.updateData({ visible: false });
  39    ggb2.updateData({ visible: true });

DIDwhiteboard • Print Alt/A1/M2/TC L17 - Modeling Relationships with a Line/slide3.js:
  15  
  16: buttonGroup1.on('click:1', () => {
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  19:   ggb1.instance.setValue('showPoints', false);
  20  });
  21  
  22: buttonGroup1.on('click:2', () => {
  23:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  24:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  25:   ggb1.instance.setValue('showPoints', true);
  26  });

DIDwhiteboard • Print Alt/A1/M2/TC L17 - Modeling Relationships with a Line/slide4.js:
   28  
   29: buttonGroup1.on('click:1', () => {
   30:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   31:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   32:   let points;
   33:   if (ggb1.data.storedPoints) {
   34      points = [...ggb1.data.storedPoints];

   57  
   58: buttonGroup1.on('click:2', () => {
   59:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
   60:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
   61:   let points;
   62:   if (ggb1.data.storedPoints) {
   63      points = [...ggb1.data.storedPoints];

   86  
   87: buttonGroup1.on('click:3', () => {
   88:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
   89:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
   90:   let points;
   91:   if (ggb1.data.storedPoints) {
   92      points = [...ggb1.data.storedPoints];

  113  
  114: buttonGroup1.on('click:4', () => {
  115:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  116:   buttonGroup1.updateSingleButton({ disabled: false }, 5);
  117:   for (let i = 0, J = segArray.length; i < J; i++) {
  118:     ggb1.instance.setVisible(segArray[i], true);
  119    }

  124  
  125: buttonGroup1.on('click:5', () => {
  126:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  127:   buttonGroup1.updateSingleButton({ disabled: true }, 5);
  128:   for (let i = 0, J = segArray.length; i < J; i++) {
  129:     ggb1.instance.deleteObject(segArray[i]);
  130    }

DIDwhiteboard • Print Alt/A1/M2/TC L17 - Modeling Relationships with a Line/slide5.js:
  52  
  53: buttonGroup1.on('click:1', () => {
  54:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  55:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  56:   ggb1.instance.setValue('show', false);
  57  });
  58  
  59: buttonGroup1.on('click:2', () => {
  60:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  61:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  62:   ggb1.instance.setValue('show', true);
  63    text2.updateData({ text: `` });

DIDwhiteboard • Print Alt/A1/M2/TC L17 - Modeling Relationships with a Line/slide7.js:
  25  
  26: buttonGroup1.on('click:1', () => {
  27:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  28:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  29:   ggb1.instance.setValue('show', false);
  30    ggb1.instance.setValue('showPoints', false);

  33  
  34: buttonGroup1.on('click:2', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   ggb1.instance.setValue('show', true);
  38    ggb1.instance.setValue('showPoints', true);

DIDwhiteboard • Print Alt/A1/M2/TC L20 - Interpreting Correlation/slide2.js:
  18  
  19: buttonGroup1.on('click:1', () => {
  20:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  21:   ggb1.instance.setValue('time', 30);
  22    ggb1.instance.setAnimating('time', true);

  25  
  26: buttonGroup1.on('click:2', () => {
  27:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  28:   ggb1.instance.setValue('time', 30);
  29    ggb1.instance.setAnimating('time', true);

DIDwhiteboard • Print Alt/A1/M3/TA L3 The Graph of a Function/slide10.js:
  22  
  23: buttonGroup1.on("click:1", () => {
  24:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  26:   ggb1.instance.setVisible("eq2", false);
  27    ggb1.instance.setVisible("eq3", false);

  36  
  37: buttonGroup1.on("click:2", () => {
  38:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  39:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  40:   ggb1.instance.setVisible("eq2", true);
  41    ggb1.instance.setVisible("eq3", true);

DIDwhiteboard • Print Alt/A1/M3/TA L3 The Graph of a Function/slide12.js:
  10  count = 0;
  11: buttonGroup1.on("click:1", () => {
  12:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  13:   count -= 1;
  14:   ggb1.instance.evalCommand("RunClickScript(button2)");
  15    if (count == -7) {

  19  
  20: buttonGroup1.on("click:2", () => {
  21:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  22:   count += 1;
  23:   ggb1.instance.evalCommand("RunClickScript(button3)");
  24    if (count == 12) {

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide2.js:
   4  
   5: buttonGroup1.on("click:1", () => {
   6:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   7:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   8:   ggb1.instance.setAnimating("time", true);
   9    ggb1.instance.startAnimation();

  11  
  12: buttonGroup1.on("click:2", () => {
  13:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  14:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  15:   ggb1.instance.stopAnimation();
  16  });
  17  
  18: buttonGroup1.on("click:3", () => {
  19:   ggb1.instance.stopAnimation();
  20    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide3.js:
  125  
  126: buttonGroup1.on("click:1", () => {
  127:   ggb2.instance.evalCommand("SelectObjects()");
  128    if (ggb2.instance.getValue("scrub") == 1) {

  140  
  141: buttonGroup1.on("click:2", () => {
  142:   ggb2.instance.evalCommand("SelectObjects()");
  143    buttonGroup1.updateSingleButton({ disabled: true }, 2);

  148  
  149: buttonGroup1.on("click:3", () => {
  150:   ggb2.instance.evalCommand("SelectObjects()");
  151    ggb2.instance.stopAnimation();

  157  
  158: buttonGroup1.on("click:4", () => {
  159:   ggb2.instance.evalCommand("SelectObjects()");
  160    if (ggb2.instance.getValue("scrub") == 1) {

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide4.js:
  108  
  109: buttonGroup1.on("click:1", () => {
  110:   ggb2.instance.evalCommand("SelectObjects()");
  111    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  120  
  121: buttonGroup1.on("click:2", () => {
  122:   ggb2.instance.evalCommand("SelectObjects()");
  123    buttonGroup1.updateSingleButton({ disabled: true }, 2);

  128  
  129: buttonGroup1.on("click:3", () => {
  130:   ggb2.instance.evalCommand("SelectObjects()");
  131    ggb2.instance.stopAnimation();

  137  
  138: buttonGroup1.on("click:4", () => {
  139:   ggb2.instance.evalCommand("SelectObjects()");
  140    if (ggb2.instance.getValue("scrub") == 1) {

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide6.js:
  39  
  40: buttonGroup1.on("click:1", () => {
  41:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  42:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  43:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  44:   ggb2.instance.setAnimating("Scrubber", true);
  45    ggb2.instance.startAnimation();

  50  
  51: buttonGroup1.on("click:2", () => {
  52:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  53:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  54:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  55:   ggb2.instance.stopAnimation();
  56  });
  57  
  58: buttonGroup1.on("click:3", () => {
  59:   ggb2.instance.stopAnimation();
  60    ggb2.instance.setCoords("Scrubber", 0, -4);

  65  
  66: buttonGroup1.on("click:4", () => {
  67:   ggb2.instance.evalCommand("SelectObjects()");
  68    if (ggb2.instance.getValue("scrub") == 1) {

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide7.js:
  64  
  65: buttonGroup1.on("click:1", () => {
  66:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  67:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  68:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  69:   ggb2.instance.setAnimating("Scrubber", true);
  70    ggb2.instance.startAnimation();

  75  
  76: buttonGroup1.on("click:2", () => {
  77:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  78:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  79:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  80:   ggb2.instance.stopAnimation();
  81  });
  82  
  83: buttonGroup1.on("click:3", () => {
  84:   ggb2.instance.stopAnimation();
  85    ggb2.instance.setCoords("Scrubber", 0, -4);

  90  
  91: buttonGroup1.on("click:4", () => {
  92:   ggb2.instance.evalCommand("SelectObjects()");
  93    if (ggb2.instance.getValue("scrub") == 1) {

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide9.js:
  39  
  40: buttonGroup1.on("click:1", () => {
  41:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  42:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  43:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  44:   ggb2.instance.setAnimating("Scrubber", true);
  45    ggb2.instance.startAnimation();

  50  
  51: buttonGroup1.on("click:2", () => {
  52:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  53:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  54:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  55:   ggb2.instance.stopAnimation();
  56  });
  57  
  58: buttonGroup1.on("click:3", () => {
  59:   ggb2.instance.stopAnimation();
  60    ggb2.instance.setCoords("Scrubber", 0, -4);

  65  
  66: buttonGroup1.on("click:4", () => {
  67:   ggb2.instance.evalCommand("SelectObjects()");
  68    if (ggb2.instance.getValue("scrub") == 1) {

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide10.js:
  64  
  65: buttonGroup1.on("click:1", () => {
  66:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  67:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  68:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  69:   ggb2.instance.setAnimating("Scrubber", true);
  70    ggb2.instance.startAnimation();

  75  
  76: buttonGroup1.on("click:2", () => {
  77:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  78:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  79:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  80:   ggb2.instance.stopAnimation();
  81  });
  82  
  83: buttonGroup1.on("click:3", () => {
  84:   ggb2.instance.stopAnimation();
  85    ggb2.instance.setCoords("Scrubber", 0, -4);

  90  
  91: buttonGroup1.on("click:4", () => {
  92:   ggb2.instance.evalCommand("SelectObjects()");
  93    if (ggb2.instance.getValue("scrub") == 1) {

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide12.js:
  186  
  187: buttonGroup1.on("click:1", () => {
  188:   ggb2.instance.evalCommand("SelectObjects()");
  189    if (ggb2.instance.getValue("scrub") == 1) {

  201  
  202: buttonGroup1.on("click:2", () => {
  203:   ggb2.instance.evalCommand("SelectObjects()");
  204    buttonGroup1.updateSingleButton({ disabled: true }, 2);

  209  
  210: buttonGroup1.on("click:3", () => {
  211:   ggb2.instance.evalCommand("SelectObjects()");
  212    ggb2.instance.stopAnimation();

  218  
  219: buttonGroup1.on("click:4", () => {
  220:   ggb2.instance.evalCommand("SelectObjects()");
  221    if (ggb2.instance.getValue("scrub") == 1) {

DIDwhiteboard • Print Alt/A1/M3/TB L07 - Exploring Key Features of a Function and Its Graph/slide13.js:
  186  
  187: buttonGroup1.on("click:1", () => {
  188:   ggb2.instance.evalCommand("SelectObjects()");
  189    if (ggb2.instance.getValue("scrub") == 1) {

  201  
  202: buttonGroup1.on("click:2", () => {
  203:   ggb2.instance.evalCommand("SelectObjects()");
  204    buttonGroup1.updateSingleButton({ disabled: true }, 2);

  209  
  210: buttonGroup1.on("click:3", () => {
  211:   ggb2.instance.evalCommand("SelectObjects()");
  212    ggb2.instance.stopAnimation();

  218  
  219: buttonGroup1.on("click:4", () => {
  220:   ggb2.instance.evalCommand("SelectObjects()");
  221    if (ggb2.instance.getValue("scrub") == 1) {

DIDwhiteboard • Print Alt/A1/M3/TC l13 Modeling Elevation as a Function of Time/slide3.js:
   5  
   6: buttonGroup1.on("click:1", () => {
   7:   let allPenstrokes = ggb1.instance.getAllObjectNames("penstroke");
   8    // console.log(allPenstrokes)

  13  
  14: buttonGroup1.on("click:2", () => {
  15:   let allPenstrokes = ggb1.instance.getAllObjectNames("penstroke");
  16    console.log(allPenstrokes);

DIDwhiteboard • Print Alt/A1/M3/TC l13 Modeling Elevation as a Function of Time/slide5.js:
   5  
   6: buttonGroup1.on("click:1", () => {
   7:   let allPenstrokes = ggb1.instance.getAllObjectNames("penstroke");
   8    // console.log(allPenstrokes);

  13  
  14: buttonGroup1.on("click:2", () => {
  15:   let allPenstrokes = ggb1.instance.getAllObjectNames("penstroke");
  16    // console.log(allPenstrokes);

DIDwhiteboard • Print Alt/A1/M3/TC l13 Modeling Elevation as a Function of Time/slide7.js:
   5  
   6: buttonGroup1.on("click:1", () => {
   7:   let allPenstrokes = ggb1.instance.getAllObjectNames("penstroke");
   8    // console.log(allPenstrokes);

  13  
  14: buttonGroup1.on("click:2", () => {
  15:   let allPenstrokes = ggb1.instance.getAllObjectNames("penstroke");
  16    // console.log(allPenstrokes);

DIDwhiteboard • Print Alt/A1/M3/TC l13 Modeling Elevation as a Function of Time/slide8.js:
   5  
   6: buttonGroup1.on("click:1", () => {
   7:   let allPenstrokes = ggb1.instance.getAllObjectNames("penstroke");
   8    // console.log(allPenstrokes);

  13  
  14: buttonGroup1.on("click:2", () => {
  15:   let allPenstrokes = ggb1.instance.getAllObjectNames("penstroke");
  16    // console.log(allPenstrokes);

DIDwhiteboard • Print Alt/A1/M3/TC l13 Modeling Elevation as a Function of Time/slide9.js:
   5  
   6: buttonGroup1.on("click:1", () => {
   7:   let allPenstrokes = ggb1.instance.getAllObjectNames("penstroke");
   8    // console.log(allPenstrokes);

  13  
  14: buttonGroup1.on("click:2", () => {
  15:   let allPenstrokes = ggb1.instance.getAllObjectNames("penstroke");
  16    // console.log(allPenstrokes);

DIDwhiteboard • Print Alt/A1/M3/TC l13 Modeling Elevation as a Function of Time/slide10.js:
  32  
  33: buttonGroup1.on("click:1", () => {
  34:   ggb1.instance.stopAnimation();
  35    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/A1/M3/TC l13 Modeling Elevation as a Function of Time/slide11.js:
  20  
  21: buttonGroup1.on("click:1", () => {
  22:   ggb1.instance.setValue("time", 0);
  23    ggb1.instance.setVisible("text1", true);

  36  
  37: buttonGroup1.on("click:2", () => {
  38:   ggb1.instance.setValue("time", 1);
  39    ggb1.instance.setVisible("text1", false);

DIDwhiteboard • Print Alt/A1/M3/TD l18 Exploring Transformations of the Graphs of Functions/const {text1, ggb1, ggb2, buttongroup1}=.js:
  149  
  150: buttongroup1.on("click:1", () => {
  151:   ggb1.instance.evalCommand("RunClickScript(button1)");
  152    ggb2.instance.evalCommand("RunClickScript(button1)");

  154  
  155: // buttongroup1.on('click:2', ()=>{
  156: // ggb1.instance.evalCommand("RunClickScript(button3)");
  157  // ggb2.instance.evalCommand("RunClickScript(button3)");

  160  
  161: // buttongroup1.on('click:3', ()=>{
  162: // ggb1.instance.evalCommand("RunClickScript(button4)");
  163  // ggb2.instance.evalCommand("RunClickScript(button4)");

  165  // });
  166: // buttongroup1.on('click:4', ()=>{
  167: // ggb1.instance.evalCommand("RunClickScript(button2)");
  168  // ggb2.instance.evalCommand("RunClickScript(button2)");

DIDwhiteboard • Print Alt/A1/M4/TA L3-Analyzing Functions that Model Projectile Motion/slide2.js:
  393  
  394: buttonGroup1.on("click:1", () => {
  395:   launchInit();
  396:   launchScreenSetup();
  397: });
  398: undefined
  399: buttonGroup1.on("click:2", () => {
  400:   ggbReset();
  401  });

DIDwhiteboard • Print Alt/A1/M4/TA L3-Analyzing Functions that Model Projectile Motion/slide3.js:
  439  
  440: buttonGroup1.on("click:1", () => {
  441:   launchInit();
  442:   launchScreenSetup();
  443: });
  444: undefined
  445: buttonGroup1.on("click:2", () => {
  446:   ggbReset();
  447  });
  448  
  449: buttonGroup1.on("click:3", () => {
  450:   saveLaunch();
  451: });
  452: undefined
  453: buttonGroup1.on("click:4", () => {
  454:   fullReset();
  455: });
  456: undefined
  457: if (buttonGroup2.data.buttons[0].disabled) {
  458:   buttonGroup2.updateSingleButton(
  459:     {
  460:       disabled: false,
  461:     },
  462:     2
  463:   );
  464: }
  465: undefined
  466: ggb2.instance.registerObjectUpdateListener("timeZoom", timeZoomWatcher2);
  467  ggb2.instance.registerObjectUpdateListener("time", timeWatcher2);

  812  
  813: buttonGroup2.on("click:1", () => {
  814:   launchInit2();
  815:   launchScreenSetup2();
  816: });
  817: undefined
  818: buttonGroup2.on("click:2", () => {
  819:   ggbReset2();
  820  });

DIDwhiteboard • Print Alt/A1/M4/TA L3-Analyzing Functions that Model Projectile Motion/slide4.js:
  400  
  401: buttonGroup1.on("click:1", () => {
  402:   launchInit();
  403:   launchScreenSetup();
  404: });
  405: undefined
  406: buttonGroup1.on("click:2", () => {
  407:   ggbReset();
  408  });

DIDwhiteboard • Print Alt/A1/M4/TB L11- Graphing Quadreatic Functions from Factored Form/slide3.js:
   83  
   84: buttonGroup1.on("click:1", () => {
   85:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
   86:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
   87:   ggb1.instance.evalCommand("SelectObjects()");
   88    ggb1.instance.setValue("show", true);

  102  
  103: buttonGroup1.on("click:2", () => {
  104:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  105:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  106:   ggb1.instance.setValue("show", false);
  107    ggb1.instance.setVisible("slide16a", false);

DIDwhiteboard • Print Alt/A1/M4/TB L11- Graphing Quadreatic Functions from Factored Form/slide4.js:
   83  
   84: buttonGroup1.on("click:1", () => {
   85:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
   86:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
   87:   ggb1.instance.setVisible("slide17c", true);
   88    ggb1.instance.evalCommand("SelectObjects()");

  125  
  126: buttonGroup1.on("click:2", () => {
  127:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  128:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  129:   ggb1.instance.setValue("show", false);
  130    ggb1.instance.setVisible("slide17a", false);

DIDwhiteboard • Print Alt/A1/M4/TB L11- Graphing Quadreatic Functions from Factored Form/slide5.js:
   83  
   84: buttonGroup1.on("click:1", () => {
   85:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
   86:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
   87:   ggb1.instance.setVisible("slide18b", true);
   88    ggb1.instance.evalCommand("SelectObjects()");

  101  
  102: buttonGroup1.on("click:2", () => {
  103:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  104:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  105:   ggb1.instance.setValue("show", false);
  106    ggb1.instance.setVisible("slide18a", false);

DIDwhiteboard • Print Alt/A1/M4/TB L11- Graphing Quadreatic Functions from Factored Form/slide6.js:
   83  
   84: buttonGroup1.on("click:1", () => {
   85:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
   86:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
   87:   ggb1.instance.setVisible("slide19a", true);
   88    ggb1.instance.evalCommand("SelectObjects()");

  101  
  102: buttonGroup1.on("click:2", () => {
  103:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  104:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  105:   ggb1.instance.setValue("show", false);
  106    ggb1.instance.setVisible("slide19a", false);

DIDwhiteboard • Print Alt/A1/M4/TD L23 Creating Equations of Quadratic Functions to Model Contexts/slide2.js:
  30  
  31: buttonGroup1.on("click:1", () => {
  32:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  33:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  34:   ggb1.instance.setAnimating("time", false);
  35    ggb1.instance.setValue("time", 0.1);

  39  
  40: buttonGroup1.on("click:2", () => {
  41:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  42:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  43:   ggb1.instance.stopAnimation();
  44    ggb1.instance.setAnimating("time", false);

DIDwhiteboard • Print Alt/A1/M4/TD L23 Creating Equations of Quadratic Functions to Model Contexts/slide5.js:
  65  
  66: buttonGroup1.on("click:1", () => {
  67:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  68:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  69:   ggb2.updateData({ visible: true });
  70    ggb2.instance.setAnimating("time", false);

  75  
  76: buttonGroup1.on("click:2", () => {
  77:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  78:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  79:   ggb2.instance.stopAnimation();
  80    ggb2.instance.setAnimating("time", false);

DIDwhiteboard • Print Alt/A1/M5/TB L08 - Exponential Functions/slide3.js:
  27  
  28: buttonGroup1.on('click:1', () => {
  29:   ggb1.instance.evalCommand('RunClickScript(dec)');
  30    displayVals();

  32  
  33: buttonGroup1.on('click:2', () => {
  34:   ggb1.instance.evalCommand('RunClickScript(inc)');
  35    displayVals();

DIDwhiteboard • Print Alt/A1/M5/TB L08 - Exponential Functions/slide5.js:
  22  
  23: buttonGroup1.on('click:1', () => {
  24:   ggb1.instance.evalCommand('RunClickScript(dec)');
  25    displayVals();

  27  
  28: buttonGroup1.on('click:2', () => {
  29:   ggb1.instance.evalCommand('RunClickScript(inc)');
  30    displayVals();

DIDwhiteboard • Print Alt/A1/M5/TB L08 - Exponential Functions/slide7.js:
  114  
  115: buttonGroup1.on('click:1', () => {
  116:   //
  117:   buttonGroup1.updateSingleButton(
  118:     {
  119:       disabled:
  120:         table1.getCell(3, 1).value == '' ||
  121:         (table1.getCell(3, 2).value != '' &&
  122:           table1.getCell(3, 1).value == ggb1.instance.getValue('stateVal')),
  123      },

  130  
  131: buttonGroup1.on('click:2', () => {
  132:   //
  133:   buttonGroup1.updateSingleButton(
  134:     {
  135:       disabled:
  136:         table1.getCell(4, 1).value == '' ||
  137:         (table1.getCell(4, 2).value != '' &&
  138:           table1.getCell(4, 1).value == ggb1.instance.getValue('unitedVal')),
  139      },

  146  
  147: buttonGroup1.on('click:3', () => {
  148:   //
  149:   buttonGroup1.updateSingleButton(
  150:     {
  151:       disabled:
  152:         table1.getCell(5, 1).value == '' ||
  153:         (table1.getCell(5, 2).value != '' &&
  154:           table1.getCell(5, 1).value == ggb1.instance.getValue('worldVal')),
  155      },

DIDwhiteboard • Print Alt/A1/M5/TB L08 - Exponential Functions/slide8.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   ggb1.instance.evalCommand('RunClickScript(dec)');
  12    // let gen = ggb1.instance.getValue("gen");

  26  
  27: buttonGroup1.on('click:2', () => {
  28:   let oldRows = [...table1.data.rows];
  29:   ggb1.instance.evalCommand('RunClickScript(inc)');
  30    // let gen = ggb1.instance.getValue("gen");

DIDwhiteboard • Print Alt/A1/M5/TB L08 - Exponential Functions/slide9.js:
  14  
  15: buttonGroup1.on('click:1', () => {
  16:   ggb1.instance.evalCommand('RunClickScript(dec)');
  17    // let gen = ggb1.instance.getValue("gen");

  36  
  37: buttonGroup1.on('click:2', () => {
  38:   let oldRows = [...table1.data.rows];
  39:   ggb1.instance.evalCommand('RunClickScript(inc)');
  40    // let gen = ggb1.instance.getValue("gen");

DIDwhiteboard • Print Alt/A1/M5/TB L08 - Exponential Functions/slide10.js:
  10  
  11: buttonGroup1.on('click:1', () => {
  12:   ggb1.instance.stopAnimation();
  13    ggb1.instance.setValue('time', 0);

  20  
  21: buttonGroup1.on('click:2', () => {
  22:   ggb1.instance.stopAnimation();
  23    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Print Alt/A1/M5/TC L16 - Exponential Growth/Slide 2.js:
  72  
  73: buttonGroup1.on("click:1", () => {
  74:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  75:   more();
  76:   ggb2.instance.evalCommand("RunClickScript(inc)");
  77    if (ggb2.instance.getValue("gen") > 9) {

  82  
  83: buttonGroup1.on("click:2", () => {
  84:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  85:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  86:   button1.updateData({ disabled: true });
  87:   let allPoints = ggb1.instance.getAllObjectNames("point");
  88    let madePoints = allPoints.filter(

DIDwhiteboard • Print Alt/A1/M6/TA L01- Analyzing Paint Splatters/dummy slide 7.js:
  439  
  440: buttonGroup1.on("click:1", () => {
  441:   launchInit();
  442:   launchScreenSetup();
  443: });
  444: undefined
  445: buttonGroup1.on("click:2", () => {
  446:   ggbReset();
  447  });
  448  
  449: buttonGroup1.on("click:3", () => {
  450:   saveLaunch();
  451: });
  452: undefined
  453: buttonGroup1.on("click:4", () => {
  454:   fullReset();
  455: });
  456: undefined
  457: if (buttonGroup2.data.buttons[0].disabled) {
  458:   buttonGroup2.updateSingleButton(
  459:     {
  460:       disabled: false,
  461:     },
  462:     2
  463:   );
  464: }
  465: undefined
  466: ggb2.instance.registerObjectUpdateListener("timeZoom", timeZoomWatcher2);
  467  ggb2.instance.registerObjectUpdateListener("time", timeWatcher2);

  812  
  813: buttonGroup2.on("click:1", () => {
  814:   launchInit2();
  815:   launchScreenSetup2();
  816: });
  817: undefined
  818: buttonGroup2.on("click:2", () => {
  819:   ggbReset2();
  820  });

DIDwhiteboard • Print Alt/A1/M6/TA L01- Analyzing Paint Splatters/slide5.js:
   52  
   53: buttonGroup1.on("click:1", () => {
   54:   ggb1.instance.setCoords(
   55      "T",

  102  
  103: buttonGroup1.on("click:2", () => {
  104:   ggb1.instance.setCoords(
  105      "T",

  151  });
  152: buttonGroup1.on("click:3", () => {
  153:   ggb1.instance.setCoords(
  154      "T",

  200  });
  201: buttonGroup1.on("click:4", () => {
  202:   ggb1.instance.setCoords(
  203      "T",

  249  });
  250: buttonGroup1.on("click:5", () => {
  251:   ggb1.instance.setCoords(
  252      "T",

  309  
  310: buttonGroup2.on("click:1", () => {
  311:   // count += 1;
  312:   ggb1.instance.setVisible("balloonDilation", false);
  313    ggb1.instance.setVisible("faucet'", false);

  407  
  408: buttonGroup2.on("click:2", () => {
  409:   ggb1.instance.evalCommand("RunClickScript(button1)");
  410    buttonGroup2.updateSingleButton({ disabled: true }, 2);

  429  
  430: buttonGroup2.on("click:3", () => {
  431:   ggb1.instance.evalCommand("RunClickScript(button1)");
  432    buttonGroup2.updateSingleButton({ disabled: false }, 2);

DIDwhiteboard • Print Alt/A1/M6/TA L01- Analyzing Paint Splatters/slide6.js:
  33  
  34: buttonGroup1.on('click:1', () => {
  35:   ggb1.instance.setVisible('shortenedLinear', true);
  36    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  47  
  48: buttonGroup1.on('click:2', () => {
  49:   ggb1.instance.setVisible('shortenedLinear', false);
  50    buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • Print Alt/A1/M6/TA L01- Analyzing Paint Splatters/slide7.js:
  66  
  67: buttonGroup1.on('click:1', () => {
  68:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  69:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  70:   ggb1.updateData({ visible: true });
  71    ggb2.updateData({ visible: false });

  73  
  74: buttonGroup1.on('click:2', () => {
  75:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  76:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  77:   ggb1.updateData({ visible: false });
  78    ggb2.updateData({ visible: true });

DIDwhiteboard • Print Alt/A1/M6/TA L01- Analyzing Paint Splatters/slide8.js:
  52  
  53: buttonGroup1.on('click:1', () => {
  54:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  55:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  56:   ggb1.instance.setVisible('shortenedQuadratic', true);
  57    ggb1.instance.setVisible('shortenedExponential', false);

  61  
  62: buttonGroup1.on('click:2', () => {
  63:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  64:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  65:   ggb1.instance.setVisible('shortenedQuadratic', false);
  66    ggb1.instance.setVisible('shortenedExponential', true);

DIDwhiteboard • Print Alt/G6/M1/TA L4/slide4.js:
   8  
   9: buttonGroup1.on("click:1", () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setAnimating("time", true);
  13    ggb1.instance.startAnimation();

  15  
  16: buttonGroup1.on("click:2", () => {
  17:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  18:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  19:   ggb1.instance.setAnimating("time", false);
  20    ggb1.instance.setAnimating("Number", false);

DIDwhiteboard • Print Alt/G6/M1/TA L4/slide6.js:
   8  
   9: buttonGroup1.on("click:1", () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setAnimating("time", true);
  13    ggb1.instance.startAnimation();

  15  
  16: buttonGroup1.on("click:2", () => {
  17:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  18:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  19:   ggb1.instance.setAnimating("time", false);
  20    ggb1.instance.setAnimating("Number", false);

DIDwhiteboard • Print Alt/G6/M1/TA L4/slide8.js:
   8  
   9: buttonGroup1.on("click:1", () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setAnimating("time", true);
  13    ggb1.instance.startAnimation();

  15  
  16: buttonGroup1.on("click:2", () => {
  17:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  18:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  19:   ggb1.instance.setAnimating("time", false);
  20    ggb1.instance.setAnimating("Number", false);

DIDwhiteboard • Print Alt/G6/M1/TA L4/slide9.js:
   8  
   9: buttonGroup1.on("click:1", () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setAnimating("time", true);
  13    ggb1.instance.startAnimation();

  15  
  16: buttonGroup1.on("click:2", () => {
  17:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  18:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  19:   ggb1.instance.setAnimating("time", false);
  20    ggb1.instance.setAnimating("Number", false);

DIDwhiteboard • Print Alt/G6/M1/TA L4/slide12.js:
  38  
  39: buttonGroup1.on("click:1", () => {
  40:   ggb1.instance.evalCommand("RunClickScript(button3)");
  41    if (ggb1.instance.getValue("numOfTiles") == 10) {

  48  
  49: buttonGroup1.on("click:2", () => {
  50:   ggb1.instance.evalCommand("RunClickScript(button1)");
  51    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  55  
  56: buttonGroup1.on("click:3", () => {
  57:   ggb1.instance.evalCommand("RunClickScript(button2)");
  58    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • Print Alt/G6/M1/TC l12/slide3.js:
  16  
  17: buttonGroup1.on("click:1", () => {
  18:   let blueNum = utils.math.evaluateLatex(table1.getCell(0, 1).value);
  19:   if (blueNum.value < 1 || blueNum.error || blueNum.value > 50) {
  20:     return;
  21:   }
  22:   let redNum = utils.math.evaluateLatex(table1.getCell(1, 1).value);
  23:   if (redNum.value < 1 || redNum.error || redNum.value > 50) {
  24:     return;
  25:   }
  26:   //table1.updateCell(1,2,{value:redNum.value});
  27:   ggb1.instance.setValue("redPart", redNum.value);
  28    ggb1.instance.setValue("bluePart", blueNum.value);

  35  
  36: buttonGroup1.on("click:2", () => {
  37:   let blueNum2 = utils.math.evaluateLatex(table1.getCell(0, 2).value);
  38:   if (blueNum2.value < 1 || blueNum2.error || blueNum2.value > 50) {
  39:     return;
  40:   }
  41:   let redNum2 = utils.math.evaluateLatex(table1.getCell(1, 2).value);
  42:   if (redNum2.value < 1 || redNum2.error || redNum2.value > 50) {
  43:     return;
  44:   }
  45:   ggb1.instance.setValue("bluePart2", blueNum2.value);
  46    ggb1.instance.setValue("redPart2", redNum2.value);

DIDwhiteboard • Print Alt/G6/M1/TC l12/slide4.js:
  16  
  17: buttonGroup1.on("click:1", () => {
  18:   let blueNum = utils.math.evaluateLatex(table1.getCell(0, 1).value);
  19:   if (blueNum.value < 1 || blueNum.error || blueNum.value > 50) {
  20:     return;
  21:   }
  22:   let redNum = utils.math.evaluateLatex(table1.getCell(1, 1).value);
  23:   if (redNum.value < 1 || redNum.error || redNum.value > 50) {
  24:     return;
  25:   }
  26:   table1.updateCell(1, 2, { value: redNum.value });
  27:   ggb1.instance.setValue("redPart", redNum.value);
  28    ggb1.instance.setValue("bluePart", blueNum.value);

  35  
  36: buttonGroup1.on("click:2", () => {
  37:   let blueNum2 = utils.math.evaluateLatex(table1.getCell(0, 2).value);
  38:   if (blueNum2.value < 1 || blueNum2.error || blueNum2.value > 50) {
  39:     return;
  40:   }
  41:   let redNum = utils.math.evaluateLatex(table1.getCell(1, 1).value);
  42:   if (redNum.value < 1 || redNum.error || redNum.value > 50) {
  43:     return;
  44:   }
  45:   ggb1.instance.setValue("bluePart2", blueNum2.value);
  46    ggb1.instance.setValue("redPart2", redNum.value);

DIDwhiteboard • Print Alt/G6/M1/TD l18/slide2.js:
  36  
  37: buttonGroup1.on("click:1", () => {
  38:   if (ggb1.innerData["time"] == 0) {
  39      ggb1.instance.setAnimating("time", false);

  52  
  53: buttonGroup1.on("click:2", () => {
  54:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  55:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  56:   ggb1.instance.setAnimating("time", false);
  57    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/G6/M1/TD l18/slide3.js:
  37  
  38: buttonGroup1.on("click:1", () => {
  39:   if (ggb1.innerData["time"] == 0) {
  40      ggb1.instance.setAnimating("time", false);

  53  
  54: buttonGroup1.on("click:2", () => {
  55:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  56:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  57:   ggb1.instance.setAnimating("time", false);
  58    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/G6/M1/TD l18/slide5.js:
  56  
  57: buttonGroup1.on("click:1", () => {
  58:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  59:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  60:   ggb1.instance.setValue("Play", true);
  61    ggb1.instance.setAnimating("time1", false);

  66  
  67: buttonGroup1.on("click:2", () => {
  68:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  69:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  70:   ggb1.instance.setValue("Play", false);
  71    ggb1.instance.setAnimating("time1", false);

DIDwhiteboard • Print Alt/G6/M1/TD l18/slide6.js:
  14  
  15: buttonGroup1.on("click:1", () => {
  16:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  17:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  18:   ggb1.instance.setAnimating("time1", false);
  19    ggb1.instance.setValue("time1", 0);

  23  
  24: buttonGroup1.on("click:2", () => {
  25:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  26:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  27:   ggb1.instance.setAnimating("time1", false);
  28    ggb1.instance.setValue("time1", 0);

DIDwhiteboard • Print Alt/G6/M1/TD l18/slide7.js:
  16  
  17: buttonGroup1.on("click:1", () => {
  18:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  19:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  20:   ggb1.instance.setAnimating("time1", false);
  21    ggb1.instance.setValue("time1", 0);

  25  
  26: buttonGroup1.on("click:2", () => {
  27:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  28:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  29:   ggb1.instance.setAnimating("time1", false);
  30    ggb1.instance.setValue("time1", 0);

DIDwhiteboard • Print Alt/G6/M1/TE L22/slide7.js:
  23  
  24: buttonGroup1.on("click:1", () => {
  25:   ggb1.instance.evalCommand("RunClickScript(button1)");
  26    if (ggb1.instance.getValue("showOneTenth") == true) {

  37  
  38: buttonGroup1.on("click:2", () => {
  39:   ggb1.instance.evalCommand("RunClickScript(button2)");
  40    if (ggb1.instance.getValue("showOneFourth") == true) {

  51  
  52: buttonGroup1.on("click:3", () => {
  53:   ggb1.instance.evalCommand("RunClickScript(button3)");
  54    if (ggb1.instance.getValue("showThreeFifths") == true) {

  65  
  66: buttonGroup1.on("click:4", () => {
  67:   ggb1.instance.evalCommand("RunClickScript(button4)");
  68    if (ggb1.instance.getValue("showSevenTwentiths") == true) {

  79  
  80: buttonGroup1.on("click:5", () => {
  81:   ggb1.instance.evalCommand("RunClickScript(button5)");
  82    if (ggb1.instance.getValue("showSixTeenTwentyFifths") == true) {

  93  
  94: buttonGroup1.on("click:6", () => {
  95:   ggb1.instance.evalCommand("RunClickScript(buttonGrid)");
  96    if (ggb1.instance.getValue("gridLines") == true) {

DIDwhiteboard • Print Alt/G6/M2/TB L6/slide2.js:
  34  
  35: buttonGroup1.on("click:1", () => {
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  37:   setEmUp();
  38:   if (input1.data.text) {
  39:     let inputMath = utils.math.evaluateLatex(input1.data.text);
  40:     if (inputMath.value) {
  41:       let actualPours = Math.ceil(inputMath.value);
  42:       ggb1.updateInnerData({ numPours: actualPours });
  43        input1.updateData({ text: `${actualPours}` });

  49  
  50: buttonGroup1.on("click:2", () => {
  51:   setEmUp();
  52:   if (input1.data.text) {
  53:     buttonGroup1.updateSingleButton({ disabled: false }, 1);
  54:   }
  55: });
  56: undefined
  57: autorun(() => {
  58:   // transition from tipping to starting pour
  59:   if (ggb1.innerData["timeTip"] == 1) {
  60      ggb1.instance.stopAnimation();

DIDwhiteboard • Print Alt/G6/M2/TB L6/slide3.js:
  37  
  38: buttonGroup1.on("click:2", () => {
  39:   setEmUp();
  40:   if (input1.data.text) {
  41:     buttonGroup1.updateSingleButton({ disabled: false }, 1);
  42:   }
  43: });
  44: undefined
  45: buttonGroup1.on("click:1", () => {
  46:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  47:   setEmUp();
  48:   if (input1.data.text) {
  49:     let inputMath = utils.math.evaluateLatex(input1.data.text);
  50:     if (inputMath.value) {
  51:       let actualPours = Math.ceil(inputMath.value);
  52:       ggb1.updateInnerData({ numPours: actualPours });
  53        input1.updateData({ text: `${actualPours}` });

DIDwhiteboard • Print Alt/G6/M2/TB L6/slide4.js:
  44  
  45: buttonGroup1.on("click:2", () => {
  46:   setEmUp();
  47:   if (input1.data.text) {
  48:     buttonGroup1.updateSingleButton({ disabled: false }, 1);
  49:   }
  50: });
  51: undefined
  52: buttonGroup1.on("click:1", () => {
  53:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  54:   setEmUp();
  55:   if (input1.data.text) {
  56:     let inputMath = utils.math.evaluateLatex(input1.data.text);
  57:     if (inputMath.value) {
  58:       let actualPours = Math.ceil(inputMath.value);
  59:       ggb1.updateInnerData({ numPours: actualPours });
  60        input1.updateData({ text: `${actualPours}` });

DIDwhiteboard • Print Alt/G6/M2/TB L6/slide5.js:
  43  
  44: buttonGroup1.on("click:1", () => {
  45:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  46:   setEmUp();
  47:   ggb1.instance.setAnimating("timeTip", true);
  48    ggb1.instance.startAnimation();

DIDwhiteboard • Print Alt/G6/M2/TD L14/slide2.js:
   4  });
   5: buttonGroup1.on("click:1", () => {
   6:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   7:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   8:   ggb1.instance.setAnimating("time", true);
   9    ggb1.instance.startAnimation();

  11  
  12: buttonGroup1.on("click:2", () => {
  13:   ggb1.instance.setAnimating("time", false);
  14    buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • Print Alt/G6/M2/TD L14/slide3.js:
   4  });
   5: buttonGroup1.on("click:1", () => {
   6:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   7:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   8:   ggb1.instance.setAnimating("k", true);
   9    ggb1.instance.startAnimation();

  11  
  12: buttonGroup1.on("click:2", () => {
  13:   ggb1.instance.setAnimating("k", false);
  14    buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • Print Alt/G6/M2/TE L17/slide4.js:
   6  });
   7: buttonGroup1.on("click:1", () => {
   8:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   9:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  10:   table1.updateData({ visible: true });
  11:   ggb1.updateData({ visible: true });
  12    image1.updateData({ visible: false });

  14  
  15: buttonGroup1.on("click:2", () => {
  16:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  17:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  18:   table1.updateData({ visible: false });
  19:   image1.updateData({ visible: true });
  20:   ggb1.updateData({ visible: false });
  21  });

DIDwhiteboard • Print Alt/G6/M2/TE L17/slide5.js:
   17  });
   18: buttonGroup1.on("click:1", () => {
   19:   if (table1.data.rows.length < 7) {
   20:     table1.addRow();
   21:     buttonGroup1.updateSingleButton({ disabled: true }, 1);
   22:   }
   23: });
   24: undefined
   25: // let Number1;
   26: // let Number2;
   27: // let Number3;
   28: // let Number4;
   29: // let Number5;
   30: // let Number6;
   31: // let Number7;
   32: // let Number8;
   33: // let Number9;
   34: // let Number10;
   35: let cell00;
   36: let cell10;
   37: let cell20;
   38: let cell30;
   39: let cell40;
   40: let cell50;
   41: let cell60;
   42: let cell70;
   43: let cell80;
   44: let cell90;
   45: let cell01;
   46: let cell11;
   47: let cell21;
   48: let cell31;
   49: let cell41;
   50: let cell51;
   51: let cell61;
   52: let cell71;
   53: let cell81;
   54: let cell91;
   55: let cell02;
   56: let cell12;
   57: let cell22;
   58: let cell32;
   59: let cell42;
   60: let cell52;
   61: let cell62;
   62: let cell72;
   63: let cell82;
   64: let cell92;
   65: let cell03;
   66: let cell13;
   67: let cell23;
   68: let cell33;
   69: let cell43;
   70: let cell53;
   71: let cell63;
   72: let cell73;
   73: let cell83;
   74: let cell93;
   75: // let varArray = [
   76: //   Number1,
   77: //   Number2,
   78: //   Number3,
   79: //   Number4,
   80: //   Number5,
   81: //   Number6,
   82: //   Number7,
   83: //   Number8,
   84: //   Number9,
   85: //   Number10,
   86: // ];
   87: let coll0 = [
   88:   cell00,
   89:   cell10,
   90:   cell20,
   91:   cell30,
   92:   cell40,
   93:   cell50,
   94:   cell60,
   95:   cell70,
   96:   cell80,
   97:   cell90,
   98: ];
   99: let coll1 = [
  100:   cell01,
  101:   cell11,
  102:   cell20,
  103:   cell31,
  104:   cell41,
  105:   cell51,
  106:   cell61,
  107:   cell71,
  108:   cell81,
  109:   cell91,
  110: ];
  111: let coll2 = [
  112:   cell02,
  113:   cell12,
  114:   cell22,
  115:   cell32,
  116:   cell42,
  117:   cell52,
  118:   cell62,
  119:   cell72,
  120:   cell82,
  121:   cell92,
  122: ];
  123: let coll3 = [
  124:   cell03,
  125:   cell13,
  126:   cell23,
  127:   cell33,
  128:   cell43,
  129:   cell53,
  130:   cell63,
  131:   cell73,
  132:   cell83,
  133:   cell93,
  134: ];
  135: undefined
  136: autorun(() => {
  137:   const rowsContent = table1.data.rows;
  138:   // for (let i = 0; i < rowsContent.length; i++) {
  139:   //   varArray[i] = utils.math.evaluateLatex(table1.getCell(i, 4));
  140: undefined
  141:   //   console.log(varArray[i].value);
  142:   //   if(varArray[i].value < 0 ||varArray[i].error){
  143:   //   return;
  144:   // }
  145:   //   ggb1.instance.setValue("number" + (i + 1), varArray[i].value);
  146    //  // console.log(table1.getCell(i, 4, { value: rowsContent[i][4].value }));

  235  });
  236: buttonGroup1.on("click:2", () => {
  237:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  238:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  239:   if (
  240:     ggb1.innerData["answer1"] > 0 ||
  241      ggb1.innerData["answer2"] > 0 ||

  262  });
  263: buttonGroup1.on("click:3", () => {
  264:   for (let i = 0, L = table1.data.rows.length; i < L; i++) {
  265:     table1.deleteRow(L - i - 1);
  266:   }
  267:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  268:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  269:   ggb1.instance.setValue("count", -1);
  270    ggb1.instance.setValue("number1", 0);

DIDwhiteboard • Print Alt/G6/M2/TE L17/slide6.js:
   17  });
   18: buttonGroup1.on("click:1", () => {
   19:   table1.addRow();
   20:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   21: });
   22: undefined
   23: // let Number1;
   24: // let Number2;
   25: // let Number3;
   26: // let Number4;
   27: // let Number5;
   28: // let Number6;
   29: // let Number7;
   30: // let Number8;
   31: // let Number9;
   32: // let Number10;
   33: let cell00;
   34: let cell10;
   35: let cell20;
   36: let cell30;
   37: let cell40;
   38: let cell50;
   39: let cell60;
   40: let cell70;
   41: let cell80;
   42: let cell90;
   43: let cell01;
   44: let cell11;
   45: let cell21;
   46: let cell31;
   47: let cell41;
   48: let cell51;
   49: let cell61;
   50: let cell71;
   51: let cell81;
   52: let cell91;
   53: let cell02;
   54: let cell12;
   55: let cell22;
   56: let cell32;
   57: let cell42;
   58: let cell52;
   59: let cell62;
   60: let cell72;
   61: let cell82;
   62: let cell92;
   63: let cell03;
   64: let cell13;
   65: let cell23;
   66: let cell33;
   67: let cell43;
   68: let cell53;
   69: let cell63;
   70: let cell73;
   71: let cell83;
   72: let cell93;
   73: let cell04;
   74: let cell14;
   75: let cell24;
   76: let cell34;
   77: let cell44;
   78: let cell54;
   79: let cell64;
   80: let cell74;
   81: let cell84;
   82: let cell94;
   83: // let varArray = [
   84: //   Number1,
   85: //   Number2,
   86: //   Number3,
   87: //   Number4,
   88: //   Number5,
   89: //   Number6,
   90: //   Number7,
   91: //   Number8,
   92: //   Number9,
   93: //   Number10,
   94: // ];
   95: let coll0 = [
   96:   cell00,
   97:   cell10,
   98:   cell20,
   99:   cell30,
  100:   cell40,
  101:   cell50,
  102:   cell60,
  103:   cell70,
  104:   cell80,
  105:   cell90,
  106: ];
  107: let coll1 = [
  108:   cell01,
  109:   cell11,
  110:   cell20,
  111:   cell31,
  112:   cell41,
  113:   cell51,
  114:   cell61,
  115:   cell71,
  116:   cell81,
  117:   cell91,
  118: ];
  119: let coll2 = [
  120:   cell02,
  121:   cell12,
  122:   cell22,
  123:   cell32,
  124:   cell42,
  125:   cell52,
  126:   cell62,
  127:   cell72,
  128:   cell82,
  129:   cell92,
  130: ];
  131: let coll3 = [
  132:   cell03,
  133:   cell13,
  134:   cell23,
  135:   cell33,
  136:   cell43,
  137:   cell53,
  138:   cell63,
  139:   cell73,
  140:   cell83,
  141:   cell93,
  142: ];
  143: let coll4 = [
  144:   cell04,
  145:   cell14,
  146:   cell24,
  147:   cell34,
  148:   cell44,
  149:   cell54,
  150:   cell64,
  151:   cell74,
  152:   cell84,
  153:   cell94,
  154: ];
  155: autorun(() => {
  156:   const rowsContent = table1.data.rows;
  157:   // for (let i = 0; i < rowsContent.length; i++) {
  158:   //   varArray[i] = utils.math.evaluateLatex(table1.getCell(i, 4));
  159: undefined
  160:   //   console.log(varArray[i].value);
  161:   //   if(varArray[i].value < 0 ||varArray[i].error){
  162:   //   return;
  163:   // }
  164:   //   ggb1.instance.setValue("number" + (i + 1), varArray[i].value);
  165    //  // console.log(table1.getCell(i, 4, { value: rowsContent[i][4].value }));

  259  });
  260: buttonGroup1.on("click:2", () => {
  261:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  262:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  263:   if (
  264:     ggb1.innerData["answer1"] > 0 ||
  265      ggb1.innerData["answer2"] > 0 ||

  286  });
  287: buttonGroup1.on("click:3", () => {
  288:   for (let i = 0, L = table1.data.rows.length; i < L; i++) {
  289:     table1.deleteRow(L - i - 1);
  290:   }
  291:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  292:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  293:   ggb1.instance.setValue("count", -1);
  294    ggb1.instance.setValue("number1", 0);

DIDwhiteboard • Print Alt/G6/M2/TE L17/slide7.js:
  16  
  17: buttonGroup1.on("click:1", () => {
  18:   ggb1.instance.setValue("fraction", 5);
  19    ggb1.instance.evalCommand("RunClickScript(button1)");

  25  
  26: buttonGroup1.on("click:2", () => {
  27:   ggb1.instance.evalCommand("RunClickScript(button2)");
  28    buttonGroup1.updateSingleButton({ disabled: true }, 2);

  31  });
  32: buttonGroup1.on("click:3", () => {
  33:   ggb1.instance.evalCommand("RunClickScript(button3)");
  34    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • Print Alt/G6/M3/TA L2/slide7.js:
  32  
  33: buttonGroup1.on('click:1', () => {
  34:   //  let counter = ggb1.instance.getValue("counter");
  35    //  button2.updateData({text: `Next Number ($\\frac{${counter}}{10}$)`});

  81  
  82: buttonGroup1.on('click:2', () => {
  83:   ggb1.instance.setCoords('sliderYPoint', 0, 0, 0);
  84    ggb1.instance.setCoords('sliderXPoint', 0, 0, 0);

DIDwhiteboard • Print Alt/G6/M3/TA L2/slide8.js:
  30  
  31: buttonGroup1.on('click:1', () => {
  32:   //  let counter = ggb1.instance.getValue("counter");
  33    //  button2.updateData({text: `Next Number ($\\frac{${counter}}{10}$)`});

  81  
  82: buttonGroup1.on('click:2', () => {
  83:   ggb1.instance.setCoords('sliderYPoint', 0, 0, 0);
  84    ggb1.instance.setCoords('sliderXPoint', 0, 0, 0);

DIDwhiteboard • Print Alt/G6/M3/TB L7/slide2.js:
  31  
  32: buttonGroup1.on("click:1", () => {
  33:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  34:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  35:   ggb1.instance.setAnimating("time", false);
  36    ggb1.instance.setValue("time", 0);

  42  
  43: buttonGroup1.on("click:2", () => {
  44:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  45:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  46:   ggb1.instance.setAnimating("time", false);
  47    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/G6/M3/TB L7/slide3.js:
  32  
  33: buttonGroup1.on("click:1", () => {
  34:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  36:   ggb1.instance.setAnimating("time", false);
  37    ggb1.instance.setValue("time", 0);

  43  
  44: buttonGroup1.on("click:2", () => {
  45:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  46:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  47:   ggb1.instance.setAnimating("time", false);
  48    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/G6/M3/TB L7/slide4.js:
  32  
  33: buttonGroup1.on("click:1", () => {
  34:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  36:   ggb1.instance.setAnimating("time", false);
  37    ggb1.instance.setValue("time", 0);

  43  
  44: buttonGroup1.on("click:2", () => {
  45:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  46:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  47:   ggb1.instance.setAnimating("time", false);
  48    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/G6/M3/TC L12/slide5.js:
  10  
  11: buttonGroup1.on('click:1',()=>{
  12: ggb1.instance.setVisible("AIG'",true);
  13  buttonGroup1.updateSingleButton({ disabled: false}, 2);

  16  
  17: buttonGroup1.on('click:2',()=>{
  18: ggb1.instance.setVisible("AIG'",false);
  19  buttonGroup1.updateSingleButton({ disabled: false}, 1);

DIDwhiteboard • Print Alt/G6/M3/TC L12/slide6.js:
  10  
  11: buttonGroup1.on('click:1',()=>{
  12: ggb1.instance.setVisible("AIG'",true);
  13  buttonGroup1.updateSingleButton({ disabled: false}, 2);

  16  
  17: buttonGroup1.on('click:2',()=>{
  18: ggb1.instance.setVisible("AIG'",false);
  19  buttonGroup1.updateSingleButton({ disabled: false}, 1);

DIDwhiteboard • Print Alt/G6/M3/TC L12/slide7.js:
  10  
  11: buttonGroup1.on('click:1',()=>{
  12: ggb1.instance.setVisible("AIG'",true);
  13  buttonGroup1.updateSingleButton({ disabled: false}, 2);

  16  
  17: buttonGroup1.on('click:2',()=>{
  18: ggb1.instance.setVisible("AIG'",false);
  19  buttonGroup1.updateSingleButton({ disabled: false}, 1);

DIDwhiteboard • Print Alt/G6/M3/TC L12/slide8.js:
  10  
  11: buttonGroup1.on('click:1',()=>{
  12: ggb1.instance.setVisible("AIG''",true);
  13  buttonGroup1.updateSingleButton({ disabled: false}, 2);

  16  
  17: buttonGroup1.on('click:2',()=>{
  18: ggb1.instance.setVisible("AIG''",false);
  19  buttonGroup1.updateSingleButton({ disabled: false}, 1);

DIDwhiteboard • Print Alt/G6/M3/TD L15/slide3.js:
  17  
  18: buttonGroup1.on('click:1', () => {
  19: ggb1.instance.setValue("c",true);
  20  buttonGroup1.updateSingleButton({ disabled: true }, 1);

  23  
  24: buttonGroup1.on('click:2', () => {
  25: ggb1.instance.setValue("c",false);
  26  buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • Print Alt/G6/M3/TD L15/slide4.js:
  44  
  45: buttonGroup1.on('click:1', () => {
  46: ggb1.instance.setValue("c",true);
  47  buttonGroup1.updateSingleButton({ disabled: true }, 1);

  50  
  51: buttonGroup1.on('click:2', () => {
  52: ggb1.instance.setValue("c",false);
  53  buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • Print Alt/G6/M3/TD L15/slide7.js:
  38  
  39: buttonGroup1.on('click:1', () => {
  40: ggb1.instance.setValue("c",true);
  41  buttonGroup1.updateSingleButton({ disabled: true }, 1);

  44  
  45: buttonGroup1.on('click:2', () => {
  46: ggb1.instance.setValue("c",false);
  47  buttonGroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • Print Alt/G6/M4/TA L03 Exploring Exponents/slide1.js:
   6  buttongroup1.updateSingleButton({ disabled: true }, 2);
   7: buttongroup1.on("click:1", () => {
   8:   buttongroup1.updateSingleButton({ disabled: false }, 2);
   9:   ggb1.instance.evalCommand("RunClickScript(button1)");
  10    if (ggb1.instance.getValue("count") == 7) {

  18  
  19: buttongroup1.on("click:3", () => {
  20:   ggb1.instance.setValue("count", 1);
  21    buttongroup1.updateSingleButton({ disabled: false }, 1);

  25  
  26: buttongroup1.on("click:2", () => {
  27:   buttongroup1.updateSingleButton({ disabled: false }, 1);
  28:   if (ggb1.instance.getValue("count") == 2) {
  29      buttongroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • Print Alt/G6/M4/TA L03 Exploring Exponents/slide5.js:
   7  
   8: buttongroup1.on("click:1", () => {
   9:   buttongroup1.updateSingleButton({ disabled: false }, 2);
  10:   ggb1.instance.evalCommand("RunClickScript(button1)");
  11    if (ggb1.instance.getValue("count") == 4) {

  22  
  23: buttongroup1.on("click:3", () => {
  24:   ggb1.instance.setValue("count", 2);
  25    buttongroup1.updateSingleButton({ disabled: false }, 1);

  29  
  30: buttongroup1.on("click:2", () => {
  31:   buttongroup1.updateSingleButton({ disabled: false }, 1);
  32:   if (ggb1.instance.getValue("count") == 3) {
  33      buttongroup1.updateSingleButton({ disabled: true }, 2);

DIDwhiteboard • Print Alt/G6/M4/TA L03 Exploring Exponents/slide13.js:
   91  
   92: buttongroup1.on("click:1", () => {
   93:   ggb1.instance.evalCommand("RunClickScript(button1)");
   94    ggb2.instance.evalCommand("RunClickScript(button1)");

   98  
   99: buttongroup1.on("click:2", () => {
  100:   ggb1.instance.evalCommand("RunClickScript(button2)");
  101    ggb2.instance.evalCommand("RunClickScript(button2)");

DIDwhiteboard • Print Alt/G6/M4/TE L23 Graphs of Ratio Relationships/slide5.js:
  19  }
  20: buttonGroup1.on("click:1", () => {
  21:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  22:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  23:   table1.updateCell(0, 1, { value: "1\\cdot2.5" });
  24:   table1.updateCell(1, 1, { value: "2\\cdot2.5" });
  25:   table1.updateCell(2, 1, { value: "3\\cdot2.5" });
  26:   table1.updateCell(3, 1, { value: "4\\cdot2.5" });
  27:   table1.updateCell(4, 1, { value: "5\\cdot2.5" });
  28:   table1.updateCell(0, 2, { value: "2.5" });
  29:   table1.updateCell(1, 2, { value: "5" });
  30:   table1.updateCell(2, 2, { value: "7.5" });
  31:   table1.updateCell(3, 2, { value: "10" });
  32:   table1.updateCell(4, 2, { value: "10.5" });
  33: });
  34: undefined
  35: buttonGroup1.on("click:2", () => {
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  38:   table1.updateCell(0, 1, { value: "" });
  39:   table1.updateCell(1, 1, { value: "" });
  40:   table1.updateCell(2, 1, { value: "" });
  41:   table1.updateCell(3, 1, { value: "" });
  42:   table1.updateCell(4, 1, { value: "" });
  43:   table1.updateCell(0, 2, { value: "" });
  44:   table1.updateCell(1, 2, { value: "" });
  45:   table1.updateCell(2, 2, { value: "" });
  46:   table1.updateCell(3, 2, { value: "" });
  47:   table1.updateCell(4, 2, { value: "" });
  48: });
  49: /*autorun(() => {
  50: console.log(!/[abdefhijklmnopqrstuvwxyz]/.test(input1.data.text));
  51: if((!/[abdefhijklmnopqrstuvwxyz]/.test(input1.data.text))==true){
  52: button1.updateData({disabled: false});
  53: }else{
  54: button1.updateData({disabled: true});
  55: }
  56: });*/
  57: const blankBox = "";
  58: const textStem = `c=`;
  59: undefined
  60: autorun(() => {
  61:   if (input1.data.text != input1.data.last) {
  62:     button1.updateData({ disabled: !input1.data.text });
  63:     input1.updateData({ last: input1.data.text });
  64:   }
  65: });
  66: undefined
  67: button1.on("click", () => {
  68:   if (!/[bdehijklmnopqstuvwxyz]/.test(input1.data.text) == true) {
  69:     button1.updateData({ disabled: true });
  70:     const rawinput = input1.data.text;
  71:     const ggbready =
  72        "f:" + rawinput.replace(/\\/g, "\\").replace(/c/, "y").replace(/g/g, "x");

DIDwhiteboard • Print Alt/G6/M4/TE L23 Graphs of Ratio Relationships/slide9.js:
  27  let num;
  28: buttonGroup1.on("click:1", () => {
  29:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  30:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  31:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  32:   let num = "table";
  33:   ggb1.updateData({ visible: false });
  34    table1.updateData({ visible: true });

  50  });
  51: buttonGroup1.on("click:2", () => {
  52:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  53:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  54:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  55:   let num = "graph";
  56:   ggb1.instance.setVisible("pic3", false);
  57    ggb1.instance.setVisible("Point1", true);

  71  
  72: buttonGroup1.on("click:3", () => {
  73:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  74:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  75:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  76:   let num = "equation";
  77:   ggb1.updateData({ visible: true });
  78    table1.updateData({ visible: false });

DIDwhiteboard • Print Alt/G6/M5/TA L01- The Area os a Parallelogram/slide5.js:
  16  
  17: buttonGroup1.on("click:1", () => {
  18:   ggb1.instance.setVisible("q3'", true);
  19    ggb1.instance.setVisible("q4", true);

  29  
  30: buttonGroup1.on("click:2", () => {
  31:   ggb1.instance.setValue("Slide", 0);
  32    ggb1.instance.setVisible("F", true);

DIDwhiteboard • Print Alt/G6/M5/TA L01- The Area os a Parallelogram/slide6.js:
  16  
  17: buttonGroup1.on("click:1", () => {
  18:   ggb1.instance.setVisible("q3'", true);
  19    ggb1.instance.setVisible("q4", true);

  29  
  30: buttonGroup1.on("click:2", () => {
  31:   ggb1.instance.setValue("Slide", 0);
  32    ggb1.instance.setVisible("F", true);

DIDwhiteboard • Print Alt/G6/M5/TA L01- The Area os a Parallelogram/slide8.js:
  23  
  24: buttonGroup1.on('click:1', () => {
  25:   count += 1;
  26:   ggb1.instance.setVisible("q3'", true);
  27    ggb1.instance.setVisible('show2', true);

  55  
  56: buttonGroup1.on('click:2', () => {
  57:   count = 0;
  58:   ggb1.instance.setValue('Slide', 0);
  59    ggb1.instance.setVisible("q3'", false);

DIDwhiteboard • Print Alt/G6/M5/TA L01- The Area os a Parallelogram/slide9.js:
   8  
   9: buttonGroup1.on("click:1", () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.evalCommand("RunClickScript(button1)");
  13    ggb1.instance.setVisible("eq1", false);

  16  
  17: buttonGroup1.on("click:2", () => {
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  19:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  20:   ggb1.instance.evalCommand("RunClickScript(button2)");
  21    ggb1.instance.setVisible("eq1", true);

DIDwhiteboard • Print Alt/G6/M5/TC 09-Properties of Solids/slide4.js:
  37  
  38: buttonGroup1.on("click:1", () => {
  39:   table1.updateCell(0, 1, {
  40:     value: "6",
  41:   });
  42:   table1.updateCell(0, 2, {
  43:     value: "9",
  44:   });
  45:   table1.updateCell(0, 3, {
  46:     value: "5",
  47:   });
  48:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  49:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  50: });
  51: undefined
  52: buttonGroup1.on("click:2", () => {
  53:   table1.updateCell(0, 1, {
  54:     value: "",
  55:   });
  56:   table1.updateCell(0, 2, {
  57:     value: "",
  58:   });
  59:   table1.updateCell(0, 3, {
  60:     value: "",
  61:   });
  62:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  63:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  64: });
  65: undefined
  66: button2.on("click", () => {
  67:   ggb1.instance.reset();
  68    ggb2.instance.setValue("number", 0);

DIDwhiteboard • Print Alt/G6/M5/TC 09-Properties of Solids/slide5.js:
   90  
   91: buttonGroup1.on("click:1", () => {
   92:   table1.updateCell(1, 1, {
   93:     value: "8",
   94:   });
   95:   table1.updateCell(1, 2, {
   96:     value: "12",
   97:   });
   98:   table1.updateCell(1, 3, {
   99:     value: "6",
  100:   });
  101:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  102:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  103: });
  104: undefined
  105: buttonGroup1.on("click:2", () => {
  106:   table1.updateCell(1, 1, {
  107:     value: "",
  108:   });
  109:   table1.updateCell(1, 2, {
  110:     value: "",
  111:   });
  112:   table1.updateCell(1, 3, {
  113:     value: "",
  114:   });
  115:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  116:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  117: });
  118: undefined
  119: button2.on("click", () => {
  120:   ggb1.instance.reset();
  121    ggb2.instance.setValue("number", 0);

DIDwhiteboard • Print Alt/G6/M5/TC 09-Properties of Solids/slide6.js:
  27  
  28: buttonGroup1.on("click:1", () => {
  29:   table1.updateCell(2, 1, {
  30:     value: "10",
  31:   });
  32:   table1.updateCell(2, 2, {
  33:     value: "15",
  34:   });
  35:   table1.updateCell(2, 3, {
  36:     value: "7",
  37:   });
  38:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  39:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  40: });
  41: undefined
  42: buttonGroup1.on("click:2", () => {
  43:   table1.updateCell(2, 1, {
  44:     value: "",
  45:   });
  46:   table1.updateCell(2, 2, {
  47:     value: "",
  48:   });
  49:   table1.updateCell(2, 3, {
  50:     value: "",
  51:   });
  52:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  53:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  54: });
  55: undefined
  56: button2.on("click", () => {
  57:   ggb1.instance.reset();
  58    ggb2.instance.setValue("number", 0);

DIDwhiteboard • Print Alt/G6/M5/TC 09-Properties of Solids/slide9.js:
  28  
  29: buttonGroup1.on("click:1", () => {
  30:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  32:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  33:   //buttonGroup1.updateSingleButton({ disabled: false }, 4);
  34:   ggb1.instance.setValue("o", true);
  35    ggb2.instance.setValue("o", true);

  41  
  42: buttonGroup1.on("click:2", () => {
  43:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  44:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  45:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  46:   //buttonGroup1.updateSingleButton({ disabled: false }, 4);
  47:   ggb1.instance.setValue("n", true);
  48    ggb2.instance.setValue("n", true);

  54  
  55: buttonGroup1.on("click:3", () => {
  56:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  57:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  58:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  59:   //buttonGroup1.updateSingleButton({ disabled: false }, 4);
  60:   ggb1.instance.setValue("p", true);
  61    ggb2.instance.setValue("p", true);

DIDwhiteboard • Print Alt/G6/M5/TD L15-Exploring Volume of Fractional Cubes/slide2.js:
  12  
  13: buttonGroup1.on("click:1", () => {
  14:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  15:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  16:   ggb1.instance.setValue("cubeSize", 1);
  17    ggb1.instance.setValue("time2", ggb1.instance.getValue("cubeSize"));

  22  
  23: buttonGroup1.on("click:2", () => {
  24:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  26:   ggb1.instance.setAnimating("time1", false);
  27    ggb1.instance.setValue("time1", 0);

DIDwhiteboard • Print Alt/G6/M5/TD L15-Exploring Volume of Fractional Cubes/slide4.js:
   22  
   23: buttonGroup2.on("click:1", () => {
   24:   for (let i = 1; i < table1.data.rows.length; i++) {
   25:     table1.updateCell(i, 1, {
   26:       value: column1[i],
   27:       math: true,
   28:       editable: false,
   29:     });
   30:   }
   31:   for (let i = 1; i < table1.data.rows.length; i++) {
   32:     table1.updateCell(i, 2, {
   33:       value: column1[i],
   34:       math: true,
   35:       editable: false,
   36:     });
   37:   }
   38:   for (let i = 1; i < table1.data.rows.length; i++) {
   39:     table1.updateCell(i, 3, {
   40:       value: column2[i],
   41:       math: true,
   42:       editable: false,
   43:     });
   44:   }
   45: });
   46: undefined
   47: buttonGroup2.on("click:2", () => {
   48:   ggb1.instance.setValue("cubeSize", 1);
   49    ggb1.instance.setValue("time1", 0);

   74  
   75: buttonGroup1.on("click:1", () => {
   76:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
   77:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   78:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
   79:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
   80:   buttonGroup1.updateSingleButton({ disabled: false }, 5);
   81:   ggb1.instance.setValue("time3", 0.5);
   82    ggb1.instance.setValue("cubeSize", 0.5);

   85  
   86: buttonGroup1.on("click:2", () => {
   87:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
   88:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
   89:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
   90:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
   91:   buttonGroup1.updateSingleButton({ disabled: false }, 5);
   92:   ggb1.instance.setValue("time3", 1 / 3);
   93    ggb1.instance.setValue("cubeSize", 1 / 3);

   95  });
   96: buttonGroup1.on("click:3", () => {
   97:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
   98:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
   99:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  100:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  101:   buttonGroup1.updateSingleButton({ disabled: false }, 5);
  102:   ggb1.instance.setValue("time3", 0.25);
  103    ggb1.instance.setValue("cubeSize", 0.25);

  106  
  107: buttonGroup1.on("click:4", () => {
  108:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  109:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  110:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  111:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  112:   buttonGroup1.updateSingleButton({ disabled: false }, 5);
  113:   ggb1.instance.setValue("time3", 0.2);
  114    ggb1.instance.setValue("cubeSize", 0.2);

  117  
  118: buttonGroup1.on("click:5", () => {
  119:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  120:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  121:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  122:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  123:   buttonGroup1.updateSingleButton({ disabled: true }, 5);
  124:   ggb1.instance.setValue("time3", 1 / 6);
  125    ggb1.instance.setValue("cubeSize", 1 / 6);

DIDwhiteboard • Print Alt/G6/M6/TA L04 - Creating a Histogram/slide4.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  12:   ggb1.instance.setAnimating('time', false);
  13    ggb1.instance.setValue('time', 0);

  17  
  18: buttonGroup1.on('click:2', () => {
  19:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  20:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  21:   ggb1.instance.setAnimating('time', false);
  22    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Print Alt/G6/M6/TA L04 - Creating a Histogram/slide10.js:
   19  
   20: buttonGroup1.on('click:1', () => {
   21:   ggb1.instance.setValue('show2', true);
   22    ggb1.instance.setValue('show10', false);

  134  
  135: buttonGroup1.on('click:2', () => {
  136:   ggb1.instance.setValue('show2', false);
  137    ggb1.instance.setValue('show10', true);

DIDwhiteboard • Print Alt/G6/M6/TB L08 - The Mean as a Balance Point/slide2.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   if (ggb1.instance.getValue('correct')) {
  12      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  25  
  26: buttonGroup1.on('click:2', () => {
  27:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  28:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  29:   ggb1.instance.setAnimating('CCangle', false);
  30    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • Print Alt/G6/M6/TB L08 - The Mean as a Balance Point/slide3.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  12:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  13:   if (ggb1.instance.getValue('same')) {
  14      ggb1.instance.setValue('showText', true);

  37  
  38: buttonGroup1.on('click:2', () => {
  39:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  40:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  41:   ggb1.instance.setAnimating('CCangle', false);
  42    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • Print Alt/G6/M6/TB L08 - The Mean as a Balance Point/slide5.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   if (ggb1.instance.getValue('correct')) {
  12      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  25  
  26: buttonGroup1.on('click:2', () => {
  27:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  28:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  29:   ggb1.instance.setAnimating('CCangle', false);
  30    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • Print Alt/G6/M6/TB L08 - The Mean as a Balance Point/slide6.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   if (ggb1.instance.getValue('correct')) {
  12      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  25  
  26: buttonGroup1.on('click:2', () => {
  27:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  28:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  29:   ggb1.instance.setAnimating('CCangle', false);
  30    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • Print Alt/G6/M6/TB L08 - The Mean as a Balance Point/slide7.js:
  12  
  13: buttonGroup1.on('click:1', () => {
  14:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  15:   if (ggb1.instance.getValue('correct')) {
  16      ggb1.instance.evalCommand(`SetValue(showCheckMark, true)`);

  29  
  30: buttonGroup1.on('click:2', () => {
  31:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  32:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  33:   ggb1.instance.setAnimating('CCangle', false);
  34    ggb1.instance.setAnimating('CWangle', false);

DIDwhiteboard • Print Alt/G6/M6/TC L15 - More Practice with Box Plots/slide3.js:
  13  
  14: buttonGroup1.on('click:1', () => {
  15:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  17:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  18:   let buttonClickTime = new Date().getTime();
  19:   myInterval = setInterval(() => {
  20:     runTime = new Date().getTime();
  21:     timeDiff =
  22:       (Math.round((runTime - buttonClickTime) / 1000) * 1) / 1 + pauseTime;
  23:     //let smoothTime = (runTime - buttonClickTime) / 1000;
  24:     ggb1.instance.evalCommand(`countdown1=60 - ${timeDiff}`);
  25      ggb1.instance.evalCommand(`countdown2=120 - ${timeDiff}`);

  32  
  33: buttonGroup1.on('click:2', () => {
  34:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  35:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  36:   clearInterval(myInterval);
  37:   pauseTime = timeDiff;
  38: });
  39: undefined
  40: buttonGroup1.on('click:3', () => {
  41:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  42:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  43:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  44:   clearInterval(myInterval);
  45:   pauseTime = 0;
  46:   ggb1.instance.evalCommand(`countdown1=60`);
  47    ggb1.instance.evalCommand(`countdown2=120`);

DIDwhiteboard • Print Alt/G6/M6/TC L15 - More Practice with Box Plots/slide7.js:
  33  
  34: buttonGroup1.on('click:1', () => {
  35:   if (ggb1.instance.getValue('ready')) {
  36      buttonGroup1.updateSingleButton({ disabled: true }, 1);

DIDwhiteboard • Print Alt/G6/M6/TC L15 - More Practice with Box Plots/slide11.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setAnimating('time', false);
  13    ggb1.instance.setValue('time', 0);

  17  
  18: buttonGroup1.on('click:2', () => {
  19:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  20:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  21:   ggb1.instance.stopAnimation();
  22    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Print Alt/G6/M6/TD L20 - Choosing a Measure of Center/slide5.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setValue('showMedian', true);
  13  });
  14  
  15: buttonGroup1.on('click:2', () => {
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  18:   ggb1.instance.setValue('showMedian', false);
  19  });

DIDwhiteboard • Print Alt/G6/M6/TD L20 - Choosing a Measure of Center/slide6.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setValue('show', true);
  13  });
  14  
  15: buttonGroup1.on('click:2', () => {
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  18:   ggb1.instance.setValue('show', false);
  19  });

DIDwhiteboard • Print Alt/G6/M6/TD L20 - Choosing a Measure of Center/slide7.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setValue('show', true);
  13  });
  14  
  15: buttonGroup1.on('click:2', () => {
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  18:   ggb1.instance.setValue('show', false);
  19  });

DIDwhiteboard • Print Alt/G6/M6/TD L20 - Choosing a Measure of Center/slide8.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setValue('show', true);
  13  });
  14  
  15: buttonGroup1.on('click:2', () => {
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  18:   ggb1.instance.setValue('show', false);
  19  });

DIDwhiteboard • Print Alt/G7/M1/TB L09 - Comparing Proportional Relationships/slide8.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   let clickCount = ggb1.instance.getValue('clickCount');
  13    ggb1.instance.setValue('clickCount', clickCount + 1);

  19  
  20: buttonGroup1.on('click:2', () => {
  21:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  22:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  23:   ggb1.instance.setValue('clickCount', 0);
  24  });

DIDwhiteboard • Print Alt/G7/M2/TC L13 - Understanding Multiples of Negative Numbers/slide3.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setValue('show', true);
  13  });
  14  
  15: buttonGroup1.on('click:2', () => {
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  17:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  18:   ggb1.instance.setValue('show', false);
  19  });

DIDwhiteboard • Print Alt/G7/M2/TC L13 - Understanding Multiples of Negative Numbers/slide8.js:
  15  
  16: buttonGroup1.on('click:1', () => {
  17:   ggb1.instance.evalCommand('RunClickScript(opposite)');
  18    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  21  
  22: buttonGroup1.on('click:2', () => {
  23:   ggb1.instance.setValue('numOfGroups', 0);
  24    ggb1.instance.setValue('sizeOfGroup', 0);

DIDwhiteboard • Print Alt/G7/M3/TA L02 - The Distributive Property and the Tabular Model/slide6.js:
  23  
  24: buttonGroup1.on('click:1', () => {
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  26:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  27:   ggb1.instance.setAnimating('time', true);
  28    ggb1.instance.startAnimation();

  30  
  31: buttonGroup1.on('click:2', () => {
  32:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  33:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  34:   ggb1.instance.setValue('time', 0);
  35    ggb1.instance.setAnimating('time', false);

DIDwhiteboard • Print Alt/G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide2.js:
  36  //click through to pump button
  37: buttonGroup1.on('click:1', () => {
  38:   if (ggb2.instance.getValue('pumpChoice') != 0) {
  39      ggb2.instance.setFixed('pumpChoice', true, false);

  56  //click through to new balloon button
  57: buttonGroup1.on('click:2', () => {
  58:   ggb2.instance.setFixed('pumpChoice', true, true);
  59    ggb1.instance.evalCommand('RunClickScript(button2)');

DIDwhiteboard • Print Alt/G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide10 v2.js:
   8  
   9: buttonGroup1.on("click:1", () => {
  10:   reset();
  11:   ggb1.instance.startAnimation();
  12  });

DIDwhiteboard • Print Alt/G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide10.js:
   9  
  10: buttonGroup1.on('click:1', () => {
  11:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  12:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  13:   ggb1.instance.setAnimating('time', false);
  14    ggb1.instance.setValue('time', 0);

  18  
  19: buttonGroup1.on('click:2', () => {
  20:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  21:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  22:   ggb1.instance.setAnimating('time', false);
  23    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Print Alt/G7/M3/TD L18 - Understanding Inequalities and Their Solutions/slide14.js:
   75  //first line of buttons
   76: buttonGroup1.on('click:1', () => {
   77:   pointSelected = 'S1';
   78:   setButtonColor();
   79:   buttonGroup1.updateSingleButton({ color: 'warning' }, 1);
   80:   ggb1.instance.setValue('shownVal', -3);
   81    buttonClickFunction();
   82  });
   83: buttonGroup1.on('click:2', () => {
   84:   pointSelected = 'S2';
   85:   setButtonColor();
   86:   buttonGroup1.updateSingleButton({ color: 'warning' }, 2);
   87:   ggb1.instance.setValue('shownVal', -2);
   88    buttonClickFunction();
   89  });
   90: buttonGroup1.on('click:3', () => {
   91:   pointSelected = 'S3';
   92:   setButtonColor();
   93:   buttonGroup1.updateSingleButton({ color: 'warning' }, 3);
   94:   ggb1.instance.setValue('shownVal', -1);
   95    buttonClickFunction();
   96  });
   97: buttonGroup1.on('click:4', () => {
   98:   pointSelected = 'S4';
   99:   setButtonColor();
  100:   buttonGroup1.updateSingleButton({ color: 'warning' }, 4);
  101:   ggb1.instance.setValue('shownVal', 0);
  102    buttonClickFunction();

  105  //second line of buttons
  106: buttonGroup2.on('click:1', () => {
  107:   pointSelected = 'S5';
  108:   setButtonColor();
  109:   buttonGroup2.updateSingleButton({ color: 'warning' }, 1);
  110:   ggb1.instance.setValue('shownVal', 0.5);
  111    buttonClickFunction();
  112  });
  113: buttonGroup2.on('click:2', () => {
  114:   pointSelected = 'S6';
  115:   setButtonColor();
  116:   buttonGroup2.updateSingleButton({ color: 'warning' }, 2);
  117:   ggb1.instance.setValue('shownVal', 0.9);
  118    buttonClickFunction();
  119  });
  120: buttonGroup2.on('click:3', () => {
  121:   pointSelected = 'S7';
  122:   setButtonColor();
  123:   buttonGroup2.updateSingleButton({ color: 'warning' }, 3);
  124:   ggb1.instance.setValue('shownVal', 1);
  125    buttonClickFunction();
  126  });
  127: buttonGroup2.on('click:4', () => {
  128:   pointSelected = 'S8';
  129:   setButtonColor();
  130:   buttonGroup2.updateSingleButton({ color: 'warning' }, 4);
  131:   ggb1.instance.setValue('shownVal', 1.1);
  132    buttonClickFunction();

  135  //third line of buttons
  136: buttonGroup3.on('click:1', () => {
  137:   pointSelected = 'S9';
  138:   setButtonColor();
  139:   buttonGroup3.updateSingleButton({ color: 'warning' }, 1);
  140:   ggb1.instance.setValue('shownVal', 1.5);
  141    buttonClickFunction();
  142  });
  143: buttonGroup3.on('click:2', () => {
  144:   pointSelected = 'S10';
  145:   setButtonColor();
  146:   buttonGroup3.updateSingleButton({ color: 'warning' }, 2);
  147:   ggb1.instance.setValue('shownVal', 2);
  148    buttonClickFunction();
  149  });
  150: buttonGroup3.on('click:3', () => {
  151:   pointSelected = 'S11';
  152:   setButtonColor();
  153:   buttonGroup3.updateSingleButton({ color: 'warning' }, 3);
  154:   ggb1.instance.setValue('shownVal', 3);
  155    buttonClickFunction();
  156  });
  157: buttonGroup3.on('click:4', () => {
  158:   pointSelected = 'S12';
  159:   setButtonColor();
  160:   buttonGroup3.updateSingleButton({ color: 'warning' }, 4);
  161:   ggb1.instance.setValue('shownVal', 4);
  162    buttonClickFunction();

DIDwhiteboard • Print Alt/G7/M4/TC L11 The Inside of a Circle/slide2.js:
  10  
  11: buttonGroup1.on("click:1", () => {
  12:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  13:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  14:   ggb1.instance.setVisible("B1", false);
  15    ggb1.instance.setVisible("eq1", false);

  17  
  18: buttonGroup1.on("click:2", () => {
  19:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  20:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  21:   ggb1.instance.setVisible("B1", true);
  22    ggb1.instance.setVisible("eq1", true);

DIDwhiteboard • Print Alt/G7/M4/TC L11 The Inside of a Circle/slide3.js:
  44  
  45: buttonGroup1.on("click:1", () => {
  46:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  47:   if (ggb1.instance.getValue("y(B)") == 0) {
  48      text2.updateData({ text: "Hmm... your figure has no height." });

  69  
  70: buttonGroup1.on("click:2", () => {
  71:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  72:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  73:   //set all values back to initial state
  74:   ggb1.instance.stopAnimation();
  75    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/G7/M4/TC L11 The Inside of a Circle/slide4.js:
  44  
  45: buttonGroup1.on("click:1", () => {
  46:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  47:   if (ggb1.instance.getValue("y(B)") == 0) {
  48      text2.updateData({ text: "Hmm... your figure has no height." });

  60  
  61: buttonGroup1.on("click:2", () => {
  62:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  63:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  64:   //set all values back to initial state
  65:   ggb1.instance.stopAnimation();
  66    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/G7/M4/TC L11 The Inside of a Circle/slide14.js:
  38  
  39: buttonGroup1.on("click:1", () => {
  40:   ggb1.instance.setValue("a", ggb1.instance.getValue("a") - 0.1);
  41    if (Math.round(ggb1.instance.getValue("a") * 10) / 10 == 0.1) {

  59  
  60: buttonGroup1.on("click:2", () => {
  61:   if (ggb1.instance.getValue("a") < 1) {
  62      ggb1.instance.setValue("a", ggb1.instance.getValue("a") + 0.1);

DIDwhiteboard • Print Alt/G7/M4/TC L15 Watering a Lawn/slide3.js:
  25  
  26: buttonGroup1.on("click:1", () => {
  27:   ggb1.instance.evalCommand("RunClickScript(play)");
  28    ggb1.instance.evalCommand("SelectObjects()");

  47  
  48: buttonGroup1.on("click:2", () => {
  49:   //ggb1.instance.evalCommand("RunClickScript(reset)");
  50    ggb1.instance.setBase64(ggb1.data.initialState);

DIDwhiteboard • Print Alt/G7/M4/TC L15 Watering a Lawn/slide4.js:
  43  
  44: buttonGroup1.on("click:1", () => {
  45:   // keep it
  46:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  47:   ggb1.updateData({ string64: ggb1.instance.getBase64() });
  48  });
  49  
  50: buttonGroup1.on("click:2", () => {
  51:   // adjust it
  52:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  53:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  54:   button4.updateData({ visible: true });
  55:   ggb1.updateInnerData({ time1: 0, time2: 0 });
  56    ggb1.updateData({ init: true });

  62  
  63: buttonGroup1.on("click:3", () => {
  64:   // start over
  65:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  66:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  67:   button4.updateData({ visible: true });
  68:   ggb1.instance.setBase64(ggb1.data.initialState);
  69    ggb1.updateData({ init: true });

DIDwhiteboard • Print Alt/G7/M4/TE L23 - Cross Section Scavenger Hunt/OLD-slide4.js:
  28  
  29: buttonGroup1.on('click:1', () => {
  30:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  32:   ggb1.instance.setValue('showPrismPyramidBool', true);
  33    ggb2.instance.setValue('showPrismPyramidBool', true);

  35  
  36: buttonGroup1.on('click:2', () => {
  37:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  38:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  39:   ggb1.instance.setValue('showPrismPyramidBool', false);
  40    ggb2.instance.setValue('showPrismPyramidBool', false);

DIDwhiteboard • Print Alt/G7/M4/TE L23 - Cross Section Scavenger Hunt/slide4.js:
  37  
  38: buttonGroup1.on('click:1', () => {
  39:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  40:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  41:   ggb1.instance.setValue('showPrismPyramidBool', true);
  42    ggb2.instance.setValue('showPrismPyramidBool', true);

  44  
  45: buttonGroup1.on('click:2', () => {
  46:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  47:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  48:   ggb1.instance.setValue('showPrismPyramidBool', false);
  49    ggb2.instance.setValue('showPrismPyramidBool', false);

DIDwhiteboard • Print Alt/G7/M5/TA L02 Racing for Percents/slide2.js:
  28  
  29: buttonGroup1.on("click:1", () => {
  30:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  31:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  32:   ggb1.instance.setAnimating("time", true);
  33    ggb1.instance.startAnimation();

  35  
  36: buttonGroup1.on("click:2", () => {
  37:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  38:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  39:   ggb1.instance.stopAnimation();
  40  });
  41  
  42: buttonGroup1.on("click:3", () => {
  43:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  44:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  45:   ggb1.instance.setAnimating("time", true);
  46    ggb1.instance.startAnimation();

  48  
  49: buttonGroup1.on("click:4", () => {
  50:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  51:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  52:   ggb1.instance.setAnimating("time", false);
  53    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/G7/M5/TA L02 Racing for Percents/slide3.js:
  31  
  32: buttonGroup1.on("click:1", () => {
  33:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  34:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  35:   ggb1.instance.setAnimating("time", true);
  36    ggb1.instance.startAnimation();

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   //buttonGroup1.updateSingleButton({ disabled:false}, 1);
  41:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  43:   ggb1.instance.stopAnimation();
  44    buttonGroup1.updateSingleButton({ disabled: false }, 4);

  46  
  47: buttonGroup1.on("click:3", () => {
  48:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  49:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  50:   ggb1.instance.setAnimating("time", true);
  51    ggb1.instance.startAnimation();

  53  
  54: buttonGroup1.on("click:4", () => {
  55:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  56:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  57:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  58:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  59:   ggb1.instance.setAnimating("time", false);
  60    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/G7/M5/TA L02 Racing for Percents/slide4.js:
  31  
  32: buttonGroup1.on("click:1", () => {
  33:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  34:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  35:   ggb1.instance.setAnimating("time", true);
  36    ggb1.instance.startAnimation();

  38  
  39: buttonGroup1.on("click:2", () => {
  40:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  41:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 4);
  43:   ggb1.instance.stopAnimation();
  44  });
  45  
  46: buttonGroup1.on("click:3", () => {
  47:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  48:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  49:   ggb1.instance.setAnimating("time", true);
  50    ggb1.instance.startAnimation();

  52  
  53: buttonGroup1.on("click:4", () => {
  54:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  55:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  56:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  57:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  58:   ggb1.instance.setAnimating("time", false);
  59    ggb1.instance.setValue("time", 0);

DIDwhiteboard • Print Alt/G7/M6/TB L08 - Picking Blue/slide9.js:
  31  
  32: buttonGroup1.on('click:1', () => {
  33:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  34:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  35:   ggb1.instance.evalCommand('SetValue(blueChipX,RandomBetween(-2,2))');
  36    ggb2.instance.setVisible('q', true);

  45  
  46: buttonGroup1.on('click:2', () => {
  47:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  48:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  49:   ggb1.instance.setAnimating('time', false);
  50    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Print Alt/G7/M6/TB L08 - Picking Blue/slide10.js:
  31  
  32: buttonGroup1.on('click:1', () => {
  33:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  34:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  35:   ggb1.instance.evalCommand('SetValue(blueChipX,RandomBetween(-2,2))');
  36    ggb2.instance.setVisible('q', true);

  45  
  46: buttonGroup1.on('click:2', () => {
  47:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  48:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  49:   ggb1.instance.setAnimating('time', false);
  50    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Print Alt/G7/M6/TB L08 - Picking Blue/slide15.js:
  46  
  47: buttonGroup1.on('click:1', () => {
  48:   updateSingleButtonGroup(1, { disabled: true }, buttonGroup1);
  49:   updateSingleButtonGroup(2, { disabled: false }, buttonGroup1);
  50:   updateSingleButtonGroup(3, { disabled: false }, buttonGroup1);
  51:   ggb1.instance.evalCommand('SetValue(blueChipX,RandomBetween(-2,2))');
  52    ggb2.instance.setVisible('q', true);

  62  
  63: buttonGroup1.on('click:2', () => {
  64:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  65:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  66:   ggb1.instance.setAnimating('time', false);
  67    ggb1.instance.setValue('time', 0);

  74  
  75: buttonGroup1.on('click:3', () => {
  76:   updateSingleButtonGroup(1, { disabled: false }, buttonGroup1);
  77:   updateSingleButtonGroup(2, { disabled: true }, buttonGroup1);
  78:   updateSingleButtonGroup(3, { disabled: true }, buttonGroup1);
  79:   ggb1.instance.setAnimating('time', false);
  80    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Print Alt/G8/M1/TD L18 - The Pythagorean Theorem/slide5.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  12:   ggb1.instance.setAnimating('time', false);
  13    ggb1.instance.setValue('time', 0);

  17  
  18: buttonGroup1.on('click:2', () => {
  19:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  20:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  21:   ggb1.instance.setAnimating('time2', false);
  22    ggb1.instance.setValue('time2', 0);

  26  
  27: buttonGroup1.on('click:3', () => {
  28:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  29:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  30:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  31:   ggb1.instance.setAnimating('time', false);
  32    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Print Alt/G8/M1/TE L21 Approximate Values of Roots and Pi Squared/slide6.js:
  22  
  23: buttonGroup1.on('click:1', () => {
  24:   const low = round(ggb1.instance.getValue('lowEnd'), safeRound);
  25    const high = round(ggb1.instance.getValue('highEnd'), safeRound);

  44  
  45: buttonGroup1.on('click:3', () => {
  46:   // first time through
  47:   //if (count == 0) {
  48:   /*ggb1.instance.stopAnimation();
  49      ggb1.instance.setValue('zoom', 0);

  87  
  88: buttonGroup1.on('click:4', () => {
  89:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  90:   buttonGroup1.updateSingleButton({ disabled: true }, 4);
  91:   ggb1.instance.setValue('showDragger', true);
  92    ggb1.instance.setValue('time2', 0);

  95  
  96: buttonGroup1.on('click:2', () => {
  97:   ggb1.instance.stopAnimation();
  98    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Print Alt/G8/M2/TA L4-Translations and Reflections on the Coordinate Plane/slide2.js:
  32  
  33: buttonGroup1.on("click:1", () => {
  34:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  36:   ggb1.instance.stopAnimation();
  37    ggb1.instance.setAnimating("timeMove", true);

  43  
  44: buttonGroup1.on("click:2", () => {
  45:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  46:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  47:   ggb1.instance.stopAnimation();
  48  });

DIDwhiteboard • Print Alt/G8/M2/TA L4-Translations and Reflections on the Coordinate Plane/slide3.js:
  42  
  43: buttonGroup1.on("click:1", () => {
  44:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  45:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  46:   text1.updateData({ visible: true });
  47:   select1.setVisible(true);
  48:   ggb1.instance.stopAnimation();
  49    ggb1.instance.setAnimating("timeMove", true);

  61  
  62: buttonGroup1.on("click:2", () => {
  63:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  64:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  65:   ggb1.instance.stopAnimation();
  66    ggb1.instance.setAnimating("timeMove", false);

DIDwhiteboard • Print Alt/G8/M2/TA L4-Translations and Reflections on the Coordinate Plane/slide5.js:
   8  
   9: buttonGroup1.on("click:1", () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setAnimating("time", false);
  13    ggb1.instance.setValue("time", 0);

  21  
  22: buttonGroup1.on("click:2", () => {
  23:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  24:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  25:   ggb1.instance.stopAnimation();
  26    ggb1.instance.setAnimating("time", false);

DIDwhiteboard • Print Alt/G8/M2/TA L4-Translations and Reflections on the Coordinate Plane/slide6.js:
  14  
  15: buttonGroup1.on("click:1", () => {
  16:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  17:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  18:   ggb1.instance.stopAnimation();
  19    ggb1.instance.setAnimating("timeMove", true);

  27  
  28: buttonGroup1.on("click:2", () => {
  29:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  30:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  31:   ggb1.instance.stopAnimation();
  32  });

DIDwhiteboard • Print Alt/G8/M2/TC L13 - Angle Sum of a Triangle/slide2.js:
  12  
  13: buttongroup1.on('click:1', () => {
  14:   alert('button1 clicked!');
  15:   ggb1.instance.evalCommand('RunClickScript(split)');
  16    buttongroup1.updateSingleButton({ disabled: true }, 1);

  19  
  20: buttongroup1.on('click:2', () => {
  21:   alert('button2 clicked!');
  22:   ggb1.instance.evalCommand('RunClickScript(button1)');
  23    buttongroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • Print Alt/G8/M2/TD L17 - Proving the Pythagorean Theorem/slide3.js:
   8  
   9: buttonGroup1.on('click:1', () => {
  10:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  11:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  12:   ggb1.instance.setValue('step', 1);
  13    ggb1.instance.setValue('timeRot', 0);

  16  
  17: buttonGroup1.on('click:2', () => {
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  19:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  20:   ggb1.instance.evalCommand('RunClickScript(button1)');
  21  });

DIDwhiteboard • Print Alt/G8/M2/TD L17 - Proving the Pythagorean Theorem/slide4.js:
  26  
  27: buttonGroup1.on('click:1', () => {
  28:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  29:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  30:   ggb1.instance.setValue('step', 6);
  31    ggb1.instance.setValue('timeTran1', 0);

  37  
  38: buttonGroup1.on('click:2', () => {
  39:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  40:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  41:   ggb1.instance.setValue('timeTran1', 0);
  42    ggb1.instance.setValue('timeTran2', 0);

DIDwhiteboard • Print Alt/G8/M2/TD L17 - Proving the Pythagorean Theorem/slide5.js:
  11  
  12: /*buttonGroup1.on('click:1', () => {
  13:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  14:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  15:   ggb1.instance.setValue('colorBool', true);
  16  });
  17  
  18: buttonGroup1.on('click:2', () => {
  19:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  20:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  21:   ggb1.instance.setValue('colorBool', false);
  22  });*/

DIDwhiteboard • Print Alt/G8/M2/TD L18 - Proving the Converse of the Pythagorean/slide3.js:
  57  
  58: buttonGroup1.on('click:1', () => {
  59:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  60:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  61:   ggb1.instance.setAnimating('time', true);
  62    ggb1.instance.startAnimation();

  64  
  65: buttonGroup1.on('click:2', () => {
  66:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  67:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  68:   ggb1.instance.stopAnimation();
  69    ggb1.instance.setValue('time', 0);

DIDwhiteboard • Print Alt/G8/M3/TD L17 - Similar Triangles on a Line/slide2.js:
  17  
  18: buttonGroup1.on('click:1', () => {
  19:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  20:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  21:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  22:   ggb1.instance.setVisible("t1'", true);
  23    ggb1.instance.evalCommand('RunClickScript(button1)');

  25  
  26: buttonGroup1.on('click:2', () => {
  27:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  28:   buttonGroup1.updateSingleButton({ disabled: false }, 3);
  29:   for (let i = 0, L = sideArray.length; i < L; i++) {
  30:     ggb1.instance.setLabelVisible(sideArray[i], true);
  31    }

  33  
  34: buttonGroup1.on('click:3', () => {
  35:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  36:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  37:   buttonGroup1.updateSingleButton({ disabled: true }, 3);
  38:   for (let i = 0, L = sideArray.length; i < L; i++) {
  39:     ggb1.instance.setLabelVisible(sideArray[i], false);
  40    }

DIDwhiteboard • Print Alt/G8/M3/TD L17 - Similar Triangles on a Line/slide3.js:
  11  
  12: buttonGroup1.on('click:1', () => {
  13:   ggb1.instance.evalCommand('RunClickScript(button1)');
  14    buttonGroup1.updateSingleButton({ disabled: true }, 1);

  17  
  18: buttonGroup1.on('click:2', () => {
  19:   ggb1.instance.evalCommand('RunClickScript(button2)');
  20    buttonGroup1.updateSingleButton({ disabled: true }, 2);

  23  
  24: buttonGroup1.on('click:3', () => {
  25:   ggb1.instance.evalCommand('RunClickScript(button3)');
  26    buttonGroup1.updateSingleButton({ disabled: false }, 1);

DIDwhiteboard • Print Alt/G8/M3/TD L17 - Similar Triangles on a Line/slide4.js:
  10  
  11: buttonGroup1.on('click:1', () => {
  12:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  13:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  14:   ggb1.instance.evalCommand('RunClickScript(button1)');
  15  });
  16  
  17: buttonGroup1.on('click:2', () => {
  18:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  19:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  20:   ggb1.instance.evalCommand('RunClickScript(button2)');
  21  });

DIDwhiteboard • Print Alt/G8/M5/TC L12-Solving Historical Problems with Systems of Equations/slide4.js:
   99  
  100: buttonGroup1.on('click:1', () => {
  101:   while (target1Arr.length > 0) {
  102:     removeLastAInTar1();
  103:     removeLastBInTar1();
  104:   }
  105:   sortArrays();
  106:   checkTilt();
  107:   updateGGB();
  108    buttonGroup1.updateSingleButton({ disabled: true }, 1);

DIDwhiteboard • Print Alt/G8/M6/TA L01 - Motion and Speed/slide2.js:
  37  
  38: buttonGroup1.on('click:1', () => {
  39:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  40:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  41:   let clickCount = ggb1.instance.getValue('clickCount');
  42    ggb1.instance.setValue('clickCount', clickCount + 1);

  49  
  50: buttonGroup1.on('click:2', () => {
  51:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  52:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  53:   let clickCount = ggb1.instance.getValue('clickCount');
  54    ggb1.instance.setValue('clickCount', clickCount + 1);

DIDwhiteboard • Print Alt/G8/M6/TA L01 - Motion and Speed/slide4.js:
  12  
  13: buttonGroup1.on('click:1', () => {
  14:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  15:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  16:   let clickCount = ggb1.instance.getValue('clickCount');
  17    ggb1.instance.setValue('clickCount', clickCount + 1);

  21  
  22: buttonGroup1.on('click:2', () => {
  23:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  24:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  25:   let clickCount = ggb1.instance.getValue('clickCount');
  26    ggb1.instance.setValue('clickCount', clickCount + 1);

DIDwhiteboard • Print Alt/G8/M6/TA L01 - Motion and Speed/slide6.js:
  13  
  14: buttonGroup1.on('click:1', () => {
  15:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  16:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  17:   let clickCount = ggb1.instance.getValue('clickCount');
  18    ggb1.instance.setValue('clickCount', clickCount + 1);

  22  
  23: buttonGroup1.on('click:2', () => {
  24:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  25:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  26:   let clickCount = ggb1.instance.getValue('clickCount');
  27    ggb1.instance.setValue('clickCount', clickCount + 1);

DIDwhiteboard • Print Alt/G8/M6/TA L01 - Motion and Speed/slide7.js:
  32  
  33: buttonGroup1.on('click:1', () => {
  34:   let clickCount = ggb1.instance.getValue('clickCount');
  35    ggb1.instance.setValue('clickCount', clickCount + 1);

  42  
  43: buttonGroup1.on('click:2', () => {
  44:   let clickCount = ggb1.instance.getValue('clickCount');
  45    ggb1.instance.setValue('clickCount', clickCount + 1);

  52  
  53: buttonGroup1.on('click:3', () => {
  54:   ggb1.instance.setValue('time', 0);
  55    ggb1.instance.setValue('clickCount', 0);

DIDwhiteboard • Print Alt/G8/M6/TA L01 - Motion and Speed/slide8.js:
  47  
  48: buttonGroup1.on('click:1', () => {
  49:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  50:   //buttonGroup1.updateSingleButton({ disabled: false }, 2);
  51:   ggb1.instance.setValue('check', true);
  52    let studentInput1 = table1.data.rows[0][1].value; // t = 0.5

DIDwhiteboard • Print Alt/G8/M6/TC L11 - Scatter Plots/slide3.js:
  105  
  106: buttonGroup1.on('click:1', () => {
  107:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  108:   text2.updateData({ visible: true });
  109:   ggb1.instance.setValue('showHalos', false);
  110    ggb1.instance.setVisible('deliver', false);

  129  
  130: buttonGroup1.on('click:2', () => {
  131:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  132:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  133:   text2.updateData({ text: `$0$ days` });
  134:   ggb1.instance.setValue('selection', 0);
  135    ggb1.instance.setValue('show', false);

DIDwhiteboard • Print Alt/G8/M6/TE L22 - Volume of Cylinders/slide3.js:
  45  
  46: buttonGroup1.on('click:1', () => {
  47:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  48:   ggb1.instance.setValue('time1', 0);
  49    ggb1.instance.setAnimating('time1', true);

  52  
  53: buttonGroup1.on('click:2', () => {
  54:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  55:   ggb1.instance.setValue('time2', 0);
  56    ggb1.instance.setAnimating('time2', true);

DIDwhiteboard • Print Alt/G8/M6/TE L22 - Volume of Cylinders/slide7.js:
  29  
  30: buttonGroup1.on('click:1', () => {
  31:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  32:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  33:   let clickCount = ggb1.instance.getValue('clickCount');
  34    ggb1.instance.setValue('clickCount', clickCount + 1);

  45  
  46: buttonGroup1.on('click:2', () => {
  47:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  48:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  49:   let clickCount = ggb1.instance.getValue('clickCount');
  50    ggb1.instance.setValue('clickCount', clickCount + 1);

  60  
  61: buttonGroup2.on('click:1', () => {
  62:   buttonGroup2.updateSingleButton({ disabled: true }, 1);
  63:   buttonGroup2.updateSingleButton({ disabled: false }, 2);
  64:   ggb1.instance.setAnimating('time2', false);
  65    ggb1.instance.setValue('time2', 0);

  69  
  70: buttonGroup2.on('click:2', () => {
  71:   buttonGroup2.updateSingleButton({ disabled: false }, 1);
  72:   buttonGroup2.updateSingleButton({ disabled: true }, 2);
  73:   ggb1.instance.stopAnimation();
  74    ggb1.instance.setAnimating('time2', false);

DIDwhiteboard • Print Alt/G8/M6/TE L22 - Volume of Cylinders/slide9.js:
  24  
  25: buttonGroup1.on('click:1', () => {
  26:   buttonGroup1.updateSingleButton({ disabled: true }, 1);
  27:   buttonGroup1.updateSingleButton({ disabled: false }, 2);
  28:   let clickCount = ggb1.instance.getValue('clickCount');
  29    ggb1.instance.setValue('clickCount', clickCount + 1);

  40  
  41: buttonGroup1.on('click:2', () => {
  42:   buttonGroup1.updateSingleButton({ disabled: false }, 1);
  43:   buttonGroup1.updateSingleButton({ disabled: true }, 2);
  44:   let clickCount = ggb1.instance.getValue('clickCount');
  45    ggb1.instance.setValue('clickCount', clickCount + 1);

  55  
  56: buttonGroup2.on('click:1', () => {
  57:   buttonGroup2.updateSingleButton({ disabled: true }, 1);
  58:   buttonGroup2.updateSingleButton({ disabled: false }, 2);
  59:   ggb1.instance.setAnimating('time2', false);
  60    ggb1.instance.setValue('time2', 0);

  64  
  65: buttonGroup2.on('click:2', () => {
  66:   buttonGroup2.updateSingleButton({ disabled: false }, 1);
  67:   buttonGroup2.updateSingleButton({ disabled: true }, 2);
  68:   ggb1.instance.stopAnimation();
  69    ggb1.instance.setAnimating('time2', false);
